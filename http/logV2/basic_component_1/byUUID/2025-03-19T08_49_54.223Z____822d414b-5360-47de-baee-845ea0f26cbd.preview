{"line":38,"column":0}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
@Entry
@Component
struct BasicComponent {
  @State message: string = 'Hello, World!'

  build() {
    Column() {
      Row() {
        Text(this.message)
      }
      .width('100%')
      .height(100)
      .backgroundColor('#000000')
      .justifyContent(FlexAlign.Center)
      .alignItems(ItemAlign.Center)

      Button() {
        Text('Click me')
      }
      .width('100%')
      .height(100)
      .backgroundColor('#000000')
      .justifyContent(FlexAlign.Center)
      .alignItems(ItemAlign.Center)

      Stack() {
        Text('Hello, World!')
        Text('Hello, World!')
        Text('Hello, World!')
      }
      .width('100%')
      .height(100)
    }
  }
}

@Component
struct ListExample {
[ToFill]

  build() {
    List() {
      Text('Hello, World!')
    }
  }
}

-------------------------------[               firstChunkValue               ]--------------------------------
}

@Component
struct ListExample {
  @State items: string[] = ['Item 1', 'Item 2', 'Item 3']

  build() {
    List() {
-------------------------------[       replacedContentsWithFirstChunk        ]--------------------------------
@Entry
@Component
struct BasicComponent {
  @State message: string = 'Hello, World!'

  build() {
    Column() {
      Row() {
        Text(this.message)
      }
      .width('100%')
      .height(100)
      .backgroundColor('#000000')
      .justifyContent(FlexAlign.Center)
      .alignItems(ItemAlign.Center)

      Button() {
        Text('Click me')
      }
      .width('100%')
      .height(100)
      .backgroundColor('#000000')
      .justifyContent(FlexAlign.Center)
      .alignItems(ItemAlign.Center)

      Stack() {
        Text('Hello, World!')
        Text('Hello, World!')
        Text('Hello, World!')
      }
      .width('100%')
      .height(100)
    }
  }
}

@Component
struct ListExample {
  @State items: string[] = ['Item 1', 'Item 2', 'Item 3']

  build() {
    List() {
      Text('Hello, World!')
    }
  }
}

-------------------------------[                   fullText                  ]--------------------------------
}

@Component
struct ListExample {
  @State items: string[] = ['Item 1', 'Item 2', 'Item 3']

  build() {
    List() {
-------------------------------[             fusedCursorPrediction            ]--------------------------------
{
  "relativePath": "entry/src/main/ets/utils/basicComponent.ets",
  "lineNumberOneIndexed": 43,
  "text": "Text('Hello, World!')\n}\n}\n}\n",
  "shouldRetriggerCpp": true
}
--------------------------------[        displayedFusedCursorPrediction       ]---------------------------------
{
  "relativePath": "entry/src/main/ets/utils/basicComponent.ets",
  "lineNumberOneIndexed": 43,
  "text": "Text('Hello, World!')\n}\n}\n}\n",
  "shouldRetriggerCpp": true
}