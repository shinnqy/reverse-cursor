{"line":0,"column":7}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
import [ToFill]

export class AuthService {
  static login(user: User): ApiResponse<string> {
    Logger.log(`User ${user.name} logged in`);
    return { code: 200, data: 'token', timestamp: Date.now() };
  }
}

export class ProductService {
  private inventory: Product[] = [];

  updatePrice(product: Product, newPrice: number): void {
    product.price = newPrice;
    Logger.log(`Price updated for ${product.sku}`);
  }
}

export class OrderService {
  static createOrder(items: CartItem[]): Order {
    return new Order(
      `ORD-${Date.now()}`,
      items.map(i =>
        new CartItem(
          i.sku,
          i.name,
          i.price,
          i.inventory,
          i.quantity
        )
      ),
      'pending'
    );
  }
}

export class PaymentService {
  processPayment(order: Order, method: PaymentMethod): boolean {
    Logger.log(`Processing ${method.cardNumber.substring(12)}`); // ✅ 安全访问
    return Math.random() > 0.5;
  }
}

export class CartService {
  private items: CartItem[] = [];

  public getItems(): CartItem[] {
    return [...this.items]; // 返回副本避免直接修改
  }
  addItem(product: Product, quantity: number): void {
    const existing = this.items.find(i => i.sku === product.sku);
    existing ? existing.quantity += quantity :
    this.items.push(new CartItem(
      product.sku,
      product.name,
      product.price,
      product.inventory,
      quantity
    ));
  }
}


-------------------------------[               firstChunkValue               ]--------------------------------
import { Logger } from '@ohos.logger';

export class AuthService {
  static login(user: User): ApiResponse<string> {
-------------------------------[                   fullText                  ]--------------------------------
import { Logger } from '@ohos.logger';

export class AuthService {
  static login(user: User): ApiResponse<string> {
-------------------------------[             fusedCursorPrediction            ]--------------------------------
{
  "relativePath": "entry/src/main/ets/utils/import/services.ets",
  "lineNumberOneIndexed": 2,
  "text": "",
  "shouldRetriggerCpp": true
}