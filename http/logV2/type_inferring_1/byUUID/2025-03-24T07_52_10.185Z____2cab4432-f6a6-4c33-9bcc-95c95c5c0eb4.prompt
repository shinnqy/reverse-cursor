You're an expert in ArkTS. Your task is to help the user update the code around current cursor position.

## Recent Actions
Here is what the user has been doing from the earliest to the latest:

File: entry/src/main/ets/utils/typingInfer.ets
deleted the code `` in line 1
added the code `ine` in line 1

deleted the code `ine` in line 1
added the code `interface User {id: nu}` in line 1
added the code `` in line 2
added the code `` in line 3

deleted the code `interface User {id: nu}` in line 1
added the code `interface User {id: number;` in line 1
added the code `    name: string;` in line 2
added the code `    age: number;` in line 3
added the code `}` in line 4

added the code `interface Admin { level: number; permission: string[] }` in line 6
added the code `interface Post {title: string; content: string}` in line 8
added the code `interface Comment {` in line 10
added the code `    id: number;` in line 11
added the code `    content: string;` in line 12
added the code `}` in line 13
added the code `` in line 14
added the code `` in line 15
added the code `` in line 16
added the code `` in line 17

deleted the code `    content: string;` in line 12
added the code `    author: string;` in line 12

added the code `type UserRole = User ` in line 15

added the code `type Content = Post ` in line 17
added the code `type Result<T> = T ` in line 19
added the code `` in line 20
added the code `type ID = string ` in line 21
added the code `` in line 22
added the code `type Status = 'pending' ` in line 23
added the code `` in line 24
added the code `class Response<T> {` in line 25
added the code `  ` in line 26
added the code `}` in line 27

deleted the code `class Response<T> {` in line 25
deleted the code `  ` in line 26
added the code `class Response<T {` in line 25
added the code `  data: T ` in line 26
added the code `  status: number;` in line 27

deleted the code `class Response<T {` in line 25
deleted the code `  data: T ` in line 26
added the code `class Response {` in line 25
added the code `  data: Error;` in line 26

deleted the code `  ` in line 28
deleted the code `  ` in line 29
added the code `` in line 28
added the code `  constructor(data: Error, status: number) {` in line 29

added the code `    this.data = data;` in line 30
added the code `    this.status = status;` in line 31
added the code `  }` in line 32

deleted the code `class Response {` in line 25
deleted the code `  data: Error;` in line 26
added the code `class Response<T> {` in line 25
added the code `  data: T ` in line 26

deleted the code `  constructor(data: Error, status: number) {` in line 29
added the code `  constructor(data: T ` in line 29

added the code `class DataProcessor {` in line 35
added the code `}` in line 36

added the code `  private items: string[] = [];` in line 36
added the code `` in line 37
added the code `  addItem(item: string) {` in line 38
added the code `    this.items.push(item);` in line 39
added the code `  }` in line 40
added the code `  ` in line 41
added the code `  ` in line 42

deleted the code `  ` in line 41
deleted the code `  ` in line 42
added the code `` in line 41
added the code `  getFirstItem(): string ` in line 42
added the code `    return this.items[0];` in line 43
added the code `  }` in line 44
added the code `` in line 45
added the code `  getItems(): string[] {` in line 46
added the code `    return this.items;` in line 47
added the code `  }` in line 48

deleted the code `class DataProcessor {` in line 35
deleted the code `  private items: string[] = [];` in line 36
added the code `class DataProcessor<T extends Con> {` in line 35
added the code `  private items: T[] = [];` in line 36

deleted the code `class DataProcessor<T extends Con> {` in line 35
added the code `class DataProcessor<T extends Content> {` in line 35

deleted the code `  addItem(item: string) {` in line 38
added the code `  addItem(item: T) {` in line 38

deleted the code `  getFirstItem(): string ` in line 42
added the code `  getFirstItem(): T ` in line 42

added the code `class UserProcessor extends DataProcessor<User> {` in line 51
added the code `  private users: User[] = [];` in line 52
added the code `  ` in line 53
added the code `  ` in line 54
added the code `}` in line 55
added the code `` in line 56

deleted the code `  getItems(): string[] {` in line 46
added the code `  getItems(): T[] {` in line 46

deleted the code `class UserProcessor extends DataProcessor<User> {` in line 51
deleted the code `  private users: User[] = [];` in line 52
deleted the code `` in line 53
deleted the code `` in line 54
added the code `function merge(a: string, b: string): string {` in line 51
added the code `  ` in line 52

deleted the code `function merge(a: string, b: string): string {` in line 51
deleted the code `  ` in line 52
added the code `function merge<(a: string, b: string): string {` in line 51
added the code `  return (typeof a === 'string' ? a + b : a);` in line 52

deleted the code `function merge<(a: string, b: string): string {` in line 51
deleted the code `  return (typeof a === 'string' ? a + b : a);` in line 52
added the code `function merge<T extends string ` in line 51
added the code `  return (typeof a === 'string' ? a + b : a) as;` in line 52

added the code `function processContent<T extends Content>(content: T): T {` in line 55
added the code `  return content;` in line 56
added the code `}` in line 57
added the code `` in line 58
added the code `` in line 59
added the code `` in line 60

deleted the code `  return (typeof a === 'string' ? a + b : a) as;` in line 52
added the code `  return (typeof a === 'string' ? a + b : a) as T;` in line 52

deleted the code `function processContent<T extends Content>(content: T): T {` in line 55
deleted the code `  return content;` in line 56
added the code `function wrap(input) {` in line 55
added the code `  ` in line 56

deleted the code `function wrap(input) {` in line 55
deleted the code `  ` in line 56
added the code `function wrap<(input) {` in line 55
added the code `  return [input]` in line 56

deleted the code `function wrap<(input) {` in line 55
added the code `function wrap<T>(input) {` in line 55

added the code `function processContent<T extends Content>(content: T): T {` in line 59
added the code `  return content;` in line 60
added the code `}` in line 61
added the code `` in line 62
added the code `` in line 63
added the code `` in line 64

deleted the code `function wrap<T>(input) {` in line 55
added the code `function wrap<T>(input: T): T[] {` in line 55

deleted the code `function processContent<T extends Content>(content: T): T {` in line 59
deleted the code `  return content;` in line 60
added the code `class Cache {` in line 59
added the code `  ` in line 60

added the code `  private store = new Map<string, null>();` in line 60

deleted the code `  ` in line 61
deleted the code `  ` in line 62
added the code `` in line 61
added the code `  get(key: string) {` in line 62
added the code `    return this.store.get(key);` in line 63
added the code `  }` in line 64
added the code `` in line 65
added the code `  set(key: string, value: null) {` in line 66
added the code `    this.store.set(key, value);` in line 67
added the code `  }` in line 68

deleted the code `class Cache {` in line 59
deleted the code `  private store = new Map<string, null>();` in line 60
added the code `class Cache<T> {` in line 59
added the code `  private store = new Map<string, T>();` in line 60

deleted the code `  set(key: string, value: null) {` in line 66
added the code `  set(key: string, value: T) {` in line 66

deleted the code `  get(key: string) {` in line 62
added the code `  get(key: string): T ` in line 62

deleted the code `` in line 71
added the code `function demo() {` in line 71
added the code `  ` in line 72
added the code `}` in line 73

added the code `  const userRes = new Response<User>({ id: 1, name: 'John', age: 20 }, 200);` in line 72

deleted the code `  ` in line 73
deleted the code `  ` in line 74
added the code `` in line 73
added the code `  const processor = new DataProcessor<Post>();` in line 74
added the code `  processor` in line 75


## Current Code
Here is the current code file path:
entry/src/main/ets/utils/typingInfer.ets

Here is the current code around the cursor position:

```
interface User {
    id: number;
    name: string;
    age: number;
}
interface Admin { level: number; permission: string[] }

interface Post {title: string; content: string}

interface Comment {
    id: number;
    author: string;
}

type UserRole = User | Admin;

type Content = Post | Comment;

type Result<T> = T | Error;

type ID = string | number;

type Status = 'pending' | 'success' | 'error';

class Response<T> {
  data: T | Error;
  status: number;

  constructor(data: T | Error, status: number) {
    this.data = data;
    this.status = status;
  }
}

class DataProcessor<T extends Content> {
  private items: T[] = [];

  addItem(item: T) {
    this.items.push(item);
  }

  getFirstItem(): T | undefined {
    return this.items[0];
  }

  getItems(): T[] {
    return this.items;
  }
}

function merge<T extends string | number>(a: T, b: T): T {
  return (typeof a === 'string' ? a + b : a) as T;
}

function wrap<T>(input: T): T[] {
  return [input]
}

class Cache<T> {
  private store = new Map<string, T>();

  get(key: string): T | undefined {
    return this.store.get(key);
  }
<|editable_region_start|>

  set(key: string, value: T) {
    this.store.set(key, value);
  }
}

function demo() {
  const userRes = new Response<User>({ id: 1, name: 'John', age: 20 }, 200);

  const processor = new DataProcessor<Post>();
  processor<|current_cursor_position|>
}

<|editable_region_end|>
```

## Task
Rewrite the code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> according to the following requirements:
1. Enforce code format strictly matching existing code style.
2. Propagate naming convention changes to all related cases
3. Preserve original functionality
4. Apply changes to entire code regardless of cursor position
5. Focus on code after cursor position at <|current_cursor_position|>

# Output Format
Return ONLY the rewritten code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> without any other words.
Never use markdown formatting like ```. Return raw text only.