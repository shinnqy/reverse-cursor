You're an expert in ArkTS. Your task is to help the user update the code around current cursor position.

## Recent Actions
Here is what the user has been doing from the earliest to the latest:

File: entry/src/main/ets/utils/dynamicProp.ets
deleted the code `const greeting = `Hello, ${user}!`;` in line 14
added the code `const greeting = `Hello, ${user.name}!`;` in line 14

deleted the code `const fullName = `Full Name: ${getFullName(currentUser)}`;` in line 24
added the code `const fullName = `Full Name: ${getFullName(currentUser).toUpperCase()}`;` in line 24

deleted the code `const productInfo = `Current Product: ${products[0]}.`;` in line 41
added the code `const productInfo = `Current Product: ${products[0].name}.`;` in line 41


## Current Code
Here is the current code file path:
entry/src/main/ets/utils/dynamicProp.ets

Here is the current code around the cursor position:

```
interface Address {
    city: string;
}
interface User {
    name: string;
    age: number;
    address: Address;
}
const user: User = {
    name: "Alice",
    age: 30,
    address: { city: "Shenzhen" }
};
const greeting = `Hello, ${user.name}!`;

interface FullName {
    firstName: string;
    lastName: string;
}
function getFullName(user: FullName) {
    return `${user.firstName} ${user.lastName}`;
}
const currentUser: FullName = { firstName: "John", lastName: "Doe" };
const fullName = `Full Name: ${getFullName(currentUser).toUpperCase()}`;

const price = 99.99;
const discount = 0.2;
const priceInfo = `Price: ${(price * (1 - discount))}`;

const isAdmin = true;
const roleMessage = `Role: ${isAdmin ? "Administrator" : "Guest"}.`;

interface Product {
    id: number;
    name: string;
}
const products: Product[] = [
    { id: 1, name: "Phone" },
    { id: 2, name: "Laptop" }
];
const productInfo = `Current Product: ${products[0].name}.`;

type Status = "active" | "inactive";
let status: Status = "active";
const statusText = `Status: ${status}`;

interface Company {
    name: string;
    ceo: CEO;
}
interface CEO {
    name: string;
    contact: Contact;
}

<|editable_region_start|>
interface Contact {
    email: string;
}
const company: Company = {
    name: "Tech Corp",
    ceo: {
        name: "Bob",
        contact: { email: "bob@tech.com" }
    }
};
<|current_cursor_position|>const emailTemplate = `CEO Email: ${company}`;
<|editable_region_end|>
```

## Task
Rewrite the code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> according to the following requirements:
1. Enforce code format strictly matching existing code style.
2. Propagate naming convention changes to all related cases
3. Preserve original functionality
4. Apply changes to entire code regardless of cursor position
5. Focus on code after cursor position at <|current_cursor_position|>

# Output Format
Return ONLY the rewritten code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> without any other words.
Never use markdown formatting like ```. Return raw text only.