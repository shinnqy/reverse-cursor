{"line":0,"column":0}

======== fileDiffHistories ========

File: src/components/test2.ts
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n7-|      \n8-|  } \n7+|    case TrafficLight.Yellow:\n8+|  } throw new Error('Invalid traffic light');\n9+|  }\n8-|  } throw new Error('Invalid traffic light');\n8+|  }    return TrafficLight.Red;\n9+|    default:\n10+|      throw new Error('Invalid traffic light');\n8-|  }    return TrafficLight.Red;\n8+|      return TrafficLight.Red;\n3-|    case TrafficLight.Red:\n3+|    case TrafficLight.RED:\n5-|    case TrafficLight.Green:\n6-|      return TrafficLight.Yellow;\n5+|    case TrafficLight.GreenREEN:\n6+|      return TrafficLight.YELLOW;\n4-|      return TrafficLight.Green;\n5-|    case TrafficLight.GreenREEN:\n4+|      return TrafficLight.GreenREEN;\n5+|    case TrafficLight.GREEN:\n4-|      return TrafficLight.GreenREEN;\n4+|      return TrafficLight.GREEN;\n7-|    case TrafficLight.Yellow:\n8-|      return TrafficLight.Red;\n7+|    case TrafficLight.YellowELLOW:\n8+|      return TrafficLight.RED;\n7-|    case TrafficLight.YellowELLOW:\n7+|    case TrafficLight.YELLOW:\n4-|      return TrafficLight.GREEN;\n4-|      \n4+|      console.log('Red');\n6-|      return TrafficLight.YELLOW;\n6+|      return');\n7+|      break;\n5+|      break;\n6-|      return');\n7+|      console.log('Green');\n10-|      return TrafficLight.RED;\n10+|      returnllow');\n11+|      break;\n10-|      returnllow');\n10+|      console.log('Yellow');\n

======== processedCurrentFileContents ========
[ToFill]function changeLight(light: TrafficLight) {
  switch (light) {
    case TrafficLight.RED:
      console.log('Red');
      break;
    case TrafficLight.GREEN:
      console.log('Green');
      break;
    case TrafficLight.YELLOW:
      console.log('Yellow');
      break;
    default:
      throw new Error('Invalid traffic light');
  }
}

======== firstChunkValue ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case TrafficLight.RED:
      console.log('Red');