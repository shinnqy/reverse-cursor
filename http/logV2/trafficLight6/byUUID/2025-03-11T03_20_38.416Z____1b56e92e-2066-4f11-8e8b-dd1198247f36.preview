{"line":3,"column":3}

======== fileDiffHistories ========

File: src/components/test2.ts
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n8-|  }\n8+|  } \n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n8-|  }\n8+|  } \n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n8-|  }\n8+|  } \n
1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n5-|}\n6-|\n10-|  } \n4+|  }\n2-|  if (light === TrafficLight.Red) {\n3-|    return TrafficLight.Green;\n4-|  }\n5-|  console.log('light', light);\n2-|  \n2+|  switch (light) {\n3+|    case TrafficLight.Red:\n4+|      return TrafficLight.Green;\n5+|    case TrafficLight.Green:\n6+|      return TrafficLight.Yellow;\n7+|      \n8+|  }\n8-|  }\n8+|  } \n

======== processedCurrentFileContents ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case TrafficLight.Red:
   [ToFill]   return TrafficLight.Green;
    case TrafficLight.Green:
      return TrafficLight.Yellow;
      
  } 
}

======== firstChunkValue ========
    case TrafficLight.Red:
      return TrafficLight.Green;
    case TrafficLight.Green:
      return TrafficLight.Yellow;
    case TrafficLight.Yellow:
======== replace firstChunkValue ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case TrafficLight.Red:
      return TrafficLight.Green;
    case TrafficLight.Green:
      return TrafficLight.Yellow;
    case TrafficLight.Yellow:
  } 
}

======== replacedContentsWithCursorPosition ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case TrafficLight.Red:<|current_cursor_position|>
      return TrafficLight.Green;
    case TrafficLight.Green:
      return TrafficLight.Yellow;
    case TrafficLight.Yellow:
  } 
}

======== fusedCursorPrediction ========
lineNumberOneIndexed: 8

text: 
}
}

shouldRetriggerCpp: true
======== displayedFusedCursorPrediction ========
lineNumberOneIndexed: 8

text: 
}
}

shouldRetriggerCpp: true