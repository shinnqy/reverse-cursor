{"diffHistory":[{"fileName":"src/components/test2.ts","diffHistory":["1+|enum TrafficLight {\n2+|  Red = 'red',\n3+|  Yellow = 'yellow',\n4+|  Green = 'green',\n5+|}\n6+|\n2-|  switch (light) {\n3-|    case TrafficLight.RED:\n4-|      console.log('Red');\n5-|      break;\n6-|    case TrafficLight.GREEN:\n7-|      console.log('Green');\n8-|      break;\n9-|    case TrafficLight.YELLOW:\n10-|      console.log('Yellow');\n11-|      break;\n12-|    default:\n13-|      throw new Error('Invalid traffic light');\n8+|  if (light === TrafficLight.Red) {\n9+|    return TrafficLight.Green;\n11+|  console.log('light', light);\n13+|\n14+|changeLight(TrafficLight.Red);\n","13-|\n14-|changeLight(TrafficLight.Red);\n","10-|  }\n10+|  } else if (light === TrafficLight.Green) {\n","11-|  console.log('light', light);\n11+|  console.log('light', light');\n12+|  }\n","11-|  console.log('light', light');\n11+|  console.loght.Red;\n12+|  } else {\n13+|    throw new Error('Invalid traffic light');\n","11-|  console.loght.Red;\n11+|  console.low) {\n12+|    return TrafficLight.Red;\n","11-|  console.low) {\n11+|  consow;\n12+|  } else if (light === TrafficLight.Yellow) {\n","11-|  consow;\n11+|    return TrafficLight.Yellow;\n","15-|    throw new Error('Invalid traffic light');\n16-|  }\n15+|    throw new Error('Invalid traffic light);\n","15-|    throw new Error('Invalid traffic light);\n15+|    throw new Error('light', light);\n","10-|  } else if (light === TrafficLight.Green) {\n11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight.Red;\n14-|  } else {\n15-|    throw new Error('light', light);\n10+|  }\n11+|  console.log('light', light);\n","10-|  }\n10+|  } else if (light === TrafficLight.Green) {\n","11-|  console.log('light', light);\n11+|  console.log('light', light');\n12+|  }\n","11-|  console.log('light', light');\n11+|  console.loght.Red;\n12+|  } else {\n13+|    throw new Error('Invalid traffic light');\n","11-|  console.loght.Red;\n11+|  console.low) {\n12+|    return TrafficLight.Red;\n","11-|  console.low) {\n11+|  consow;\n12+|  } else if (light === TrafficLight.Yellow) {\n","11-|  consow;\n11+|    return TrafficLight.Yellow;\n","15-|    throw new Error('Invalid traffic light');\n16-|  }\n15+|    throw new Error('Invalid traffic light);\n","15-|    throw new Error('Invalid traffic light);\n15+|    throw new Error('light', light);\n","10-|  } else if (light === TrafficLight.Green) {\n11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight.Red;\n14-|  } else {\n15-|    throw new Error('light', light);\n10+|  } \n11+|  console.log('light', light);\n","1-|enum TrafficLight {\n2-|  Red = 'red',\n3-|  Yellow = 'yellow',\n4-|  Green = 'green',\n1+|function changeLight(light: TrafficLight) {\n2+|  light = 'green';\n7-|function changeLight(light: TrafficLight) {\n8-|  if (light === TrafficLight.Red) {\n9-|    return TrafficLight.Green;\n10-|  } \n11-|  console.log('light', light);\n12-|}\n5+|const light = 'red';\n6+|changeLight(light);\n7+|\n8+|console.log('light', light);\n","2-|  light = 'green';\n3-|}\n5-|const light = 'red';\n6-|changeLight(light);\n7-|\n","2+|  light = 'green';\n3+|}\n5+|const light = 'red';\n6+|changeLight(light);\n7+|\n","1-|function changeLight(light: TrafficLight) {\n2-|  light = 'green';\n3-|}\n1+|function changeLight(light: T\n5-|const light = 'red';\n6-|changeLight(light);\n7-|\n","1-|function changeLight(light: T\n1+|function changeLight(light: TrafficLight) {\n","2+|  light = 'green';\n3+|}\n5+|const light = 'red';\n6+|changeLight(light);\n7+|\n","1-|function changeLight(light: TrafficLight) {\n2-|  light = 'green';\n3-|}\n1+|function changeLight(light: T\n5-|const light = 'red';\n6-|changeLight(light);\n7-|\n8-|\n","1-|function changeLight(light: T\n1+|function changeLight(light: Tr\n"],"diffHistoryTimestamps":[]}],"new_window_content":"function changeLight(light: Tr[ToFill]\n\nfunction modifyCode(code, lineNumber, columnNumber, insertString) {\n  if (!code) {\n    return '';\n  }\n\n  try {\n    // start from 0\n    lineNumber = lineNumber;\n    columnNumber = columnNumber;\n\n    const lines = code.split('\\n');\n\n    if (lineNumber < 0 || lineNumber > lines.length - 1) {\n      throw new Error('Invalid line number');\n    }\n\n    const targetLine = lines[lineNumber];\n\n    if (columnNumber < 0 || columnNumber > targetLine.length - 1) {\n\n      const needColumnCount = columnNumber - targetLine.length;\n      const newLine = targetLine + (new Array(needColumnCount)).fill('').join(' ') + insertString;\n      lines[lineNumber] = newLine;\n      return lines.join('\\n');\n    }\n\n    const newLine = targetLine.slice(0, columnNumber) + insertString + targetLine.slice(columnNumber);\n    lines[lineNumber] = newLine;\n\n    return lines.join('\\n');\n  } catch (e) {\n    console.error(e)\n  }\n}\n","ground_truth":"function changeLight(light: TrafficLight) {\n\nfunction modifyCode(code, lineNumber, columnNumber, insertString) {\n  if (!code) {\n    return '';\n  }\n\n  try {\n    // start from 0\n    lineNumber = lineNumber;\n    columnNumber = columnNumber;\n\n    const lines = code.split('\\n');\n\n    if (lineNumber < 0 || lineNumber > lines.length - 1) {\n      throw new Error('Invalid line number');\n    }\n\n    const targetLine = lines[lineNumber];\n\n    if (columnNumber < 0 || columnNumber > targetLine.length - 1) {\n\n      const needColumnCount = columnNumber - targetLine.length;\n      const newLine = targetLine + (new Array(needColumnCount)).fill('').join(' ') + insertString;\n      lines[lineNumber] = newLine;\n      return lines.join('\\n');\n    }\n\n    const newLine = targetLine.slice(0, columnNumber) + insertString + targetLine.slice(columnNumber);\n    lines[lineNumber] = newLine;\n\n    return lines.join('\\n');\n  } catch (e) {\n    console.error(e)\n  }\n}\n"}
