You're an expert in ArkTS. Your task is to help the user update the code around current cursor position.

## Recent Actions
Here is what the user has been doing from the earliest to the latest:

File: entry/src/main/ets/utils/functionReturn.ets
added the code `function add(a: number, b: number): number {` in line 1
added the code `    return a + b;` in line 2
added the code `}` in line 3
added the code `` in line 4
added the code `function subtract(a: number, b: number): number {` in line 5
added the code `    return a - b;` in line 6
added the code `}` in line 7
added the code `` in line 8
added the code `let sum = add(1, 2);` in line 9
added the code `` in line 10
added the code `function getUser(name: string, age: number): { name: string, age: number } {` in line 11
added the code `    return { name, age };` in line 12
added the code `}` in line 13
added the code `` in line 14
added the code `let user = getUser("John", 30);` in line 15
added the code `` in line 16
added the code `  ` in line 17

deleted the code `function getUser(name: string, age: number): { name: string, age: number } {` in line 11
added the code `interface User {` in line 11
added the code `    name: string;` in line 12
added the code `    age: number;` in line 13
added the code `}` in line 14
added the code `` in line 15
added the code `function getUser(name: string, age: number): User {` in line 16

added the code `function wrapValue<T>(value: T): {data {` in line 22
added the code `    return { data: value };` in line 23
added the code `}` in line 24
added the code `` in line 25
added the code `let wrappedValue = wrapValue(10);` in line 26
added the code `` in line 27
added the code `` in line 28

deleted the code `function wrapValue<T>(value: T): {data {` in line 22
added the code `function wrapValue<T>(value: T): {data: T}   {` in line 22

added the code `let wrappedString = wrapValue("Hello");` in line 28
added the code `let wrappedBoolean = wrapValue(true);` in line 30
added the code `` in line 31
added the code `let wrappedArray = wrapValue([1, 2, 3]);` in line 32
added the code `` in line 33
added the code `` in line 34

deleted the code `function wrapValue<T>(value: T): {data: T}   {` in line 22
added the code `interface Wrapper<T> {` in line 22
added the code `    data: T;` in line 23
added the code `}` in line 24
added the code `` in line 25
added the code `function wrapValue<T>(value: T): Wrapper<T> {` in line 26

deleted the code `` in line 38
added the code `async function fetchData(): Promise<{ item}>` in line 38


## Current Code
Here is the current code file path:
entry/src/main/ets/utils/functionReturn.ets

Here is the current code around the cursor position:

```
function add(a: number, b: number): number {
    return a + b;
}

function subtract(a: number, b: number): number {
    return a - b;
}

let sum = add(1, 2);

interface User {
    name: string;
    age: number;
}

function getUser(name: string, age: number): User {
    return { name, age };
}

let user = getUser("John", 30);

interface Wrapper<T> {
    data: T;
}

function wrapValue<T>(value: T): Wrapper<T> {
    return { data: value };
<|editable_region_start|>
}

let wrappedValue = wrapValue(10);

let wrappedString = wrapValue("Hello");

let wrappedBoolean = wrapValue(true);

let wrappedArray = wrapValue([1, 2, 3]);

async function fetchData(): Promise<{ item<|current_cursor_position|>}>

<|editable_region_end|>
```

## Task
Rewrite the code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> according to the following requirements:
1. Enforce code format strictly matching existing code style.
2. Propagate naming convention changes to all related cases
3. Preserve original functionality
4. Apply changes to entire code regardless of cursor position
5. Focus on code after cursor position at <|current_cursor_position|>

# Output Format
Return ONLY the rewritten code from the first column of the line of <|editable_region_start|> to the line of <|editable_region_end|> without any other words.
Never use markdown formatting like ```. Return raw text only.