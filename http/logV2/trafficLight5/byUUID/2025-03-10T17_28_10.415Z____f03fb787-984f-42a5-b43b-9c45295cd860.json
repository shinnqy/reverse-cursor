[
  {
    "intent": "cursor_prediction",
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.415Z"
  },
  {
    "partialData": {
      "fileDiffHistories": [
        {
          "fileName": "src/components/test2.ts",
          "diffHistory": [
            "1-|function Test2() {\n2-|  return <div>Test2</div>;\n1+|function changeLight(light: TrafficLight) {\n2+|  if (light === TrafficLight.Red) {\n3+|    return TrafficLight.Green;\n4+|  }\n5-|export default Test2;\n",
            "1+|enum TrafficLight {\n2+|  Red = 'red',\n3+|  Yellow = 'yellow',\n4+|  Green = 'green',\n5+|}\n6+|\n",
            "11+|  if (light === TrafficLight.Green) {\n12+|    return TrafficLight.Yellow;\n13+|  }\n14+|  if (light === TrafficLight.Yellow) {\n15+|    return TrafficLight.Red;\n16+|  }\n",
            "11-|  if (light === TrafficLight.Green) {\n12-|    return TrafficLight.Yellow;\n13-|  }\n14-|  if (light === TrafficLight.Yellow) {\n15-|    return TrafficLight.Red;\n16-|  }\n",
            "10-|  }\n11-|  \n12-|  \n10+|  } \n11+|\n12+|  console.log('light', light);\n",
            "10-|  } \n10+|  } else if (light === TrafficLight.Green) {\n",
            "11-|  console.log('light', light);\n11+|  console.log('light', light).Red;\n12+|  }\n15+|changeLight(TrafficLight.Red);\n",
            "11-|  console.log('light', light).Red;\n11+|  console.log('light', llow) {\n12+|    return TrafficLight.Red;\n",
            "11-|  console.log('light', llow) {\n11+|  conw;\n12+|  } else if (light === TrafficLight.Yellow) {\n",
            "11-|  conw;\n11+|    return TrafficLight.Yellow;\n",
            "13-|    return TrafficLight.Red;\n14-|  }\n13+|    return TrafficLight;\n17-|changeLight(TrafficLight.Red);\n",
            "11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight;\n11+|  console.log('light', light);\n",
            "11-|  console.log('light', light);\n11+|  console.log('light', light).Red;\n12+|  }\n15+|changeLight(TrafficLight.Red);\n",
            "11-|  console.log('light', light).Red;\n11+|  console.log('light', llow) {\n12+|    return TrafficLight.Red;\n",
            "11-|  console.log('light', llow) {\n11+|  conw;\n12+|  } else if (light === TrafficLight.Yellow) {\n",
            "11-|  conw;\n11+|    return TrafficLight.Yellow;\n",
            "13-|    return TrafficLight.Red;\n14-|  }\n13+|    return TrafficLight;\n17-|changeLight(TrafficLight.Red);\n",
            "10-|  } else if (light === TrafficLight.Green) {\n11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight;\n10+|  }\n11+|  console.log('light', light);\n",
            "10-|  }\n10+|  } else if (light === TrafficLight.Green) {\n",
            "11-|  console.log('light', light);\n11+|  console.log('light', light).Red;\n12+|  }\n15+|changeLight(TrafficLight.Red);\n",
            "11-|  console.log('light', light).Red;\n11+|  console.log('light', llow) {\n12+|    return TrafficLight.Red;\n",
            "11-|  console.log('light', llow) {\n11+|  conw;\n12+|  } else if (light === TrafficLight.Yellow) {\n",
            "11-|  conw;\n11+|    return TrafficLight.Yellow;\n",
            "13-|    return TrafficLight.Red;\n14-|  }\n13+|    return TrafficLight;\n17-|changeLight(TrafficLight.Red);\n",
            "10-|  } else if (light === TrafficLight.Green) {\n11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight;\n10+|  }\n11+|  console.log('light', light);\n",
            "10-|  }\n10+|  } else if (light === TrafficLight.Green) {\n",
            "11-|  console.log('light', light);\n11+|  console.log('light', light).Red;\n12+|  }\n15+|changeLight(TrafficLight.Red);\n",
            "11-|  console.log('light', light).Red;\n11+|  console.log('light', llow) {\n12+|    return TrafficLight.Red;\n",
            "11-|  console.log('light', llow) {\n11+|  conw;\n12+|  } else if (light === TrafficLight.Yellow) {\n",
            "11-|  conw;\n11+|    return TrafficLight.Yellow;\n",
            "13-|    return TrafficLight.Red;\n14-|  }\n13+|    return TrafficLight;\n17-|changeLight(TrafficLight.Red);\n",
            "10-|  } else if (light === TrafficLight.Green) {\n11-|    return TrafficLight.Yellow;\n12-|  } else if (light === TrafficLight.Yellow) {\n13-|    return TrafficLight;\n10+|  }\n11+|  console.log('light', light);\n",
            "10-|  }\n10+|  } else if (light === TrafficLight.Green) {\n",
            "11-|  console.log('light', light);\n11+|  console.log('light', light).Red;\n12+|  }\n15+|changeLight(TrafficLight.Red);\n",
            "11-|  console.log('light', light).Red;\n11+|  console.log('light', llow) {\n12+|    return TrafficLight.Red;\n",
            "11-|  console.log('light', llow) {\n11+|  conw;\n12+|  } else if (light === TrafficLight.Yellow) {\n",
            "11-|  conw;\n11+|    return TrafficLight.Yellow;\n"
          ],
          "diffHistoryTimestamps": []
        }
      ],
      "diffHistory": [],
      "blockDiffPatches": [],
      "mergedDiffHistories": [],
      "linterErrors": {
        "relativeWorkspacePath": "src/components/test2.ts",
        "errors": [
          {
            "message": "Parsing error: '}' expected.",
            "range": {
              "startPosition": {
                "line": 14,
                "column": 1
              },
              "endPosition": {
                "line": 14,
                "column": 1
              }
            },
            "source": "eslint",
            "relatedInformation": [],
            "severity": "DIAGNOSTIC_SEVERITY_ERROR"
          },
          {
            "message": "'}' expected.",
            "range": {
              "startPosition": {
                "line": 13,
                "column": 2
              },
              "endPosition": {
                "line": 13,
                "column": 2
              }
            },
            "source": "ts",
            "relatedInformation": [
              {
                "message": "The parser expected to find a '}' to match the '{' token here.",
                "range": {
                  "startPosition": {
                    "line": 7,
                    "column": 43
                  },
                  "endPosition": {
                    "line": 7,
                    "column": 44
                  }
                }
              }
            ],
            "severity": "DIAGNOSTIC_SEVERITY_ERROR"
          },
          {
            "message": "'changeLight' is defined but never used.",
            "range": {
              "startPosition": {
                "line": 7,
                "column": 10
              },
              "endPosition": {
                "line": 7,
                "column": 21
              }
            },
            "source": "",
            "relatedInformation": [],
            "severity": "DIAGNOSTIC_SEVERITY_ERROR"
          }
        ],
        "fileContents": ""
      },
      "currentFile": {
        "relativeWorkspacePath": "src/components/test2.ts",
        "contents": "enum TrafficLight {\n  Red = 'red',\n  Yellow = 'yellow',\n  Green = 'green',\n}\n\nfunction changeLight(light: TrafficLight) {\n  if (light === TrafficLight.Red) {\n    return TrafficLight.Green;\n  } else if (light === TrafficLight.Green) {\n    return TrafficLight.Yellow;\n  } else if (light === TrafficLight.Yellow) {\n    return TrafficLight.Red;\n  }\n}\n\nchangeLight(TrafficLight.Red);\n",
        "cursorPosition": {
          "line": 0,
          "column": 0
        },
        "dataframes": [],
        "languageId": "",
        "diagnostics": [],
        "totalNumberOfLines": 0,
        "contentsStartAtLine": 0,
        "topChunks": [],
        "fileVersion": 96,
        "cellStartLines": [],
        "cells": [],
        "relyOnFilesync": false,
        "workspaceRootPath": "/Users/shinn/Documents/personal/vite-react-demo2"
      },
      "additionalFiles": [],
      "cppIntentInfo": {
        "source": "cursor_prediction"
      },
      "clientTime": 1741627690422,
      "clientTimezoneOffset": -480,
      "modelName": "fast",
      "diffHistoryKeys": [],
      "contextItems": [],
      "parameterHints": [],
      "lspSuggestedItems": {
        "suggestions": []
      },
      "lspContexts": [],
      "filesyncUpdates": [],
      "workspaceId": "8u65ni1hw3pqzyyqn4vyf",
      "timeSinceRequestStart": 9.300048828125,
      "timeAtRequestSend": 1741627690423
    },
    "generateUuid": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.424Z"
  },
  {
    "isFusedCursorPredictionModel": true,
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.813Z"
  },
  {
    "firstChunkValue": "enum TrafficLight {\n  Red = 'red',\n  Yellow = 'yellow',\n  Green = 'green',\n}",
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.814Z"
  },
  {
    "isValidCase4firstChunkValue": {
      "valid": false
    },
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.815Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "rangeToReplace": {
        "startLineNumber": 1,
        "endLineNumberInclusive": 5
      },
      "doneEdit": true,
      "modelInfo": {
        "isFusedCursorPredictionModel": true
      }
    },
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.816Z"
  },
  {
    "cursorRetrieval": {
      "text": "enum TrafficLight {\n  Red = 'red',\n  Yellow = 'yellow',\n  Green = 'green',\n}"
    },
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.817Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "doneStream": true
    },
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.877Z"
  },
  {
    "fusedCursorPrediction": null,
    "predictionId": "03c26da1-4398-42f7-91ce-41b08f65bc9a",
    "generationUUID": "f03fb787-984f-42a5-b43b-9c45295cd860",
    "timestamp": "2025-03-10T17:28:10.890Z"
  }
]