{"line":19,"column":2}

======== currentFileContentsWithToFill ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case light.RED:
      return light.GREEN;
    case light.GREEN:
      return light.YELLOW;
    case light.YELLOW:
      return light.RED;
    default:
      return light.RED;
  }
}

enum TrafficLight {
  RED = 'red',
  GREEN = 'green',
  YELLOW = 'yellow',
}

  [ToFill]
======== firstChunkValue ========

const light = TrafficLight.RED;
======== replace replacedContentsWithFirstChunk ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case light.RED:
      return light.GREEN;
    case light.GREEN:
      return light.YELLOW;
    case light.YELLOW:
      return light.RED;
    default:
      return light.RED;
  }
}

enum TrafficLight {
  RED = 'red',
  GREEN = 'green',
  YELLOW = 'yellow',
}

const light = TrafficLight.RED;
======== fullText ========

const light = TrafficLight.RED;
const newLight = changeLight(light);
console.log(newLight);

======== replace replacedContentsWithFullText ========
function changeLight(light: TrafficLight) {
  switch (light) {
    case light.RED:
      return light.GREEN;
    case light.GREEN:
      return light.YELLOW;
    case light.YELLOW:
      return light.RED;
    default:
      return light.RED;
  }
}

enum TrafficLight {
  RED = 'red',
  GREEN = 'green',
  YELLOW = 'yellow',
}

const light = TrafficLight.RED;
const newLight = changeLight(light);
console.log(newLight);

======== fusedCursorPrediction ========
lineNumberOneIndexed: 1

text: 
function changeLight(light: TrafficLight) {
switch (light) {
case light.RED:
return light.GREEN;
case light.GREEN:

shouldRetriggerCpp: false
======== displayedFusedCursorPrediction ========
lineNumberOneIndexed: 1

text: 
function changeLight(light: TrafficLight) {
switch (light) {
case light.RED:
return light.GREEN;
case light.GREEN:

shouldRetriggerCpp: false