{"line":113,"column":10}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
import router from "@ohos.router";
import storage from "@ohos.storage";
import http from "@ohos.net.http";
import deviceInfo from "@ohos.device.info";
import logger from "@ohos.logger";
import prompt from "@ohos.prompt";

@Entry
@Component
struct Main {
  @State message: string = "Hello World";

  build() {
    Row() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .onClick(() => {
          router.pushUrl({
            url: "pages/SecondPage",
            params: {
              message: "Hello from Second Page",
            },
          });
        })
        .width(200)
        .height(100)
        .backgroundColor(Color.Red)
    }
  }
}

@Component
struct SecondPage {
  @State message: string = "";

  build() {
    Column() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .textAlign(TextAlign.Center)
        .fontColor(Color.White)
        .onClick(() => {
          router.back();
        })
    }
  }
}

const STORAGE_KEY = "myStorage";
let myStorage = storage.getStorageSync(STORAGE_KEY);

if (!myStorage) {
  myStorage = storage.getStorageSync(STORAGE_KEY);
}

myStorage.putSync("name", "John");
myStorage.putSync("age", 30);
myStorage.putSync("city", "New York");

const name = myStorage.getSync("name");
const age = myStorage.getSync("age");
const city = myStorage.getSync("city");

interface Settings {
  theme: string;
  notifications: boolean;
  language: string;
}

let settings: Settings = {
  theme: "light",
  notifications: true,
  language: "en",
};

myStorage.putSync("settings", settings);

myStorage.removeSync("name");
myStorage.on('change', (data) => {
  console.log("Storage changed:", data);
});

myStorage.clearSync();

const url = "https://api.example.com/data";
const headers = {
  "Content-Type": "application/json",
};

let httpRequest = http.createHttp();

httpRequest.request(url, {
  method: http.RequestMethod.GET,
}, (err, data) => {
  if (err) {
    console.error("Request failed:", err);
  } else {
    console.log("Request successful:", data);
  }
});

let deviceModel = deviceInfo.deviceModel;
let osVersion = deviceInfo.osFullName;

logger.info(`Device Model: ${deviceModel}`);

prompt.showToast({
  message: "Hello, World!",
  duration: 3000,
});

let timerI[ToFill]


-------------------------------[               firstChunkValue               ]--------------------------------

let timerId = setInterval(() => {


-------------------------------[       replacedContentsWithFirstChunk        ]--------------------------------
import router from "@ohos.router";
import storage from "@ohos.storage";
import http from "@ohos.net.http";
import deviceInfo from "@ohos.device.info";
import logger from "@ohos.logger";
import prompt from "@ohos.prompt";

@Entry
@Component
struct Main {
  @State message: string = "Hello World";

  build() {
    Row() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .onClick(() => {
          router.pushUrl({
            url: "pages/SecondPage",
            params: {
              message: "Hello from Second Page",
            },
          });
        })
        .width(200)
        .height(100)
        .backgroundColor(Color.Red)
    }
  }
}

@Component
struct SecondPage {
  @State message: string = "";

  build() {
    Column() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .textAlign(TextAlign.Center)
        .fontColor(Color.White)
        .onClick(() => {
          router.back();
        })
    }
  }
}

const STORAGE_KEY = "myStorage";
let myStorage = storage.getStorageSync(STORAGE_KEY);

if (!myStorage) {
  myStorage = storage.getStorageSync(STORAGE_KEY);
}

myStorage.putSync("name", "John");
myStorage.putSync("age", 30);
myStorage.putSync("city", "New York");

const name = myStorage.getSync("name");
const age = myStorage.getSync("age");
const city = myStorage.getSync("city");

interface Settings {
  theme: string;
  notifications: boolean;
  language: string;
}

let settings: Settings = {
  theme: "light",
  notifications: true,
  language: "en",
};

myStorage.putSync("settings", settings);

myStorage.removeSync("name");
myStorage.on('change', (data) => {
  console.log("Storage changed:", data);
});

myStorage.clearSync();

const url = "https://api.example.com/data";
const headers = {
  "Content-Type": "application/json",
};

let httpRequest = http.createHttp();

httpRequest.request(url, {
  method: http.RequestMethod.GET,
}, (err, data) => {
  if (err) {
    console.error("Request failed:", err);
  } else {
    console.log("Request successful:", data);
  }
});

let deviceModel = deviceInfo.deviceModel;
let osVersion = deviceInfo.osFullName;

logger.info(`Device Model: ${deviceModel}`);

prompt.showToast({
  message: "Hello, World!",
  duration: 3000,
});

let timerId = setInterval(() => {


-------------------------------[                   fullText                  ]--------------------------------

let timerId = setInterval(() => {
  console.log("Timer event");
}, 1000);

clearInterval(timerId);




-------------------------------[         replacedContentsWithFullText         ]--------------------------------
import router from "@ohos.router";
import storage from "@ohos.storage";
import http from "@ohos.net.http";
import deviceInfo from "@ohos.device.info";
import logger from "@ohos.logger";
import prompt from "@ohos.prompt";

@Entry
@Component
struct Main {
  @State message: string = "Hello World";

  build() {
    Row() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .onClick(() => {
          router.pushUrl({
            url: "pages/SecondPage",
            params: {
              message: "Hello from Second Page",
            },
          });
        })
        .width(200)
        .height(100)
        .backgroundColor(Color.Red)
    }
  }
}

@Component
struct SecondPage {
  @State message: string = "";

  build() {
    Column() {
      Text(this.message)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .textAlign(TextAlign.Center)
        .fontColor(Color.White)
        .onClick(() => {
          router.back();
        })
    }
  }
}

const STORAGE_KEY = "myStorage";
let myStorage = storage.getStorageSync(STORAGE_KEY);

if (!myStorage) {
  myStorage = storage.getStorageSync(STORAGE_KEY);
}

myStorage.putSync("name", "John");
myStorage.putSync("age", 30);
myStorage.putSync("city", "New York");

const name = myStorage.getSync("name");
const age = myStorage.getSync("age");
const city = myStorage.getSync("city");

interface Settings {
  theme: string;
  notifications: boolean;
  language: string;
}

let settings: Settings = {
  theme: "light",
  notifications: true,
  language: "en",
};

myStorage.putSync("settings", settings);

myStorage.removeSync("name");
myStorage.on('change', (data) => {
  console.log("Storage changed:", data);
});

myStorage.clearSync();

const url = "https://api.example.com/data";
const headers = {
  "Content-Type": "application/json",
};

let httpRequest = http.createHttp();

httpRequest.request(url, {
  method: http.RequestMethod.GET,
}, (err, data) => {
  if (err) {
    console.error("Request failed:", err);
  } else {
    console.log("Request successful:", data);
  }
});

let deviceModel = deviceInfo.deviceModel;
let osVersion = deviceInfo.osFullName;

logger.info(`Device Model: ${deviceModel}`);

prompt.showToast({
  message: "Hello, World!",
  duration: 3000,
});

let timerId = setInterval(() => {
  console.log("Timer event");
}, 1000);

clearInterval(timerId);



