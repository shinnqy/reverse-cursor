[
  {
    "intent": "typing",
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:27.888Z"
  },
  {
    "partialData": {
      "fileDiffHistories": [
        {
          "fileName": "entry/src/main/ets/utils/typingInfer3.ets",
          "diffHistory": [
            "15+|type UserRole = User\n16+|\n"
          ],
          "diffHistoryTimestamps": []
        }
      ],
      "diffHistory": [],
      "blockDiffPatches": [],
      "mergedDiffHistories": [],
      "currentFile": {
        "relativeWorkspacePath": "entry/src/main/ets/utils/typingInfer3.ets",
        "contents": "interface User {\n    id: number;\n    name: string;\n    age: number;\n}\ninterface Admin { level: number; permission: string[] }\n\ninterface Post {title: string; content: string}\n\ninterface Comment {\n    id: number;\n    author: string;\n}\n\ntype UserRole = User\n\nclass Response {\n  data: any;\n  status: number;\n\n  constructor(data: any, status: number) {\n    this.data = data;\n    this.status = status;\n  }\n}\n\nclass DataProcessor {\n  private items: string[] = [];\n\n  addItem(item: string | null) {\n    this.items.push(item);\n  }\n\n  getFirstItem(): string | undefined {\n    return this.items[0];\n  }\n\n  getItems(): string[] {\n    return this.items;\n  }\n}\n\nfunction merge(a: string, b: string): string {\n  return a + b;\n}\n\nfunction wrap(input: string): string[] {\n  return [input]\n}\n\nclass Cache {\n  private store = new Map<string, string>();\n\n  get(key: string): string | undefined {\n    return this.store.get(key);\n  }\n\n  set(key: string, value: string) {\n    this.store.set(key, value);\n  }\n}\n\nfunction demo() {\n  const userRes = new Response(new Error('Error'), 200);\n\n  const processor = new DataProcessor();\n  processor.addItem('Hello');\n\n  const merged = merge<string>('Hello', 'World');\n  const numbers = merge<number>(1, 2);\n\n  const cache = new Cache();\n  cache.set('user1', '123');\n  cache.set('post1', '456');\n\n  const wrapped = wrap('pending');\n}\n\n\n",
        "cursorPosition": {
          "line": 14,
          "column": 20
        },
        "dataframes": [],
        "languageId": "",
        "diagnostics": [],
        "totalNumberOfLines": 0,
        "contentsStartAtLine": 0,
        "topChunks": [],
        "fileVersion": 23,
        "cellStartLines": [],
        "cells": [],
        "relyOnFilesync": false,
        "workspaceRootPath": "/Users/shinn/DevEcoStudioProjects/MyApplication2"
      },
      "additionalFiles": [],
      "cppIntentInfo": {
        "source": "typing"
      },
      "clientTime": 1742976447931,
      "clientTimezoneOffset": -480,
      "modelName": "fast",
      "diffHistoryKeys": [],
      "contextItems": [],
      "parameterHints": [],
      "lspSuggestedItems": {
        "suggestions": []
      },
      "lspContexts": [],
      "filesyncUpdates": [],
      "workspaceId": "w7qbwqdnwclt3gk87qzzc",
      "timeSinceRequestStart": 54.89990234375,
      "timeAtRequestSend": 1742976447931
    },
    "generateUuid": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:27.932Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "modelInfo": {
        "isFusedCursorPredictionModel": true
      }
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.286Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "rangeToReplace": {
        "startLineNumber": 13,
        "endLineNumberInclusive": 18
      }
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.306Z"
  },
  {
    "isFusedCursorPredictionModel": true,
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.307Z"
  },
  {
    "cursorRetrieval": {
      "text": "}\n\ntype UserRole = User['"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.307Z"
  },
  {
    "cursorRetrieval": {
      "text": "name"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.419Z"
  },
  {
    "cursorRetrieval": {
      "text": "'];"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.420Z"
  },
  {
    "firstChunkValue": "}\n\ntype UserRole = User['name'];\n\nclass Response {\n  data: any;",
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.421Z"
  },
  {
    "isValidCase4firstChunkValue": {
      "valid": true,
      "modelOutputText": "}\n\ntype UserRole = User['name'];\n\nclass Response {\n  data: any;"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.421Z"
  },
  {
    "cursorRetrieval": {
      "text": "\n"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.424Z"
  },
  {
    "cursorRetrieval": {
      "text": "\n"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.425Z"
  },
  {
    "cursorRetrieval": {
      "text": "class"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.426Z"
  },
  {
    "cursorRetrieval": {
      "text": " Response"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.426Z"
  },
  {
    "cursorRetrieval": {
      "text": " {\n  data: any;"
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.435Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "doneEdit": true
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.473Z"
  },
  {
    "fullText": "}\n\ntype UserRole = User['name'];\n\nclass Response {\n  data: any;",
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.476Z"
  },
  {
    "cursorRetrieval": {
      "text": "",
      "doneStream": true
    },
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.516Z"
  },
  {
    "fusedCursorPrediction": null,
    "predictionId": "9f352e7d-1ca7-4416-bb47-783548631e06",
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.522Z"
  },
  {
    "invokeReason": "fusedCursorPrediction resolved & isValidCase is true",
    "invokePlace": "before this.uponFusedCursorPredictionReady",
    "isValidCase4firstChunkValue": {
      "valid": true,
      "modelOutputText": "}\n\ntype UserRole = User['name'];\n\nclass Response {\n  data: any;"
    },
    "fusedCursorPrediction": null,
    "predictionId": "9f352e7d-1ca7-4416-bb47-783548631e06",
    "generationUUID": "a41f6f48-15e8-491d-b03a-9d797c23b515",
    "timestamp": "2025-03-26T08:07:28.522Z"
  },
  {
    "setIntoDB": "predictionId",
    "invokeReason": "fusedCursorPrediction resolved & isValidCase is true",
    "invokePlace": "right after fusedCursorPrediction resolved",
    "predictionId": "9f352e7d-1ca7-4416-bb47-783548631e06",
    "fusedCursorPrediction": null,
    "timestamp": "2025-03-26T08:07:28.523Z"
  }
]