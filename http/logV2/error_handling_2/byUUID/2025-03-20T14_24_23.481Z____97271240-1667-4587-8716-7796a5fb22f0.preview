{"line":30,"column":0}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
try {
  JSON.parse("{ invalid JSON }");
} catch (error) {
  console.log(error.message);
}

class NetworkError extends Error {
  statusCode: number;
  constructor(message: string, code: number) {
    super(message);
    this.statusCode = code;
  }
}

try {
  throw new NetworkError("Timeout", 504);
} catch (error) {
  if (error instanceof NetworkError) {
    console.log(error.statusCode);
  }
}

fetch("https://api.example.com")
  .then(res => res.json())
  .catch(error => {
    console.error(error.message);
  });

interface User { profile?: { email?: string } }
let user: User = {};
[ToFill]
type Result = string | Error;
function getResult(): Result {
  return Math.random() > 0.5 ? "OK" : new Error("Failed");
}

let result = getResult();
if (result instanceof Error) {
} else {
}

async function loadData() {
  try {
    await fetch("invalid-url");
  } catch (e) {
    console.log(e);
  }
}

try {
  let data = {} as { items: string[] };
  data.items.push("test");
} catch (error) {
}
-------------------------------[               firstChunkValue               ]--------------------------------

interface User { profile?: { email?: string } }
let user: User = {};

type Result = string | Error;
function getResult(): Result {
  return Math.random() > 0.5 ? "OK" : new Error("Failed");
}
-------------------------------[             fusedCursorPrediction            ]--------------------------------
{
  "relativePath": "entry/src/main/ets/utils/errorHandling2.ets",
  "lineNumberOneIndexed": 46,
  "text": "console.log(e);\n}\n}\n\ntry {",
  "shouldRetriggerCpp": true
}
--------------------------------[        displayedFusedCursorPrediction       ]---------------------------------
{
  "relativePath": "entry/src/main/ets/utils/errorHandling2.ets",
  "lineNumberOneIndexed": 46,
  "text": "console.log(e);\n}\n}\n\ntry {",
  "shouldRetriggerCpp": true
}