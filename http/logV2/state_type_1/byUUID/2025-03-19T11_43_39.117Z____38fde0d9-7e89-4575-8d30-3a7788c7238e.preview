{"line":14,"column":1}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

i[ToFill]
@Component
struct ObjectTypeExample {
  @State user: { name: string; age: number } = { name: 'John', age: 30 };

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  build() {
    Column() {
      Text('Hello, world!')
    }
  }
}
-------------------------------[               firstChunkValue               ]--------------------------------

interface User {
@Component
struct ObjectTypeExample {
  @State user: { name: string; age: number } = { name: 'John', age: 30 };
-------------------------------[       replacedContentsWithFirstChunk        ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

interface User {
@Component
struct ObjectTypeExample {
  @State user: { name: string; age: number } = { name: 'John', age: 30 };

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  build() {
    Column() {
      Text('Hello, world!')
    }
  }
}
-------------------------------[                   fullText                  ]--------------------------------

interface User {
  name: string;
  age: number;
}

@Component
struct ObjectTypeExample {
  @State user: User = { name: 'John', age: 30 };
-------------------------------[         replacedContentsWithFullText         ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

interface User {
  name: string;
  age: number;
}

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  build() {
    Column() {
      Text('Hello, world!')
    }
  }
}
@Component
struct ObjectTypeExample {
  @State user: User = { name: 'John', age: 30 };