{"line":36,"column":5}

-------------------------------[        currentFileContentsWithToFill        ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

interface User {
  name: string;
  age: number;
}

@Component
struct ObjectTypeExample {
  @State user: User = { name: 'John', age: 30 };

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  @State numbers: number[] = [1, 2, 3, 4, 5];

  build() {
    L[ToFill]
  }
}
-------------------------------[               firstChunkValue               ]--------------------------------
  @State numbers: number[] = [1, 2, 3, 4, 5];

  build() {
    List() {
  }
-------------------------------[       replacedContentsWithFirstChunk        ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

interface User {
  name: string;
  age: number;
}

@Component
struct ObjectTypeExample {
  @State user: User = { name: 'John', age: 30 };

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  @State numbers: number[] = [1, 2, 3, 4, 5];

  build() {
    List() {
  }
}
-------------------------------[                   fullText                  ]--------------------------------
  @State numbers: number[] = [1, 2, 3, 4, 5];

  build() {
    List() {
      ForEach(this.numbers, (number) => {
        Text(number.toString())
      })
    }
  }
-------------------------------[         replacedContentsWithFullText         ]--------------------------------
@Entry
@Component
struct BasicTypeExample {
  @State score: number = 0;
  @State name: string = 'John';

  build() {
    Column() {
      Text(this.score.toString())
      Text(this.name.toUpperCase())
    }
  }
}

interface User {
  name: string;
  age: number;
}

@Component
struct ObjectTypeExample {
  @State user: User = { name: 'John', age: 30 };

  build() {
    Column() {
      Text(this.user.name.toUpperCase())
      Text(this.user.age.toString())
    }
  }
}

@Component
struct ArrayTypeExample {
  @State numbers: number[] = [1, 2, 3, 4, 5];

  build() {
    List() {
      ForEach(this.numbers, (number) => {
        Text(number.toString())
      })
    }
  }