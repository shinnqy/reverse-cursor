// @ts-check

// 148068
export function createAIServiceV1(params) {
  const {v, _} = params;

  var lk;
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ERROR = 1)] = "ERROR"),
      (i[(i.WARNING = 2)] = "WARNING"),
      (i[(i.INFO = 3)] = "INFO"),
      (i[(i.HINT = 4)] = "HINT"),
      (i[(i.AI = 5)] = "AI")
  })(lk || (lk = {})),
    v.util.setEnumType(lk, "aiserver.v1.LintSeverity", [
      { no: 0, name: "LINT_SEVERITY_UNSPECIFIED" },
      { no: 1, name: "LINT_SEVERITY_ERROR" },
      { no: 2, name: "LINT_SEVERITY_WARNING" },
      { no: 3, name: "LINT_SEVERITY_INFO" },
      { no: 4, name: "LINT_SEVERITY_HINT" },
      { no: 5, name: "LINT_SEVERITY_AI" },
    ])
  var Zre
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.EDIT = 1)] = "EDIT"),
      (i[(i.GENERATE = 2)] = "GENERATE"),
      (i[(i.INLINE_LONG_COMPLETION = 3)] = "INLINE_LONG_COMPLETION")
  })(Zre || (Zre = {})),
    v.util.setEnumType(Zre, "aiserver.v1.FeatureType", [
      { no: 0, name: "FEATURE_TYPE_UNSPECIFIED" },
      { no: 1, name: "FEATURE_TYPE_EDIT" },
      { no: 2, name: "FEATURE_TYPE_GENERATE" },
      { no: 3, name: "FEATURE_TYPE_INLINE_LONG_COMPLETION" },
    ])
  var x$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.VOYAGE_CODE_2 = 1)] = "VOYAGE_CODE_2"),
      (i[(i.TEXT_EMBEDDINGS_LARGE_3 = 2)] = "TEXT_EMBEDDINGS_LARGE_3"),
      (i[(i.QWEN_1_5B_CUSTOM = 3)] = "QWEN_1_5B_CUSTOM")
  })(x$ || (x$ = {})),
    v.util.setEnumType(x$, "aiserver.v1.EmbeddingModel", [
      { no: 0, name: "EMBEDDING_MODEL_UNSPECIFIED" },
      { no: 1, name: "EMBEDDING_MODEL_VOYAGE_CODE_2" },
      { no: 2, name: "EMBEDDING_MODEL_TEXT_EMBEDDINGS_LARGE_3" },
      { no: 3, name: "EMBEDDING_MODEL_QWEN_1_5B_CUSTOM" },
    ])
  var Qm = class owe extends _ {
      constructor(e) {
        super(), (this.line = 0), (this.column = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorPosition"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 5 },
          { no: 2, name: "column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new owe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new owe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new owe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(owe, e, t)
      }
    },
    Dgn = class awe extends _ {
      constructor(e) {
        super(),
          (this.selectionStartLineNumber = 0),
          (this.selectionStartColumn = 0),
          (this.positionLineNumber = 0),
          (this.positionColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SelectionWithOrientation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "selection_start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "selection_start_column", kind: "scalar", T: 5 },
          { no: 3, name: "position_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "position_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new awe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new awe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new awe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(awe, e, t)
      }
    },
    ck = class lwe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimplestRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new lwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lwe, e, t)
      }
    },
    WRi = class cwe extends _ {
      constructor(e) {
        super(),
          (this.original = []),
          (this.modified = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComputeLinesDiffOriginalAndModified"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "original", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "modified", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new cwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cwe, e, t)
      }
    },
    FT = class hwe extends _ {
      constructor(e) {
        super(),
          (this.diffs = []),
          (this.diffType = cI.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GitDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diffs", kind: "message", T: J9, repeated: !0 },
          { no: 2, name: "diff_type", kind: "enum", T: v.getEnumType(cI) },
        ])
      }
      static fromBinary(e, t) {
        return new hwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hwe, e, t)
      }
    },
    cI
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.DIFF_TO_HEAD = 1)] = "DIFF_TO_HEAD"),
      (i[(i.DIFF_FROM_BRANCH_TO_MAIN = 2)] = "DIFF_FROM_BRANCH_TO_MAIN")
  })(cI || (cI = {})),
    v.util.setEnumType(cI, "aiserver.v1.GitDiff.DiffType", [
      { no: 0, name: "DIFF_TYPE_UNSPECIFIED" },
      { no: 1, name: "DIFF_TYPE_DIFF_TO_HEAD" },
      { no: 2, name: "DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN" },
    ])
  var J9 = class uwe extends _ {
      constructor(e) {
        super(),
          (this.from = ""),
          (this.to = ""),
          (this.chunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "from", kind: "scalar", T: 9 },
          { no: 2, name: "to", kind: "scalar", T: 9 },
          { no: 3, name: "chunks", kind: "message", T: eoe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new uwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uwe, e, t)
      }
    },
    eoe = class dwe extends _ {
      constructor(e) {
        super(),
          (this.content = ""),
          (this.lines = []),
          (this.oldStart = 0),
          (this.oldLines = 0),
          (this.newStart = 0),
          (this.newLines = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileDiff.Chunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "content", kind: "scalar", T: 9 },
          { no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "old_start", kind: "scalar", T: 5 },
          { no: 4, name: "old_lines", kind: "scalar", T: 5 },
          { no: 5, name: "new_start", kind: "scalar", T: 5 },
          { no: 6, name: "new_lines", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new dwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dwe, e, t)
      }
    },
    Hu = class fwe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.startColumn = 0),
          (this.endLineNumberInclusive = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "start_column", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
          { no: 4, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new fwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fwe, e, t)
      }
    },
    Tgn = class gwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.chunkHash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleFileChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: ck },
          { no: 3, name: "chunk_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gwe, e, t)
      }
    },
    hI = class pwe extends _ {
      constructor(e) {
        super(),
          (this.remoteUrl = ""),
          (this.commitId = ""),
          (this.gitPatch = ""),
          (this.unsavedFiles = []),
          (this.unixTimestampMs = 0),
          (this.openEditors = []),
          (this.fileDiffHistories = []),
          (this.branchName = ""),
          (this.branchNotes = ""),
          (this.branchNotesRich = ""),
          (this.globalNotes = ""),
          (this.pastThoughts = []),
          (this.baseBranchName = ""),
          (this.baseBranchCommitId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKDebugInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "remote_url", kind: "scalar", T: 9 },
          { no: 2, name: "commit_id", kind: "scalar", T: 9 },
          { no: 3, name: "git_patch", kind: "scalar", T: 9 },
          { no: 4, name: "unsaved_files", kind: "message", T: Pgn, repeated: !0 },
          { no: 5, name: "unix_timestamp_ms", kind: "scalar", T: 1 },
          { no: 6, name: "open_editors", kind: "message", T: Lgn, repeated: !0 },
          {
            no: 7,
            name: "file_diff_histories",
            kind: "message",
            T: Ngn,
            repeated: !0,
          },
          { no: 8, name: "branch_name", kind: "scalar", T: 9 },
          { no: 9, name: "branch_notes", kind: "scalar", T: 9 },
          { no: 12, name: "branch_notes_rich", kind: "scalar", T: 9 },
          { no: 10, name: "global_notes", kind: "scalar", T: 9 },
          {
            no: 11,
            name: "past_thoughts",
            kind: "message",
            T: Rgn,
            repeated: !0,
          },
          { no: 13, name: "base_branch_name", kind: "scalar", T: 9 },
          { no: 14, name: "base_branch_commit_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new pwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pwe, e, t)
      }
    },
    Pgn = class mwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKDebugInfo.UnsavedFiles"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new mwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mwe, e, t)
      }
    },
    Lgn = class bwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.editorGroupIndex = 0),
          (this.editorGroupId = 0),
          (this.isActive = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKDebugInfo.OpenEditor"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "editor_group_index", kind: "scalar", T: 5 },
          { no: 3, name: "editor_group_id", kind: "scalar", T: 5 },
          { no: 4, name: "is_active", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new bwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bwe, e, t)
      }
    },
    Ngn = class vwe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.diffHistory = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKDebugInfo.CppFileDiffHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new vwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vwe, e, t)
      }
    },
    Rgn = class ywe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.timeInUnixSeconds = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKDebugInfo.PastThought"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "time_in_unix_seconds", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new ywe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ywe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ywe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ywe, e, t)
      }
    },
    Kf = class wwe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumberInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LineRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new wwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wwe, e, t)
      }
    },
    RC = class Cwe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_position", kind: "message", T: Qm },
          { no: 2, name: "end_position", kind: "message", T: Qm },
        ])
      }
      static fromBinary(e, t) {
        return new Cwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Cwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Cwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Cwe, e, t)
      }
    },
    ASt = class Swe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.lineNumber = 0),
          (this.isSignature = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DetailedLine"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 2 },
          { no: 3, name: "is_signature", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Swe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Swe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Swe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Swe, e, t)
      }
    },
    ed = class xwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.detailedLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeBlock"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "file_contents", kind: "scalar", T: 9, opt: !0 },
          { no: 9, name: "file_contents_length", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "range", kind: "message", T: RC },
          { no: 4, name: "contents", kind: "scalar", T: 9 },
          { no: 5, name: "signatures", kind: "message", T: Agn },
          { no: 6, name: "override_contents", kind: "scalar", T: 9, opt: !0 },
          { no: 7, name: "original_contents", kind: "scalar", T: 9, opt: !0 },
          {
            no: 8,
            name: "detailed_lines",
            kind: "message",
            T: ASt,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new xwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xwe, e, t)
      }
    },
    Agn = class kwe extends _ {
      constructor(e) {
        super(), (this.ranges = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeBlock.Signatures"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ranges", kind: "message", T: RC, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new kwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kwe, e, t)
      }
    },
    AC = class Ewe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Ewe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ewe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ewe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ewe, e, t)
      }
    },
    qRi = class Iwe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = uI.UNSPECIFIED),
          (this.relatedInformation = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Diagnostic"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: RC },
          { no: 3, name: "severity", kind: "enum", T: v.getEnumType(uI) },
          {
            no: 4,
            name: "related_information",
            kind: "message",
            T: MSt,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Iwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Iwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Iwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Iwe, e, t)
      }
    },
    uI
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ERROR = 1)] = "ERROR"),
      (i[(i.WARNING = 2)] = "WARNING"),
      (i[(i.INFORMATION = 3)] = "INFORMATION"),
      (i[(i.HINT = 4)] = "HINT")
  })(uI || (uI = {})),
    v.util.setEnumType(uI, "aiserver.v1.Diagnostic.DiagnosticSeverity", [
      { no: 0, name: "DIAGNOSTIC_SEVERITY_UNSPECIFIED" },
      { no: 1, name: "DIAGNOSTIC_SEVERITY_ERROR" },
      { no: 2, name: "DIAGNOSTIC_SEVERITY_WARNING" },
      { no: 3, name: "DIAGNOSTIC_SEVERITY_INFORMATION" },
      { no: 4, name: "DIAGNOSTIC_SEVERITY_HINT" },
    ])
  var MSt = class Dwe extends _ {
      constructor(e) {
        super(), (this.message = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Diagnostic.RelatedInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: RC },
        ])
      }
      static fromBinary(e, t) {
        return new Dwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Dwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Dwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Dwe, e, t)
      }
    },
    Mgn = class Twe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = lk.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Lint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: Hu },
          { no: 3, name: "severity", kind: "enum", T: v.getEnumType(lk) },
        ])
      }
      static fromBinary(e, t) {
        return new Twe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Twe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Twe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Twe, e, t)
      }
    },
    $gn = class Pwe extends _ {
      constructor(e) {
        super(),
          (this.content = ""),
          (this.score = 0),
          (this.relativePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BM25Chunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "content", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: ck },
          { no: 3, name: "score", kind: "scalar", T: 5 },
          { no: 4, name: "relative_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Pwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Pwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Pwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Pwe, e, t)
      }
    },
    Ho = class Lwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.relyOnFilesync = !1),
          (this.cells = []),
          (this.topChunks = []),
          (this.contentsStartAtLine = 0),
          (this.dataframes = []),
          (this.totalNumberOfLines = 0),
          (this.languageId = ""),
          (this.diagnostics = []),
          (this.cellStartLines = []),
          (this.workspaceRootPath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CurrentFileInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 18, name: "rely_on_filesync", kind: "scalar", T: 8 },
          { no: 17, name: "sha_256_hash", kind: "scalar", T: 9, opt: !0 },
          { no: 16, name: "cells", kind: "message", T: Fgn, repeated: !0 },
          { no: 10, name: "top_chunks", kind: "message", T: $gn, repeated: !0 },
          { no: 9, name: "contents_start_at_line", kind: "scalar", T: 5 },
          { no: 3, name: "cursor_position", kind: "message", T: Qm },
          { no: 4, name: "dataframes", kind: "message", T: $St, repeated: !0 },
          { no: 8, name: "total_number_of_lines", kind: "scalar", T: 5 },
          { no: 5, name: "language_id", kind: "scalar", T: 9 },
          { no: 6, name: "selection", kind: "message", T: RC },
          {
            no: 11,
            name: "alternative_version_id",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 7, name: "diagnostics", kind: "message", T: qRi, repeated: !0 },
          { no: 14, name: "file_version", kind: "scalar", T: 5, opt: !0 },
          {
            no: 15,
            name: "cell_start_lines",
            kind: "scalar",
            T: 5,
            repeated: !0,
          },
          { no: 19, name: "workspace_root_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Lwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Lwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Lwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Lwe, e, t)
      }
    },
    Fgn = class Nwe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CurrentFileInfo.NotebookCell"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Nwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Nwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Nwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Nwe, e, t)
      }
    },
    Ogn = class Rwe extends _ {
      constructor(e) {
        super(),
          (this.apiKey = ""),
          (this.baseUrl = ""),
          (this.deployment = ""),
          (this.useAzure = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AzureState"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "api_key", kind: "scalar", T: 9 },
          { no: 2, name: "base_url", kind: "scalar", T: 9 },
          { no: 3, name: "deployment", kind: "scalar", T: 9 },
          { no: 4, name: "use_azure", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Rwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Rwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Rwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Rwe, e, t)
      }
    },
    zr = class Awe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_name", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "api_key", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "enable_ghost_mode", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "azure_state", kind: "message", T: Ogn, opt: !0 },
          { no: 5, name: "enable_slow_pool", kind: "scalar", T: 8, opt: !0 },
          { no: 6, name: "openai_api_base_url", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Awe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Awe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Awe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Awe, e, t)
      }
    },
    $St = class Mwe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.shape = ""),
          (this.dataDimensionality = 0),
          (this.columns = []),
          (this.rowCount = 0),
          (this.indexColumn = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DataframeInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "shape", kind: "scalar", T: 9 },
          { no: 3, name: "data_dimensionality", kind: "scalar", T: 5 },
          { no: 6, name: "columns", kind: "message", T: jRi, repeated: !0 },
          { no: 7, name: "row_count", kind: "scalar", T: 5 },
          { no: 8, name: "index_column", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Mwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Mwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Mwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Mwe, e, t)
      }
    },
    jRi = class $we extends _ {
      constructor(e) {
        super(), (this.key = ""), (this.type = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DataframeInfo.Column"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "key", kind: "scalar", T: 9 },
          { no: 2, name: "type", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new $we().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $we().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $we().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($we, e, t)
      }
    },
    k$ = class Fwe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.relatedInformation = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LinterError"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: RC },
          { no: 3, name: "source", kind: "scalar", T: 9, opt: !0 },
          {
            no: 4,
            name: "related_information",
            kind: "message",
            T: MSt,
            repeated: !0,
          },
          {
            no: 5,
            name: "severity",
            kind: "enum",
            T: v.getEnumType(uI),
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Fwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Fwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Fwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Fwe, e, t)
      }
    },
    Cf = class Owe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.errors = []),
          (this.fileContents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LinterErrors"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "errors", kind: "message", T: k$, repeated: !0 },
          { no: 3, name: "file_contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Owe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Owe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Owe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Owe, e, t)
      }
    },
    zRi = class Bwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.errors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LinterErrorsWithoutFileContents"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "errors", kind: "message", T: k$, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Bwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Bwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Bwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Bwe, e, t)
      }
    },
    iG = class _we extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.description = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorRule"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "description", kind: "scalar", T: 9 },
          { no: 3, name: "body", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "is_from_glob", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _we().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _we().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _we().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_we, e, t)
      }
    },
    Sf = class Uwe extends _ {
      constructor(e) {
        super(),
          (this.context = ""),
          (this.rules = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ExplicitContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context", kind: "scalar", T: 9 },
          { no: 2, name: "repo_context", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "rules", kind: "message", T: iG, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Uwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Uwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Uwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Uwe, e, t)
      }
    },
    K9 = class Hwe extends _ {
      constructor(e) {
        super(),
          (this.messageType = Ka.UNSPECIFIED),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PureMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message_type", kind: "enum", T: v.getEnumType(Ka) },
          { no: 2, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Hwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Hwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Hwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Hwe, e, t)
      }
    },
    Ka
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SYSTEM = 1)] = "SYSTEM"),
      (i[(i.USER = 2)] = "USER"),
      (i[(i.ASSISTANT = 3)] = "ASSISTANT")
  })(Ka || (Ka = {})),
    v.util.setEnumType(Ka, "aiserver.v1.PureMessage.MessageType", [
      { no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
      { no: 1, name: "MESSAGE_TYPE_SYSTEM" },
      { no: 2, name: "MESSAGE_TYPE_USER" },
      { no: 3, name: "MESSAGE_TYPE_ASSISTANT" },
    ])
  var toe = class Tte extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.detail = ""),
          (this.kind = Ph.UNSPECIFIED),
          (this.containerName = ""),
          (this.children = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentSymbol"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "detail", kind: "scalar", T: 9 },
          { no: 3, name: "kind", kind: "enum", T: v.getEnumType(Ph) },
          { no: 5, name: "container_name", kind: "scalar", T: 9 },
          { no: 6, name: "range", kind: "message", T: GRi },
          { no: 7, name: "selection_range", kind: "message", T: GRi },
          { no: 8, name: "children", kind: "message", T: Tte, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Tte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Tte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Tte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Tte, e, t)
      }
    },
    Ph
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.FILE = 1)] = "FILE"),
      (i[(i.MODULE = 2)] = "MODULE"),
      (i[(i.NAMESPACE = 3)] = "NAMESPACE"),
      (i[(i.PACKAGE = 4)] = "PACKAGE"),
      (i[(i.CLASS = 5)] = "CLASS"),
      (i[(i.METHOD = 6)] = "METHOD"),
      (i[(i.PROPERTY = 7)] = "PROPERTY"),
      (i[(i.FIELD = 8)] = "FIELD"),
      (i[(i.CONSTRUCTOR = 9)] = "CONSTRUCTOR"),
      (i[(i.ENUM = 10)] = "ENUM"),
      (i[(i.INTERFACE = 11)] = "INTERFACE"),
      (i[(i.FUNCTION = 12)] = "FUNCTION"),
      (i[(i.VARIABLE = 13)] = "VARIABLE"),
      (i[(i.CONSTANT = 14)] = "CONSTANT"),
      (i[(i.STRING = 15)] = "STRING"),
      (i[(i.NUMBER = 16)] = "NUMBER"),
      (i[(i.BOOLEAN = 17)] = "BOOLEAN"),
      (i[(i.ARRAY = 18)] = "ARRAY"),
      (i[(i.OBJECT = 19)] = "OBJECT"),
      (i[(i.KEY = 20)] = "KEY"),
      (i[(i.NULL = 21)] = "NULL"),
      (i[(i.ENUM_MEMBER = 22)] = "ENUM_MEMBER"),
      (i[(i.STRUCT = 23)] = "STRUCT"),
      (i[(i.EVENT = 24)] = "EVENT"),
      (i[(i.OPERATOR = 25)] = "OPERATOR"),
      (i[(i.TYPE_PARAMETER = 26)] = "TYPE_PARAMETER")
  })(Ph || (Ph = {})),
    v.util.setEnumType(Ph, "aiserver.v1.DocumentSymbol.SymbolKind", [
      { no: 0, name: "SYMBOL_KIND_UNSPECIFIED" },
      { no: 1, name: "SYMBOL_KIND_FILE" },
      { no: 2, name: "SYMBOL_KIND_MODULE" },
      { no: 3, name: "SYMBOL_KIND_NAMESPACE" },
      { no: 4, name: "SYMBOL_KIND_PACKAGE" },
      { no: 5, name: "SYMBOL_KIND_CLASS" },
      { no: 6, name: "SYMBOL_KIND_METHOD" },
      { no: 7, name: "SYMBOL_KIND_PROPERTY" },
      { no: 8, name: "SYMBOL_KIND_FIELD" },
      { no: 9, name: "SYMBOL_KIND_CONSTRUCTOR" },
      { no: 10, name: "SYMBOL_KIND_ENUM" },
      { no: 11, name: "SYMBOL_KIND_INTERFACE" },
      { no: 12, name: "SYMBOL_KIND_FUNCTION" },
      { no: 13, name: "SYMBOL_KIND_VARIABLE" },
      { no: 14, name: "SYMBOL_KIND_CONSTANT" },
      { no: 15, name: "SYMBOL_KIND_STRING" },
      { no: 16, name: "SYMBOL_KIND_NUMBER" },
      { no: 17, name: "SYMBOL_KIND_BOOLEAN" },
      { no: 18, name: "SYMBOL_KIND_ARRAY" },
      { no: 19, name: "SYMBOL_KIND_OBJECT" },
      { no: 20, name: "SYMBOL_KIND_KEY" },
      { no: 21, name: "SYMBOL_KIND_NULL" },
      { no: 22, name: "SYMBOL_KIND_ENUM_MEMBER" },
      { no: 23, name: "SYMBOL_KIND_STRUCT" },
      { no: 24, name: "SYMBOL_KIND_EVENT" },
      { no: 25, name: "SYMBOL_KIND_OPERATOR" },
      { no: 26, name: "SYMBOL_KIND_TYPE_PARAMETER" },
    ])
  var GRi = class Vwe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.startColumn = 0),
          (this.endLineNumber = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentSymbol.Range"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "start_column", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new Vwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Vwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Vwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Vwe, e, t)
      }
    },
    JRi = class Wwe extends _ {
      constructor(e) {
        super(),
          (this.codeDetails = ""),
          (this.markdownBlocks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.HoverDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_details", kind: "scalar", T: 9 },
          { no: 2, name: "markdown_blocks", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Wwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Wwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Wwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Wwe, e, t)
      }
    },
    Bgn = class qwe extends _ {
      constructor(e) {
        super(), (this.scheme = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UriComponents"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "scheme", kind: "scalar", T: 9 },
          { no: 2, name: "authority", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "path", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "query", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "fragment", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new qwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qwe, e, t)
      }
    },
    ZHe = class jwe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.textInSymbolRange = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentSymbolWithText"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbol", kind: "message", T: toe },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "text_in_symbol_range", kind: "scalar", T: 9 },
          { no: 4, name: "uri_components", kind: "message", T: Bgn },
        ])
      }
      static fromBinary(e, t) {
        return new jwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jwe, e, t)
      }
    },
    sG = class zwe extends _ {
      constructor(e) {
        super(), (this.error = Er.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ErrorDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error", kind: "enum", T: v.getEnumType(Er) },
          { no: 2, name: "details", kind: "message", T: KRi },
          { no: 3, name: "is_expected", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new zwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zwe, e, t)
      }
    },
    Er
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.BAD_API_KEY = 1)] = "BAD_API_KEY"),
      (i[(i.BAD_USER_API_KEY = 42)] = "BAD_USER_API_KEY"),
      (i[(i.NOT_LOGGED_IN = 2)] = "NOT_LOGGED_IN"),
      (i[(i.INVALID_AUTH_ID = 3)] = "INVALID_AUTH_ID"),
      (i[(i.NOT_HIGH_ENOUGH_PERMISSIONS = 4)] = "NOT_HIGH_ENOUGH_PERMISSIONS"),
      (i[(i.AGENT_REQUIRES_LOGIN = 18)] = "AGENT_REQUIRES_LOGIN"),
      (i[(i.BAD_MODEL_NAME = 5)] = "BAD_MODEL_NAME"),
      (i[(i.NOT_FOUND = 39)] = "NOT_FOUND"),
      (i[(i.DEPRECATED = 40)] = "DEPRECATED"),
      (i[(i.USER_NOT_FOUND = 6)] = "USER_NOT_FOUND"),
      (i[(i.FREE_USER_RATE_LIMIT_EXCEEDED = 7)] =
        "FREE_USER_RATE_LIMIT_EXCEEDED"),
      (i[(i.PRO_USER_RATE_LIMIT_EXCEEDED = 8)] = "PRO_USER_RATE_LIMIT_EXCEEDED"),
      (i[(i.FREE_USER_USAGE_LIMIT = 9)] = "FREE_USER_USAGE_LIMIT"),
      (i[(i.PRO_USER_USAGE_LIMIT = 10)] = "PRO_USER_USAGE_LIMIT"),
      (i[(i.RESOURCE_EXHAUSTED = 41)] = "RESOURCE_EXHAUSTED"),
      (i[(i.AUTH_TOKEN_NOT_FOUND = 11)] = "AUTH_TOKEN_NOT_FOUND"),
      (i[(i.AUTH_TOKEN_EXPIRED = 12)] = "AUTH_TOKEN_EXPIRED"),
      (i[(i.OPENAI = 13)] = "OPENAI"),
      (i[(i.OPENAI_RATE_LIMIT_EXCEEDED = 14)] = "OPENAI_RATE_LIMIT_EXCEEDED"),
      (i[(i.OPENAI_ACCOUNT_LIMIT_EXCEEDED = 15)] =
        "OPENAI_ACCOUNT_LIMIT_EXCEEDED"),
      (i[(i.TASK_UUID_NOT_FOUND = 16)] = "TASK_UUID_NOT_FOUND"),
      (i[(i.TASK_NO_PERMISSIONS = 17)] = "TASK_NO_PERMISSIONS"),
      (i[(i.AGENT_ENGINE_NOT_FOUND = 19)] = "AGENT_ENGINE_NOT_FOUND"),
      (i[(i.MAX_TOKENS = 20)] = "MAX_TOKENS"),
      (i[(i.PRO_USER_ONLY = 23)] = "PRO_USER_ONLY"),
      (i[(i.API_KEY_NOT_SUPPORTED = 24)] = "API_KEY_NOT_SUPPORTED"),
      (i[(i.USER_ABORTED_REQUEST = 21)] = "USER_ABORTED_REQUEST"),
      (i[(i.TIMEOUT = 25)] = "TIMEOUT"),
      (i[(i.GENERIC_RATE_LIMIT_EXCEEDED = 22)] = "GENERIC_RATE_LIMIT_EXCEEDED"),
      (i[(i.SLASH_EDIT_FILE_TOO_LONG = 26)] = "SLASH_EDIT_FILE_TOO_LONG"),
      (i[(i.FILE_UNSUPPORTED = 27)] = "FILE_UNSUPPORTED"),
      (i[(i.GPT_4_VISION_PREVIEW_RATE_LIMIT = 28)] =
        "GPT_4_VISION_PREVIEW_RATE_LIMIT"),
      (i[(i.CUSTOM_MESSAGE = 29)] = "CUSTOM_MESSAGE"),
      (i[(i.OUTDATED_CLIENT = 30)] = "OUTDATED_CLIENT"),
      (i[(i.CLAUDE_IMAGE_TOO_LARGE = 31)] = "CLAUDE_IMAGE_TOO_LARGE"),
      (i[(i.GITGRAPH_NOT_FOUND = 32)] = "GITGRAPH_NOT_FOUND"),
      (i[(i.FILE_NOT_FOUND = 33)] = "FILE_NOT_FOUND"),
      (i[(i.API_KEY_RATE_LIMIT = 34)] = "API_KEY_RATE_LIMIT"),
      (i[(i.DEBOUNCED = 35)] = "DEBOUNCED"),
      (i[(i.BAD_REQUEST = 36)] = "BAD_REQUEST"),
      (i[(i.REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED = 37)] =
        "REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED"),
      (i[(i.UNAUTHORIZED = 38)] = "UNAUTHORIZED"),
      (i[(i.CONVERSATION_TOO_LONG = 43)] = "CONVERSATION_TOO_LONG")
  })(Er || (Er = {})),
    v.util.setEnumType(Er, "aiserver.v1.ErrorDetails.Error", [
      { no: 0, name: "ERROR_UNSPECIFIED" },
      { no: 1, name: "ERROR_BAD_API_KEY" },
      { no: 42, name: "ERROR_BAD_USER_API_KEY" },
      { no: 2, name: "ERROR_NOT_LOGGED_IN" },
      { no: 3, name: "ERROR_INVALID_AUTH_ID" },
      { no: 4, name: "ERROR_NOT_HIGH_ENOUGH_PERMISSIONS" },
      { no: 18, name: "ERROR_AGENT_REQUIRES_LOGIN" },
      { no: 5, name: "ERROR_BAD_MODEL_NAME" },
      { no: 39, name: "ERROR_NOT_FOUND" },
      { no: 40, name: "ERROR_DEPRECATED" },
      { no: 6, name: "ERROR_USER_NOT_FOUND" },
      { no: 7, name: "ERROR_FREE_USER_RATE_LIMIT_EXCEEDED" },
      { no: 8, name: "ERROR_PRO_USER_RATE_LIMIT_EXCEEDED" },
      { no: 9, name: "ERROR_FREE_USER_USAGE_LIMIT" },
      { no: 10, name: "ERROR_PRO_USER_USAGE_LIMIT" },
      { no: 41, name: "ERROR_RESOURCE_EXHAUSTED" },
      { no: 11, name: "ERROR_AUTH_TOKEN_NOT_FOUND" },
      { no: 12, name: "ERROR_AUTH_TOKEN_EXPIRED" },
      { no: 13, name: "ERROR_OPENAI" },
      { no: 14, name: "ERROR_OPENAI_RATE_LIMIT_EXCEEDED" },
      { no: 15, name: "ERROR_OPENAI_ACCOUNT_LIMIT_EXCEEDED" },
      { no: 16, name: "ERROR_TASK_UUID_NOT_FOUND" },
      { no: 17, name: "ERROR_TASK_NO_PERMISSIONS" },
      { no: 19, name: "ERROR_AGENT_ENGINE_NOT_FOUND" },
      { no: 20, name: "ERROR_MAX_TOKENS" },
      { no: 23, name: "ERROR_PRO_USER_ONLY" },
      { no: 24, name: "ERROR_API_KEY_NOT_SUPPORTED" },
      { no: 21, name: "ERROR_USER_ABORTED_REQUEST" },
      { no: 25, name: "ERROR_TIMEOUT" },
      { no: 22, name: "ERROR_GENERIC_RATE_LIMIT_EXCEEDED" },
      { no: 26, name: "ERROR_SLASH_EDIT_FILE_TOO_LONG" },
      { no: 27, name: "ERROR_FILE_UNSUPPORTED" },
      { no: 28, name: "ERROR_GPT_4_VISION_PREVIEW_RATE_LIMIT" },
      { no: 29, name: "ERROR_CUSTOM_MESSAGE" },
      { no: 30, name: "ERROR_OUTDATED_CLIENT" },
      { no: 31, name: "ERROR_CLAUDE_IMAGE_TOO_LARGE" },
      { no: 32, name: "ERROR_GITGRAPH_NOT_FOUND" },
      { no: 33, name: "ERROR_FILE_NOT_FOUND" },
      { no: 34, name: "ERROR_API_KEY_RATE_LIMIT" },
      { no: 35, name: "ERROR_DEBOUNCED" },
      { no: 36, name: "ERROR_BAD_REQUEST" },
      { no: 37, name: "ERROR_REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED" },
      { no: 38, name: "ERROR_UNAUTHORIZED" },
      { no: 43, name: "ERROR_CONVERSATION_TOO_LONG" },
    ])
  var KRi = class Gwe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.detail = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CustomErrorDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "detail", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "allow_command_links_potentially_unsafe_please_only_use_for_handwritten_trusted_markdown",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 4, name: "is_retryable", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "show_request_id", kind: "scalar", T: 8, opt: !0 },
          {
            no: 6,
            name: "should_show_immediate_error",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Gwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Gwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Gwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Gwe, e, t)
      }
    },
    OT = class Jwe extends _ {
      constructor(e) {
        super(), (this.data = new Uint8Array(0)), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ImageProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "data", kind: "scalar", T: 12 },
          { no: 2, name: "dimension", kind: "message", T: _gn },
        ])
      }
      static fromBinary(e, t) {
        return new Jwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Jwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Jwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Jwe, e, t)
      }
    },
    _gn = class Kwe extends _ {
      constructor(e) {
        super(), (this.width = 0), (this.height = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ImageProto.Dimension"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "width", kind: "scalar", T: 5 },
          { no: 2, name: "height", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new Kwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Kwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Kwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Kwe, e, t)
      }
    },
    eVe = class Ywe extends _ {
      constructor(e) {
        super(),
          (this.markdown = ""),
          (this.bubbleId = ""),
          (this.sectionIndex = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatQuote"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "markdown", kind: "scalar", T: 9 },
          { no: 2, name: "bubble_id", kind: "scalar", T: 9 },
          { no: 3, name: "section_index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new Ywe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ywe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ywe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ywe, e, t)
      }
    },
    Ugn = class Xwe extends _ {
      constructor(e) {
        super(), (this.url = ""), (this.uuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatExternalLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "url", kind: "scalar", T: 9 },
          { no: 2, name: "uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Xwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Xwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Xwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Xwe, e, t)
      }
    },
    FSt = class Qwe extends _ {
      constructor(e) {
        super(), (this.url = ""), (this.uuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerExternalLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "url", kind: "scalar", T: 9 },
          { no: 2, name: "uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Qwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Qwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Qwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Qwe, e, t)
      }
    },
    OSt = class Zwe extends _ {
      constructor(e) {
        super(), (this.url = ""), (this.uuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKExternalLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "url", kind: "scalar", T: 9 },
          { no: 2, name: "uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Zwe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Zwe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Zwe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Zwe, e, t)
      }
    },
    BSt = class e0e extends _ {
      constructor(e) {
        super(),
          (this.note = ""),
          (this.commitHash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CommitNote"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "note", kind: "scalar", T: 9 },
          { no: 2, name: "commit_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new e0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new e0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new e0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(e0e, e, t)
      }
    },
    Hgn = class t0e extends _ {
      constructor(e) {
        super(),
          (this.note = ""),
          (this.commitHash = ""),
          (this.embeddings = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CommitNoteWithEmbeddings"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "note", kind: "scalar", T: 9 },
          { no: 2, name: "commit_hash", kind: "scalar", T: 9 },
          { no: 3, name: "embeddings", kind: "scalar", T: 1, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new t0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new t0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new t0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(t0e, e, t)
      }
    },
    Vgn = class i0e extends _ {
      constructor(e) {
        super(), (this.diff = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CommitDiffString"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new i0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new i0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new i0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(i0e, e, t)
      }
    },
    N0o = class s0e extends _ {
      constructor(e) {
        super(),
          (this.notes = []),
          (this.commitHash = ""),
          (this.repoUrl = ""),
          (this.filesChangedRelativePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FullCommitNotes"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "notes", kind: "message", T: BSt, repeated: !0 },
          { no: 2, name: "commit_hash", kind: "scalar", T: 9 },
          { no: 3, name: "repo_url", kind: "scalar", T: 9 },
          { no: 4, name: "files_changed_relative_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new s0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new s0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new s0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(s0e, e, t)
      }
    },
    Wgn = class n0e extends _ {
      constructor(e) {
        super(), (this.key = ""), (this.value = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CrossExtHostHeader"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "key", kind: "scalar", T: 9 },
          { no: 2, name: "value", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new n0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new n0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new n0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(n0e, e, t)
      }
    },
    YRi = class r0e extends _ {
      constructor(e) {
        super(), (this.headers = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CrossExtHostHeaders"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "headers", kind: "message", T: Wgn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new r0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new r0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new r0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(r0e, e, t)
      }
    },
    XRi = class o0e extends _ {
      constructor(e) {
        super(),
          (this.message = new Uint8Array(0)),
          (this.isError = !1),
          (this.connectError = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleUnaryCrossExtensionHostMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 12 },
          { no: 2, name: "header", kind: "message", T: YRi },
          { no: 3, name: "trailer", kind: "message", T: YRi },
          { no: 4, name: "is_error", kind: "scalar", T: 8 },
          { no: 5, name: "connect_error", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new o0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new o0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new o0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(o0e, e, t)
      }
    },
    QRi = class a0e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          (this.languageIdentifier = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 4,
            name: "summarization_strategy",
            kind: "enum",
            T: v.getEnumType(iVe),
            opt: !0,
          },
          { no: 5, name: "language_identifier", kind: "scalar", T: 9 },
          { no: 6, name: "intent", kind: "enum", T: v.getEnumType(tVe), opt: !0 },
          { no: 7, name: "is_final_version", kind: "scalar", T: 8, opt: !0 },
          { no: 8, name: "is_first_version", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new a0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new a0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new a0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(a0e, e, t)
      }
    },
    tVe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.COMPOSER_FILE = 1)] = "COMPOSER_FILE"),
      (i[(i.COMPRESSED_COMPOSER_FILE = 2)] = "COMPRESSED_COMPOSER_FILE")
  })(tVe || (tVe = {})),
    v.util.setEnumType(tVe, "aiserver.v1.CodeChunk.Intent", [
      { no: 0, name: "INTENT_UNSPECIFIED" },
      { no: 1, name: "INTENT_COMPOSER_FILE" },
      { no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
    ])
  var iVe
  ;(function (i) {
    ;(i[(i.NONE_UNSPECIFIED = 0)] = "NONE_UNSPECIFIED"),
      (i[(i.SUMMARIZED = 1)] = "SUMMARIZED"),
      (i[(i.EMBEDDED = 2)] = "EMBEDDED")
  })(iVe || (iVe = {})),
    v.util.setEnumType(iVe, "aiserver.v1.CodeChunk.SummarizationStrategy", [
      { no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
      { no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
      { no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
    ])
  var ZRi = class l0e extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.targetDir = ""),
          (this.repo = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateExperimentalIndexRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "target_dir", kind: "scalar", T: 9 },
          { no: 3, name: "repo", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new l0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new l0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new l0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(l0e, e, t)
      }
    },
    qgn = class c0e extends _ {
      constructor(e) {
        super(), (this.indexId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateExperimentalIndexResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new c0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new c0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new c0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(c0e, e, t)
      }
    },
    eAi = class h0e extends _ {
      constructor(e) {
        super(), (this.indexId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListExperimentalIndexFilesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new h0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new h0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new h0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(h0e, e, t)
      }
    },
    jgn = class u0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.files = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListExperimentalIndexFilesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "files", kind: "message", T: oAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new u0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new u0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new u0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(u0e, e, t)
      }
    },
    _St = class d0e extends _ {
      constructor(e) {
        super(), (this.indexId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new d0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new d0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new d0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(d0e, e, t)
      }
    },
    zgn = class f0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.item = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "ready", kind: "message", T: Ggn, oneof: "item" },
          { no: 3, name: "register", kind: "message", T: Jgn, oneof: "item" },
          { no: 4, name: "choose", kind: "message", T: Kgn, oneof: "item" },
          { no: 5, name: "summarize", kind: "message", T: Ygn, oneof: "item" },
          { no: 6, name: "error", kind: "message", T: Xgn, oneof: "item" },
        ])
      }
      static fromBinary(e, t) {
        return new f0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new f0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new f0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(f0e, e, t)
      }
    },
    Ggn = class g0e extends _ {
      constructor(e) {
        super(), (this.indexId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexResponse.ReadyItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "request", kind: "message", T: _St },
        ])
      }
      static fromBinary(e, t) {
        return new g0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new g0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new g0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(g0e, e, t)
      }
    },
    Jgn = class p0e extends _ {
      constructor(e) {
        super(), (this.reqUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexResponse.RegisterItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "response", kind: "message", T: Qgn },
          { no: 2, name: "request", kind: "message", T: sVe },
          { no: 3, name: "req_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new p0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new p0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new p0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(p0e, e, t)
      }
    },
    Kgn = class m0e extends _ {
      constructor(e) {
        super(), (this.reqUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexResponse.ChooseItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "response", kind: "message", T: ipn },
          { no: 2, name: "request", kind: "message", T: nVe },
          { no: 3, name: "req_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new m0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new m0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new m0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(m0e, e, t)
      }
    },
    Ygn = class b0e extends _ {
      constructor(e) {
        super(), (this.reqUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "response", kind: "message", T: rpn },
          { no: 2, name: "request", kind: "message", T: rVe },
          { no: 3, name: "req_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new b0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new b0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new b0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(b0e, e, t)
      }
    },
    Xgn = class v0e extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.statusCode = 0),
          (this.request = { case: void 0 }),
          (this.reqUuid = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListenExperimentalIndexResponse.ErrorItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "status_code", kind: "scalar", T: 5 },
          { no: 3, name: "register", kind: "message", T: sVe, oneof: "request" },
          { no: 4, name: "choose", kind: "message", T: nVe, oneof: "request" },
          { no: 5, name: "summarize", kind: "message", T: rVe, oneof: "request" },
          { no: 6, name: "req_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new v0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new v0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new v0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(v0e, e, t)
      }
    },
    sVe = class y0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.workspaceRelativePath = ""),
          (this.content = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RegisterFileToIndexRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 3, name: "root_context_node", kind: "message", T: lAi },
          { no: 4, name: "content", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new y0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new y0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new y0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(y0e, e, t)
      }
    },
    Qgn = class w0e extends _ {
      constructor(e) {
        super(),
          (this.fileId = ""),
          (this.rootContextNodeId = ""),
          (this.dependencyResolutionAttempts = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RegisterFileToIndexResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_id", kind: "scalar", T: 9 },
          { no: 2, name: "root_context_node_id", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "dependency_resolution_attempts",
            kind: "message",
            T: cAi,
            repeated: !0,
          },
          { no: 4, name: "file_data", kind: "message", T: oAi },
        ])
      }
      static fromBinary(e, t) {
        return new w0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new w0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new w0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(w0e, e, t)
      }
    },
    tAi = class C0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.fileId = ""),
          (this.dependencyResolutionResults = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SetupIndexDependenciesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 3, name: "file_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "dependency_resolution_results",
            kind: "message",
            T: hAi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new C0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new C0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new C0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(C0e, e, t)
      }
    },
    Zgn = class S0e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SetupIndexDependenciesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new S0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new S0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new S0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(S0e, e, t)
      }
    },
    iAi = class x0e extends _ {
      constructor(e) {
        super(), (this.indexId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComputeIndexTopoSortRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new x0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new x0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new x0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(x0e, e, t)
      }
    },
    epn = class k0e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComputeIndexTopoSortResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new k0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new k0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new k0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(k0e, e, t)
      }
    },
    nVe = class E0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.request = { case: void 0 }),
          (this.recompute = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "file", kind: "message", T: tpn, oneof: "request" },
          { no: 3, name: "node", kind: "message", T: sAi, oneof: "request" },
          { no: 4, name: "recompute", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new E0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new E0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new E0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(E0e, e, t)
      }
    },
    tpn = class I0e extends _ {
      constructor(e) {
        super(), (this.fileId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesRequest.FileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new I0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new I0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new I0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(I0e, e, t)
      }
    },
    sAi = class D0e extends _ {
      constructor(e) {
        super(), (this.nodeId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesRequest.NodeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "node_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new D0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new D0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new D0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(D0e, e, t)
      }
    },
    ipn = class T0e extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "message", T: spn, oneof: "response" },
          { no: 2, name: "node", kind: "message", T: nAi, oneof: "response" },
        ])
      }
      static fromBinary(e, t) {
        return new T0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new T0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new T0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(T0e, e, t)
      }
    },
    nAi = class P0e extends _ {
      constructor(e) {
        super(),
          (this.nodeId = ""),
          (this.actions = []),
          (this.skipped = !1),
          (this.dependencies = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesResponse.NodeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "node_id", kind: "scalar", T: 9 },
          { no: 2, name: "actions", kind: "message", T: oVe, repeated: !0 },
          { no: 3, name: "skipped", kind: "scalar", T: 8 },
          { no: 4, name: "dependencies", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new P0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new P0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new P0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(P0e, e, t)
      }
    },
    spn = class L0e extends _ {
      constructor(e) {
        super(),
          (this.fileId = ""),
          (this.nodeResponses = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChooseCodeReferencesResponse.FileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "node_responses",
            kind: "message",
            T: nAi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new L0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new L0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new L0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(L0e, e, t)
      }
    },
    rAi = class N0e extends _ {
      constructor(e) {
        super(),
          (this.nodeId = ""),
          (this.references = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RegisterCodeReferencesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "node_id", kind: "scalar", T: 9 },
          { no: 2, name: "references", kind: "message", T: uAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new N0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new N0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new N0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(N0e, e, t)
      }
    },
    npn = class R0e extends _ {
      constructor(e) {
        super(), (this.dependencies = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RegisterCodeReferencesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "dependencies", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new R0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new R0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new R0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(R0e, e, t)
      }
    },
    rVe = class A0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.nodeId = ""),
          (this.recompute = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SummarizeWithReferencesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "node_id", kind: "scalar", T: 9 },
          { no: 3, name: "recompute", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new A0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new A0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new A0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(A0e, e, t)
      }
    },
    rpn = class M0e extends _ {
      constructor(e) {
        super(),
          (this.response = { case: void 0 }),
          (this.nodeId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SummarizeWithReferencesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "success", kind: "message", T: opn, oneof: "response" },
          {
            no: 2,
            name: "dependency",
            kind: "message",
            T: apn,
            oneof: "response",
          },
          { no: 3, name: "node_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new M0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new M0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new M0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(M0e, e, t)
      }
    },
    opn = class $0e extends _ {
      constructor(e) {
        super(), (this.summary = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SummarizeWithReferencesResponse.Success"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "summary", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new $0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($0e, e, t)
      }
    },
    apn = class F0e extends _ {
      constructor(e) {
        super(), (this.nodes = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SummarizeWithReferencesResponse.Dependency"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "nodes", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new F0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new F0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new F0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(F0e, e, t)
      }
    },
    USt = class O0e extends _ {
      constructor(e) {
        super(), (this.reqUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RequestReceivedResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "req_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new O0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new O0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new O0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(O0e, e, t)
      }
    },
    lpn = class B0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.id = ""),
          (this.summary = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReflectionData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "id", kind: "scalar", T: 9 },
          { no: 3, name: "summary", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new B0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new B0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new B0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(B0e, e, t)
      }
    },
    oAi = class _0e extends _ {
      constructor(e) {
        super(),
          (this.indexId = ""),
          (this.workspaceRelativePath = ""),
          (this.stage = ""),
          (this.order = 0),
          (this.nodes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IndexFileData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index_id", kind: "scalar", T: 9 },
          { no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 3, name: "stage", kind: "scalar", T: 9 },
          { no: 4, name: "order", kind: "scalar", T: 5 },
          { no: 5, name: "nodes", kind: "message", T: aAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_0e, e, t)
      }
    },
    aAi = class U0e extends _ {
      constructor(e) {
        super(),
          (this.nodeId = ""),
          (this.stage = ""),
          (this.content = ""),
          (this.summary = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IndexFileData.NodeData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "node_id", kind: "scalar", T: 9 },
          { no: 2, name: "stage", kind: "scalar", T: 9 },
          { no: 3, name: "content", kind: "scalar", T: 9 },
          { no: 4, name: "summary", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new U0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new U0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new U0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(U0e, e, t)
      }
    },
    lAi = class Pte extends _ {
      constructor(e) {
        super(),
          (this.workspaceRelativePath = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.children = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SerializedContextNode"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "children", kind: "message", T: Pte, repeated: !0 },
          { no: 5, name: "node_snippets", kind: "message", T: ioe },
        ])
      }
      static fromBinary(e, t) {
        return new Pte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Pte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Pte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Pte, e, t)
      }
    },
    cAi = class H0e extends _ {
      constructor(e) {
        super(),
          (this.workspaceRelativePath = ""),
          (this.nodeId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.URIResolutionAttempt"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "node_id", kind: "scalar", T: 9 },
          { no: 3, name: "symbol", kind: "message", T: oVe },
        ])
      }
      static fromBinary(e, t) {
        return new H0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new H0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new H0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(H0e, e, t)
      }
    },
    hAi = class V0e extends _ {
      constructor(e) {
        super(), (this.resolvedPaths = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.URIResolutionResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request", kind: "message", T: cAi },
          { no: 2, name: "resolved_paths", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new V0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new V0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new V0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(V0e, e, t)
      }
    },
    cpn = class W0e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ExtractPathsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_code_snippets", kind: "message", T: ioe },
        ])
      }
      static fromBinary(e, t) {
        return new W0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new W0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new W0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(W0e, e, t)
      }
    },
    hpn = class q0e extends _ {
      constructor(e) {
        super(), (this.paths = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ExtractPathsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "paths", kind: "message", T: oVe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new q0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new q0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new q0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(q0e, e, t)
      }
    },
    uAi = class j0e extends _ {
      constructor(e) {
        super(), (this.references = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SymbolActionResults"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "action", kind: "message", T: oVe },
          { no: 2, name: "references", kind: "message", T: HSt, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new j0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new j0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new j0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(j0e, e, t)
      }
    },
    HSt = class z0e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SymbolActionResultReference"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "range", kind: "message", T: Hu },
          { no: 2, name: "reference", kind: "message", T: ioe },
        ])
      }
      static fromBinary(e, t) {
        return new z0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new z0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new z0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(z0e, e, t)
      }
    },
    ioe = class G0e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.totalLines = 0),
          (this.snippets = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileCodeSnippets"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "total_lines", kind: "scalar", T: 5 },
          { no: 3, name: "snippets", kind: "message", T: VSt, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new G0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new G0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new G0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(G0e, e, t)
      }
    },
    VSt = class J0e extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.lines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeSnippet"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new J0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new J0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new J0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(J0e, e, t)
      }
    },
    oVe = class K0e extends _ {
      constructor(e) {
        super(),
          (this.workspaceRelativePath = ""),
          (this.lineNumber = 0),
          (this.symbolStartColumn = 0),
          (this.symbolEndColumn = 0),
          (this.action = E$.UNSPECIFIED),
          (this.symbol = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeSymbolWithAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          { no: 3, name: "symbol_start_column", kind: "scalar", T: 5 },
          { no: 4, name: "symbol_end_column", kind: "scalar", T: 5 },
          { no: 5, name: "action", kind: "enum", T: v.getEnumType(E$) },
          { no: 6, name: "symbol", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new K0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new K0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new K0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(K0e, e, t)
      }
    },
    E$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.GO_TO_DEFINITION = 1)] = "GO_TO_DEFINITION"),
      (i[(i.GO_TO_IMPLEMENTATION = 2)] = "GO_TO_IMPLEMENTATION"),
      (i[(i.REFERENCES = 3)] = "REFERENCES")
  })(E$ || (E$ = {})),
    v.util.setEnumType(E$, "aiserver.v1.CodeSymbolWithAction.CodeSymbolAction", [
      { no: 0, name: "CODE_SYMBOL_ACTION_UNSPECIFIED" },
      { no: 1, name: "CODE_SYMBOL_ACTION_GO_TO_DEFINITION" },
      { no: 2, name: "CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION" },
      { no: 3, name: "CODE_SYMBOL_ACTION_REFERENCES" },
    ])
  var aVe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"), (i[(i.DEFAULT = 1)] = "DEFAULT")
  })(aVe || (aVe = {})),
    v.util.setEnumType(aVe, "aiserver.v1.ChunkingStrategy", [
      { no: 0, name: "CHUNKING_STRATEGY_UNSPECIFIED" },
      { no: 1, name: "CHUNKING_STRATEGY_DEFAULT" },
    ])
  var ro
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LULEA = 1)] = "LULEA"),
      (i[(i.UMEA = 2)] = "UMEA"),
      (i[(i.NONE = 3)] = "NONE"),
      (i[(i.LLAMA = 4)] = "LLAMA"),
      (i[(i.STARCODER_V1 = 5)] = "STARCODER_V1"),
      (i[(i.GPT_3_5_LOGPROBS = 6)] = "GPT_3_5_LOGPROBS"),
      (i[(i.LULEA_HAIKU = 7)] = "LULEA_HAIKU"),
      (i[(i.COHERE = 8)] = "COHERE"),
      (i[(i.VOYAGE = 9)] = "VOYAGE"),
      (i[(i.VOYAGE_EMBEDS = 10)] = "VOYAGE_EMBEDS"),
      (i[(i.IDENTITY = 11)] = "IDENTITY"),
      (i[(i.ADA_EMBEDS = 12)] = "ADA_EMBEDS")
  })(ro || (ro = {})),
    v.util.setEnumType(ro, "aiserver.v1.RerankerAlgorithm", [
      { no: 0, name: "RERANKER_ALGORITHM_UNSPECIFIED" },
      { no: 1, name: "RERANKER_ALGORITHM_LULEA" },
      { no: 2, name: "RERANKER_ALGORITHM_UMEA" },
      { no: 3, name: "RERANKER_ALGORITHM_NONE" },
      { no: 4, name: "RERANKER_ALGORITHM_LLAMA" },
      { no: 5, name: "RERANKER_ALGORITHM_STARCODER_V1" },
      { no: 6, name: "RERANKER_ALGORITHM_GPT_3_5_LOGPROBS" },
      { no: 7, name: "RERANKER_ALGORITHM_LULEA_HAIKU" },
      { no: 8, name: "RERANKER_ALGORITHM_COHERE" },
      { no: 9, name: "RERANKER_ALGORITHM_VOYAGE" },
      { no: 10, name: "RERANKER_ALGORITHM_VOYAGE_EMBEDS" },
      { no: 11, name: "RERANKER_ALGORITHM_IDENTITY" },
      { no: 12, name: "RERANKER_ALGORITHM_ADA_EMBEDS" },
    ])
  var I$
  ;(function (i) {
    ;(i[(i.RECHUNKER_CHOICE_UNSPECIFIED = 0)] = "RECHUNKER_CHOICE_UNSPECIFIED"),
      (i[(i.RECHUNKER_CHOICE_IDENTITY = 1)] = "RECHUNKER_CHOICE_IDENTITY"),
      (i[(i.RECHUNKER_CHOICE_600_TOKS = 2)] = "RECHUNKER_CHOICE_600_TOKS"),
      (i[(i.RECHUNKER_CHOICE_2400_TOKS = 3)] = "RECHUNKER_CHOICE_2400_TOKS"),
      (i[(i.RECHUNKER_CHOICE_4000_TOKS = 4)] = "RECHUNKER_CHOICE_4000_TOKS")
  })(I$ || (I$ = {})),
    v.util.setEnumType(I$, "aiserver.v1.RechunkerChoice", [
      { no: 0, name: "RECHUNKER_CHOICE_UNSPECIFIED" },
      { no: 1, name: "RECHUNKER_CHOICE_IDENTITY" },
      { no: 2, name: "RECHUNKER_CHOICE_600_TOKS" },
      { no: 3, name: "RECHUNKER_CHOICE_2400_TOKS" },
      { no: 4, name: "RECHUNKER_CHOICE_4000_TOKS" },
    ])
  var upn = class Y0e extends _ {
      constructor(e) {
        super(),
          (this.readmes = []),
          (this.topLevelRelativeWorkspacePaths = []),
          (this.workspaceRootPath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetHighLevelFolderDescriptionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "readmes", kind: "message", T: dpn, repeated: !0 },
          {
            no: 2,
            name: "top_level_relative_workspace_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 4, name: "workspace_root_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Y0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Y0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Y0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Y0e, e, t)
      }
    },
    dpn = class X0e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetHighLevelFolderDescriptionRequest.Readme"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new X0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new X0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new X0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(X0e, e, t)
      }
    },
    fpn = class Q0e extends _ {
      constructor(e) {
        super(), (this.description = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetHighLevelFolderDescriptionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "description", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Q0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Q0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Q0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Q0e, e, t)
      }
    },
    gpn = class Z0e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EnsureIndexCreatedRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new Z0e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Z0e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Z0e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Z0e, e, t)
      }
    },
    ppn = class eCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EnsureIndexCreatedResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new eCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eCe, e, t)
      }
    },
    MB = class tCe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.hashOfNode = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PartialPathItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "hash_of_node", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new tCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tCe, e, t)
      }
    },
    mpn = class iCe extends _ {
      constructor(e) {
        super(),
          (this.rootHash = ""),
          (this.potentialLegacyRepoName = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoInitHandshakeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          { no: 2, name: "root_hash", kind: "scalar", T: 9 },
          { no: 3, name: "potential_legacy_repo_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iCe, e, t)
      }
    },
    bpn = class sCe extends _ {
      constructor(e) {
        super(),
          (this.status = soe.UNSPECIFIED),
          (this.repoName = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoInitHandshakeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(soe) },
          { no: 2, name: "repo_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sCe, e, t)
      }
    },
    soe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.UP_TO_DATE = 1)] = "UP_TO_DATE"),
      (i[(i.OUT_OF_SYNC = 2)] = "OUT_OF_SYNC"),
      (i[(i.FAILURE = 3)] = "FAILURE"),
      (i[(i.EMPTY = 4)] = "EMPTY")
  })(soe || (soe = {})),
    v.util.setEnumType(soe, "aiserver.v1.FastRepoInitHandshakeResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_UP_TO_DATE" },
      { no: 2, name: "STATUS_OUT_OF_SYNC" },
      { no: 3, name: "STATUS_FAILURE" },
      { no: 4, name: "STATUS_EMPTY" },
    ])
  var vpn = class nCe extends _ {
      constructor(e) {
        super(), (this.rootHash = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoInitHandshakeV2Request"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          { no: 2, name: "root_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nCe, e, t)
      }
    },
    ypn = class rCe extends _ {
      constructor(e) {
        super(),
          (this.codebaseId = ""),
          (this.status = noe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryCodebaseInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "codebase_id", kind: "scalar", T: 9 },
          { no: 2, name: "status", kind: "enum", T: v.getEnumType(noe) },
        ])
      }
      static fromBinary(e, t) {
        return new rCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rCe, e, t)
      }
    },
    noe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.UP_TO_DATE = 1)] = "UP_TO_DATE"),
      (i[(i.OUT_OF_SYNC = 2)] = "OUT_OF_SYNC"),
      (i[(i.EMPTY = 3)] = "EMPTY")
  })(noe || (noe = {})),
    v.util.setEnumType(noe, "aiserver.v1.RepositoryCodebaseInfo.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_UP_TO_DATE" },
      { no: 2, name: "STATUS_OUT_OF_SYNC" },
      { no: 3, name: "STATUS_EMPTY" },
    ])
  var wpn = class oCe extends _ {
      constructor(e) {
        super(),
          (this.status = roe.UNSPECIFIED),
          (this.codebases = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoInitHandshakeV2Response"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(roe) },
          { no: 2, name: "codebases", kind: "message", T: ypn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new oCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oCe, e, t)
      }
    },
    roe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.FAILURE = 1)] = "FAILURE"),
      (i[(i.SUCCESS = 2)] = "SUCCESS")
  })(roe || (roe = {})),
    v.util.setEnumType(
      roe,
      "aiserver.v1.FastRepoInitHandshakeV2Response.Status",
      [
        { no: 0, name: "STATUS_UNSPECIFIED" },
        { no: 1, name: "STATUS_FAILURE" },
        { no: 2, name: "STATUS_SUCCESS" },
      ],
    )
  var Cpn = class aCe extends _ {
      constructor(e) {
        super(),
          (this.codebaseId = ""),
          (this.status = ooe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryCodebaseSyncStatus"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "codebase_id", kind: "scalar", T: 9 },
          { no: 2, name: "status", kind: "enum", T: v.getEnumType(ooe) },
        ])
      }
      static fromBinary(e, t) {
        return new aCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aCe, e, t)
      }
    },
    ooe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE")
  })(ooe || (ooe = {})),
    v.util.setEnumType(ooe, "aiserver.v1.RepositoryCodebaseSyncStatus.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
    ])
  var Spn = class lCe extends _ {
      constructor(e) {
        super(), (this.codebases = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoSyncCompleteRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "codebases", kind: "message", T: Cpn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new lCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lCe, e, t)
      }
    },
    xpn = class cCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastRepoSyncCompleteResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new cCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cCe, e, t)
      }
    },
    kpn = class hCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          { no: 2, name: "local_partial_path", kind: "message", T: MB },
        ])
      }
      static fromBinary(e, t) {
        return new hCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hCe, e, t)
      }
    },
    Epn = class uCe extends _ {
      constructor(e) {
        super(), (this.result = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "match", kind: "scalar", T: 8, oneof: "result" },
          { no: 2, name: "mismatch", kind: "message", T: Ipn, oneof: "result" },
        ])
      }
      static fromBinary(e, t) {
        return new uCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uCe, e, t)
      }
    },
    Ipn = class dCe extends _ {
      constructor(e) {
        super(), (this.children = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeResponse.Mismatch"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "children", kind: "message", T: MB, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dCe, e, t)
      }
    },
    dAi = class fCe extends _ {
      constructor(e) {
        super(), (this.orthogonalTransformSeed = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ClientRepositoryInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "orthogonal_transform_seed", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new fCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fCe, e, t)
      }
    },
    Dpn = class gCe extends _ {
      constructor(e) {
        super(), (this.codebaseId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeV2Request"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "client_repository_info", kind: "message", T: dAi },
          { no: 2, name: "codebase_id", kind: "scalar", T: 9 },
          { no: 3, name: "local_partial_path", kind: "message", T: MB },
        ])
      }
      static fromBinary(e, t) {
        return new gCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gCe, e, t)
      }
    },
    Tpn = class pCe extends _ {
      constructor(e) {
        super(), (this.result = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeV2Response"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "match", kind: "scalar", T: 8, oneof: "result" },
          { no: 2, name: "mismatch", kind: "message", T: Ppn, oneof: "result" },
        ])
      }
      static fromBinary(e, t) {
        return new pCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pCe, e, t)
      }
    },
    Ppn = class mCe extends _ {
      constructor(e) {
        super(), (this.children = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncMerkleSubtreeV2Response.Mismatch"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "children", kind: "message", T: MB, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new mCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mCe, e, t)
      }
    },
    Lpn = class bCe extends _ {
      constructor(e) {
        super(),
          (this.partialPath = { case: void 0 }),
          (this.ancestorSpline = []),
          (this.updateType = aoe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          {
            no: 2,
            name: "directory",
            kind: "message",
            T: MB,
            oneof: "partial_path",
          },
          {
            no: 3,
            name: "local_file",
            kind: "message",
            T: Npn,
            oneof: "partial_path",
          },
          {
            no: 4,
            name: "ancestor_spline",
            kind: "message",
            T: MB,
            repeated: !0,
          },
          { no: 5, name: "update_type", kind: "enum", T: v.getEnumType(aoe) },
        ])
      }
      static fromBinary(e, t) {
        return new bCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bCe, e, t)
      }
    },
    aoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ADD = 1)] = "ADD"),
      (i[(i.DELETE = 2)] = "DELETE"),
      (i[(i.MODIFY = 3)] = "MODIFY")
  })(aoe || (aoe = {})),
    v.util.setEnumType(aoe, "aiserver.v1.FastUpdateFileRequest.UpdateType", [
      { no: 0, name: "UPDATE_TYPE_UNSPECIFIED" },
      { no: 1, name: "UPDATE_TYPE_ADD" },
      { no: 2, name: "UPDATE_TYPE_DELETE" },
      { no: 3, name: "UPDATE_TYPE_MODIFY" },
    ])
  var Npn = class vCe extends _ {
      constructor(e) {
        super(),
          (this.hash = ""),
          (this.unencryptedRelativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileRequest.LocalFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "message", T: AC },
          { no: 2, name: "hash", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "unencrypted_relative_workspace_path",
            kind: "scalar",
            T: 9,
          },
        ])
      }
      static fromBinary(e, t) {
        return new vCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vCe, e, t)
      }
    },
    Rpn = class yCe extends _ {
      constructor(e) {
        super(), (this.status = loe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(loe) },
        ])
      }
      static fromBinary(e, t) {
        return new yCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yCe, e, t)
      }
    },
    loe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE")
  })(loe || (loe = {})),
    v.util.setEnumType(loe, "aiserver.v1.FastUpdateFileResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_EXPECTED_FAILURE" },
    ])
  var Apn = class wCe extends _ {
      constructor(e) {
        super(),
          (this.codebaseId = ""),
          (this.partialPath = { case: void 0 }),
          (this.ancestorSpline = []),
          (this.updateType = coe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileV2Request"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "client_repository_info", kind: "message", T: dAi },
          { no: 2, name: "codebase_id", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "directory",
            kind: "message",
            T: MB,
            oneof: "partial_path",
          },
          {
            no: 4,
            name: "local_file",
            kind: "message",
            T: Mpn,
            oneof: "partial_path",
          },
          {
            no: 5,
            name: "ancestor_spline",
            kind: "message",
            T: MB,
            repeated: !0,
          },
          { no: 6, name: "update_type", kind: "enum", T: v.getEnumType(coe) },
        ])
      }
      static fromBinary(e, t) {
        return new wCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wCe, e, t)
      }
    },
    coe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ADD = 1)] = "ADD"),
      (i[(i.DELETE = 2)] = "DELETE"),
      (i[(i.MODIFY = 3)] = "MODIFY")
  })(coe || (coe = {})),
    v.util.setEnumType(coe, "aiserver.v1.FastUpdateFileV2Request.UpdateType", [
      { no: 0, name: "UPDATE_TYPE_UNSPECIFIED" },
      { no: 1, name: "UPDATE_TYPE_ADD" },
      { no: 2, name: "UPDATE_TYPE_DELETE" },
      { no: 3, name: "UPDATE_TYPE_MODIFY" },
    ])
  var Mpn = class CCe extends _ {
      constructor(e) {
        super(),
          (this.hash = ""),
          (this.unencryptedRelativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileV2Request.LocalFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "message", T: AC },
          { no: 2, name: "hash", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "unencrypted_relative_workspace_path",
            kind: "scalar",
            T: 9,
          },
        ])
      }
      static fromBinary(e, t) {
        return new CCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CCe, e, t)
      }
    },
    $pn = class SCe extends _ {
      constructor(e) {
        super(), (this.status = hoe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FastUpdateFileV2Response"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(hoe) },
        ])
      }
      static fromBinary(e, t) {
        return new SCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SCe, e, t)
      }
    },
    hoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE")
  })(hoe || (hoe = {})),
    v.util.setEnumType(hoe, "aiserver.v1.FastUpdateFileV2Response.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_EXPECTED_FAILURE" },
    ])
  var Fpn = class xCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetUploadLimitsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xCe, e, t)
      }
    },
    Opn = class kCe extends _ {
      constructor(e) {
        super(),
          (this.softLimit = 0),
          (this.hardLimit = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetUploadLimitsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "soft_limit", kind: "scalar", T: 5 },
          { no: 2, name: "hard_limit", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new kCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kCe, e, t)
      }
    },
    Bpn = class ECe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetNumFilesToSendRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new ECe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ECe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ECe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ECe, e, t)
      }
    },
    _pn = class ICe extends _ {
      constructor(e) {
        super(), (this.numFiles = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetNumFilesToSendResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "num_files", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new ICe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ICe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ICe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ICe, e, t)
      }
    },
    Upn = class DCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetAvailableChunkingStrategiesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new DCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DCe, e, t)
      }
    },
    Hpn = class TCe extends _ {
      constructor(e) {
        super(), (this.chunkingStrategies = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetAvailableChunkingStrategiesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "chunking_strategies",
            kind: "enum",
            T: v.getEnumType(aVe),
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new TCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TCe, e, t)
      }
    },
    Vpn = class PCe extends _ {
      constructor(e) {
        super(), (this.texts = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEmbeddingsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "texts", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new PCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PCe, e, t)
      }
    },
    Wpn = class LCe extends _ {
      constructor(e) {
        super(), (this.embeddings = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEmbeddingsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "embeddings", kind: "message", T: qpn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new LCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LCe, e, t)
      }
    },
    qpn = class NCe extends _ {
      constructor(e) {
        super(), (this.embedding = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEmbeddingsResponse.Embedding"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "embedding", kind: "scalar", T: 2, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NCe, e, t)
      }
    },
    R0o = class RCe extends _ {
      constructor(e) {
        super(), (this.codebaseId = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AdminRemoveRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "codebase_id", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new RCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RCe, e, t)
      }
    },
    A0o = class ACe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AdminRemoveRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ACe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ACe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ACe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ACe, e, t)
      }
    },
    M0o = class MCe extends _ {
      constructor(e) {
        super(), (this.codebaseId = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "codebase_id", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new MCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MCe, e, t)
      }
    },
    $0o = class $Ce extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SyncRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new $Ce().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Ce().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Ce().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Ce, e, t)
      }
    },
    F0o = class FCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StartUploadRepoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new FCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FCe, e, t)
      }
    },
    O0o = class OCe extends _ {
      constructor(e) {
        super(),
          (this.status = uoe.UNSPECIFIED),
          (this.seenFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StartUploadRepoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(uoe) },
          { no: 2, name: "seen_files", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new OCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OCe, e, t)
      }
    },
    uoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.ALREADY_EXISTS = 3)] = "ALREADY_EXISTS")
  })(uoe || (uoe = {})),
    v.util.setEnumType(uoe, "aiserver.v1.StartUploadRepoResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_ALREADY_EXISTS" },
    ])
  var B0o = class BCe extends _ {
      constructor(e) {
        super(),
          (this.commitSha = ""),
          (this.queueId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UploadFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          { no: 2, name: "file", kind: "message", T: AC },
          { no: 3, name: "commit_sha", kind: "scalar", T: 9 },
          { no: 4, name: "queue_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new BCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BCe, e, t)
      }
    },
    _0o = class _Ce extends _ {
      constructor(e) {
        super(), (this.status = doe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UploadFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(doe) },
        ])
      }
      static fromBinary(e, t) {
        return new _Ce().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Ce().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Ce().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Ce, e, t)
      }
    },
    doe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE"),
      (i[(i.QUEUE_BACKED_UP = 4)] = "QUEUE_BACKED_UP")
  })(doe || (doe = {})),
    v.util.setEnumType(doe, "aiserver.v1.UploadFileResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_EXPECTED_FAILURE" },
      { no: 4, name: "STATUS_QUEUE_BACKED_UP" },
    ])
  var U0o = class UCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FinishUploadRepoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new UCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UCe, e, t)
      }
    },
    H0o = class HCe extends _ {
      constructor(e) {
        super(), (this.status = foe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FinishUploadRepoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(foe) },
        ])
      }
      static fromBinary(e, t) {
        return new HCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HCe, e, t)
      }
    },
    foe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE")
  })(foe || (foe = {})),
    v.util.setEnumType(foe, "aiserver.v1.FinishUploadRepoResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
    ])
  var V0o = class VCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StartUpdateRepoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new VCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VCe, e, t)
      }
    },
    W0o = class WCe extends _ {
      constructor(e) {
        super(), (this.status = goe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StartUpdateRepoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(goe) },
        ])
      }
      static fromBinary(e, t) {
        return new WCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WCe, e, t)
      }
    },
    goe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.NOT_FOUND = 3)] = "NOT_FOUND"),
      (i[(i.ALREADY_SYNCING = 4)] = "ALREADY_SYNCING")
  })(goe || (goe = {})),
    v.util.setEnumType(goe, "aiserver.v1.StartUpdateRepoResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_NOT_FOUND" },
      { no: 4, name: "STATUS_ALREADY_SYNCING" },
    ])
  var q0o = class qCe extends _ {
      constructor(e) {
        super(),
          (this.commitSha = ""),
          (this.queueId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UpdateFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
          { no: 2, name: "added_file", kind: "message", T: AC },
          { no: 3, name: "deleted_file_path", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "commit_sha", kind: "scalar", T: 9 },
          { no: 5, name: "queue_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new qCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qCe, e, t)
      }
    },
    j0o = class jCe extends _ {
      constructor(e) {
        super(), (this.status = poe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UpdateFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(poe) },
        ])
      }
      static fromBinary(e, t) {
        return new jCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jCe, e, t)
      }
    },
    poe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE"),
      (i[(i.QUEUE_BACKED_UP = 4)] = "QUEUE_BACKED_UP")
  })(poe || (poe = {})),
    v.util.setEnumType(poe, "aiserver.v1.UpdateFileResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_EXPECTED_FAILURE" },
      { no: 4, name: "STATUS_QUEUE_BACKED_UP" },
    ])
  var z0o = class zCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FinishUpdateRepoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new zCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zCe, e, t)
      }
    },
    G0o = class GCe extends _ {
      constructor(e) {
        super(), (this.status = moe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FinishUpdateRepoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(moe) },
        ])
      }
      static fromBinary(e, t) {
        return new GCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GCe, e, t)
      }
    },
    moe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE")
  })(moe || (moe = {})),
    v.util.setEnumType(moe, "aiserver.v1.FinishUpdateRepoResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
    ])
  var J0o = class JCe extends _ {
      constructor(e) {
        super(), (this.requests = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BatchRepositoryStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "requests", kind: "message", T: Jpn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new JCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JCe, e, t)
      }
    },
    K0o = class KCe extends _ {
      constructor(e) {
        super(), (this.responses = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BatchRepositoryStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "responses", kind: "message", T: Kpn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new KCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KCe, e, t)
      }
    },
    Y0o = class YCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UnsubscribeRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new YCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YCe, e, t)
      }
    },
    X0o = class XCe extends _ {
      constructor(e) {
        super(), (this.status = boe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UnsubscribeRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(boe) },
        ])
      }
      static fromBinary(e, t) {
        return new XCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XCe, e, t)
      }
    },
    boe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NOT_FOUND = 1)] = "NOT_FOUND"),
      (i[(i.NOT_SUBSCRIBED = 2)] = "NOT_SUBSCRIBED"),
      (i[(i.SUCCESS = 3)] = "SUCCESS")
  })(boe || (boe = {})),
    v.util.setEnumType(boe, "aiserver.v1.UnsubscribeRepositoryResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_NOT_FOUND" },
      { no: 2, name: "STATUS_NOT_SUBSCRIBED" },
      { no: 3, name: "STATUS_SUCCESS" },
    ])
  var Q0o = class QCe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogoutRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new QCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QCe, e, t)
      }
    },
    Z0o = class ZCe extends _ {
      constructor(e) {
        super(), (this.status = voe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogoutResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(voe) },
        ])
      }
      static fromBinary(e, t) {
        return new ZCe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZCe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZCe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZCe, e, t)
      }
    },
    voe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.NOT_LOGGED_IN = 3)] = "NOT_LOGGED_IN")
  })(voe || (voe = {})),
    v.util.setEnumType(voe, "aiserver.v1.LogoutResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_NOT_LOGGED_IN" },
    ])
  var fAi = class eSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RemoveRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new eSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eSe, e, t)
      }
    },
    jpn = class tSe extends _ {
      constructor(e) {
        super(), (this.status = yoe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RemoveRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(yoe) },
        ])
      }
      static fromBinary(e, t) {
        return new tSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tSe, e, t)
      }
    },
    yoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NOT_FOUND = 1)] = "NOT_FOUND"),
      (i[(i.NOT_AUTHORIZED = 2)] = "NOT_AUTHORIZED"),
      (i[(i.STARTED = 3)] = "STARTED"),
      (i[(i.SUCCESS = 4)] = "SUCCESS")
  })(yoe || (yoe = {})),
    v.util.setEnumType(yoe, "aiserver.v1.RemoveRepositoryResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_NOT_FOUND" },
      { no: 2, name: "STATUS_NOT_AUTHORIZED" },
      { no: 3, name: "STATUS_STARTED" },
      { no: 4, name: "STATUS_SUCCESS" },
    ])
  var eCo = class iSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SubscribeRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new iSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iSe, e, t)
      }
    },
    tCo = class sSe extends _ {
      constructor(e) {
        super(), (this.status = woe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SubscribeRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(woe) },
        ])
      }
      static fromBinary(e, t) {
        return new sSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sSe, e, t)
      }
    },
    woe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NOT_FOUND = 1)] = "NOT_FOUND"),
      (i[(i.NOT_AUTHORIZED = 2)] = "NOT_AUTHORIZED"),
      (i[(i.ALREADY_SUBSCRIBED = 3)] = "ALREADY_SUBSCRIBED"),
      (i[(i.SUCCESS = 4)] = "SUCCESS")
  })(woe || (woe = {})),
    v.util.setEnumType(woe, "aiserver.v1.SubscribeRepositoryResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_NOT_FOUND" },
      { no: 2, name: "STATUS_NOT_AUTHORIZED" },
      { no: 3, name: "STATUS_ALREADY_SUBSCRIBED" },
      { no: 4, name: "STATUS_SUCCESS" },
    ])
  var gAi = class nSe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.topK = 0),
          (this.rerank = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "repository", kind: "message", T: rl },
          { no: 3, name: "top_k", kind: "scalar", T: 5 },
          { no: 4, name: "model_details", kind: "message", T: zr },
          { no: 5, name: "rerank", kind: "scalar", T: 8 },
          { no: 6, name: "context_cache_request", kind: "scalar", T: 8, opt: !0 },
          { no: 7, name: "glob_filter", kind: "scalar", T: 9, opt: !0 },
          { no: 8, name: "not_glob_filter", kind: "scalar", T: 9, opt: !0 },
          { no: 9, name: "race_n_requests", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new nSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nSe, e, t)
      }
    },
    im = class rSe extends _ {
      constructor(e) {
        super(), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_block", kind: "message", T: ed },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new rSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rSe, e, t)
      }
    },
    WSt = class oSe extends _ {
      constructor(e) {
        super(), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "message", T: AC },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new oSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oSe, e, t)
      }
    },
    pAi = class aSe extends _ {
      constructor(e) {
        super(), (this.codeResults = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_results", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new aSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aSe, e, t)
      }
    },
    mAi = class lSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemSearchRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request", kind: "message", T: gAi },
        ])
      }
      static fromBinary(e, t) {
        return new lSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lSe, e, t)
      }
    },
    bAi = class cSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeResultWithClassificationInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_result", kind: "message", T: im },
          {
            no: 2,
            name: "line_number_classification",
            kind: "message",
            T: zpn,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new cSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cSe, e, t)
      }
    },
    zpn = class hSe extends _ {
      constructor(e) {
        super(),
          (this.queryComputedFor = ""),
          (this.matchedStrings = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.CodeResultWithClassificationInfo.LineNumberClassification"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "detailed_line", kind: "message", T: ASt },
          { no: 2, name: "query_computed_for", kind: "scalar", T: 9 },
          { no: 3, name: "matched_strings", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "highlight_range", kind: "message", T: Hu },
        ])
      }
      static fromBinary(e, t) {
        return new hSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hSe, e, t)
      }
    },
    vAi = class uSe extends _ {
      constructor(e) {
        super(), (this.codeResults = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemSearchResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "response", kind: "message", T: pAi },
          { no: 2, name: "metadata", kind: "message", T: Gpn, opt: !0 },
          { no: 3, name: "code_results", kind: "message", T: bAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new uSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uSe, e, t)
      }
    },
    Gpn = class dSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemSearchResponse.SemSearchMetadata"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query_embedding_model", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "server_side_latency_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 3, name: "embed_latency_ms", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "knn_latency_ms", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dSe, e, t)
      }
    },
    iCo = class fSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LoginRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new fSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fSe, e, t)
      }
    },
    sCo = class gSe extends _ {
      constructor(e) {
        super(), (this.loginUrl = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LoginResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "login_url", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gSe, e, t)
      }
    },
    nCo = class pSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsLoggedInRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new pSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pSe, e, t)
      }
    },
    rCo = class mSe extends _ {
      constructor(e) {
        super(), (this.loggedIn = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsLoggedInResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "logged_in", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new mSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mSe, e, t)
      }
    },
    oCo = class bSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PollLoginRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new bSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bSe, e, t)
      }
    },
    aCo = class vSe extends _ {
      constructor(e) {
        super(), (this.status = Coe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PollLoginResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(Coe) },
        ])
      }
      static fromBinary(e, t) {
        return new vSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vSe, e, t)
      }
    },
    Coe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LOGGED_IN = 1)] = "LOGGED_IN"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.CHECKING = 3)] = "CHECKING")
  })(Coe || (Coe = {})),
    v.util.setEnumType(Coe, "aiserver.v1.PollLoginResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_LOGGED_IN" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_CHECKING" },
    ])
  var lCo = class ySe extends _ {
      constructor(e) {
        super(), (this.scopes = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UpgradeScopeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "scopes", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ySe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ySe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ySe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ySe, e, t)
      }
    },
    cCo = class wSe extends _ {
      constructor(e) {
        super(), (this.status = Soe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UpgradeScopeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(Soe) },
        ])
      }
      static fromBinary(e, t) {
        return new wSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wSe, e, t)
      }
    },
    Soe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE")
  })(Soe || (Soe = {})),
    v.util.setEnumType(Soe, "aiserver.v1.UpgradeScopeResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
    ])
  var hCo = class CSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoriesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new CSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CSe, e, t)
      }
    },
    uCo = class SSe extends _ {
      constructor(e) {
        super(), (this.repositories = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoriesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repositories", kind: "message", T: rl, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SSe, e, t)
      }
    },
    dCo = class xSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UploadRepositoryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new xSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xSe, e, t)
      }
    },
    fCo = class kSe extends _ {
      constructor(e) {
        super(), (this.status = xoe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UploadRepositoryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(xoe) },
        ])
      }
      static fromBinary(e, t) {
        return new kSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kSe, e, t)
      }
    },
    xoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SUCCESS = 1)] = "SUCCESS"),
      (i[(i.FAILURE = 2)] = "FAILURE"),
      (i[(i.AUTH_TOKEN_BAD_PERMISSIONS = 3)] = "AUTH_TOKEN_BAD_PERMISSIONS"),
      (i[(i.ALREADY_EXISTS = 4)] = "ALREADY_EXISTS")
  })(xoe || (xoe = {})),
    v.util.setEnumType(xoe, "aiserver.v1.UploadRepositoryResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_SUCCESS" },
      { no: 2, name: "STATUS_FAILURE" },
      { no: 3, name: "STATUS_AUTH_TOKEN_BAD_PERMISSIONS" },
      { no: 4, name: "STATUS_ALREADY_EXISTS" },
    ])
  var Jpn = class ESe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository", kind: "message", T: rl },
        ])
      }
      static fromBinary(e, t) {
        return new ESe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ESe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ESe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ESe, e, t)
      }
    },
    Kpn = class ISe extends _ {
      constructor(e) {
        super(), (this.status = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "not_found", kind: "message", T: Ypn, oneof: "status" },
          { no: 2, name: "uploading", kind: "message", T: Qpn, oneof: "status" },
          { no: 3, name: "syncing", kind: "message", T: Zpn, oneof: "status" },
          { no: 4, name: "synced", kind: "message", T: emn, oneof: "status" },
          {
            no: 5,
            name: "not_subscribed",
            kind: "message",
            T: Xpn,
            oneof: "status",
          },
          { no: 6, name: "too_big", kind: "message", T: tmn, oneof: "status" },
          {
            no: 7,
            name: "auth_token_not_found",
            kind: "message",
            T: imn,
            oneof: "status",
          },
          {
            no: 8,
            name: "auth_token_not_authorized",
            kind: "message",
            T: smn,
            oneof: "status",
          },
          {
            no: 10,
            name: "error_uploading",
            kind: "message",
            T: yAi,
            oneof: "status",
          },
          {
            no: 11,
            name: "error_syncing",
            kind: "message",
            T: yAi,
            oneof: "status",
          },
          { no: 9, name: "is_owner", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ISe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ISe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ISe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ISe, e, t)
      }
    },
    Ypn = class DSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.NotFound"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new DSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DSe, e, t)
      }
    },
    Xpn = class TSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.NotSubscribed"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new TSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TSe, e, t)
      }
    },
    Qpn = class PSe extends _ {
      constructor(e) {
        super(), (this.progress = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.Uploading"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "progress", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new PSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PSe, e, t)
      }
    },
    Zpn = class LSe extends _ {
      constructor(e) {
        super(),
          (this.branch = ""),
          (this.oldCommit = ""),
          (this.newCommit = ""),
          (this.progress = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.Syncing"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "branch", kind: "scalar", T: 9 },
          { no: 2, name: "old_commit", kind: "scalar", T: 9 },
          { no: 3, name: "new_commit", kind: "scalar", T: 9 },
          { no: 4, name: "progress", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new LSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LSe, e, t)
      }
    },
    emn = class NSe extends _ {
      constructor(e) {
        super(),
          (this.branch = ""),
          (this.commit = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.Synced"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "branch", kind: "scalar", T: 9 },
          { no: 2, name: "commit", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new NSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NSe, e, t)
      }
    },
    tmn = class RSe extends _ {
      constructor(e) {
        super(), (this.maxSize = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.TooBig"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "max_size", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new RSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RSe, e, t)
      }
    },
    imn = class ASe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.AuthTokenNotFound"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ASe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ASe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ASe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ASe, e, t)
      }
    },
    smn = class MSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RepositoryStatusResponse.AuthTokenNotAuthorized"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new MSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MSe, e, t)
      }
    },
    yAi = class $Se extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryStatusResponse.EmptyMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new $Se().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Se().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Se().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Se, e, t)
      }
    },
    rl = class FSe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.remoteUrls = []),
          (this.remoteNames = []),
          (this.repoName = ""),
          (this.repoOwner = ""),
          (this.isTracked = !1),
          (this.isLocal = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RepositoryInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "remote_urls", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "remote_names", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "repo_name", kind: "scalar", T: 9 },
          { no: 5, name: "repo_owner", kind: "scalar", T: 9 },
          { no: 6, name: "is_tracked", kind: "scalar", T: 8 },
          { no: 7, name: "is_local", kind: "scalar", T: 8 },
          { no: 8, name: "num_files", kind: "scalar", T: 5, opt: !0 },
          {
            no: 9,
            name: "orthogonal_transform_seed",
            kind: "scalar",
            T: 1,
            opt: !0,
          },
          {
            no: 10,
            name: "preferred_embedding_model",
            kind: "enum",
            T: v.getEnumType(x$),
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new FSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FSe, e, t)
      }
    },
    gCo = class OSe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.topK = 0),
          (this.topReflectionsK = 0),
          (this.indexIds = []),
          (this.useModelOnFiles = !1),
          (this.useReflections = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchRepositoryDeepContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "top_k", kind: "scalar", T: 5 },
          { no: 3, name: "top_reflections_k", kind: "scalar", T: 5 },
          { no: 4, name: "index_ids", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "use_model_on_files", kind: "scalar", T: 8 },
          { no: 6, name: "use_reflections", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new OSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OSe, e, t)
      }
    },
    nmn = class BSe extends _ {
      constructor(e) {
        super(), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NodeResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "node", kind: "message", T: aAi },
          { no: 2, name: "file", kind: "message", T: AC },
          { no: 3, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new BSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BSe, e, t)
      }
    },
    rmn = class _Se extends _ {
      constructor(e) {
        super(), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReflectionResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "reflection", kind: "message", T: lpn },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new _Se().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Se().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Se().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Se, e, t)
      }
    },
    omn = class USe extends _ {
      constructor(e) {
        super(),
          (this.topNodes = []),
          (this.reflections = []),
          (this.indexId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchRepositoryDeepContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "top_nodes", kind: "message", T: nmn, repeated: !0 },
          { no: 2, name: "reflections", kind: "message", T: rmn, repeated: !0 },
          { no: 3, name: "index_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new USe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new USe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new USe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(USe, e, t)
      }
    },
    amn = class HSe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.codeResults = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLineNumberClassificationsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "code_results", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new HSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HSe, e, t)
      }
    },
    lmn = class VSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLineNumberClassificationsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "classified_result", kind: "message", T: bAi },
        ])
      }
      static fromBinary(e, t) {
        return new VSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VSe, e, t)
      }
    },
    jt
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.READ_SEMSEARCH_FILES = 1)] = "READ_SEMSEARCH_FILES"),
      (i[(i.READ_FILE_FOR_IMPORTS = 2)] = "READ_FILE_FOR_IMPORTS"),
      (i[(i.RIPGREP_SEARCH = 3)] = "RIPGREP_SEARCH"),
      (i[(i.RUN_TERMINAL_COMMAND = 4)] = "RUN_TERMINAL_COMMAND"),
      (i[(i.READ_FILE = 5)] = "READ_FILE"),
      (i[(i.LIST_DIR = 6)] = "LIST_DIR"),
      (i[(i.EDIT_FILE = 7)] = "EDIT_FILE"),
      (i[(i.FILE_SEARCH = 8)] = "FILE_SEARCH"),
      (i[(i.SEMANTIC_SEARCH_FULL = 9)] = "SEMANTIC_SEARCH_FULL"),
      (i[(i.CREATE_FILE = 10)] = "CREATE_FILE"),
      (i[(i.DELETE_FILE = 11)] = "DELETE_FILE"),
      (i[(i.REAPPLY = 12)] = "REAPPLY"),
      (i[(i.GET_RELATED_FILES = 13)] = "GET_RELATED_FILES"),
      (i[(i.PARALLEL_APPLY = 14)] = "PARALLEL_APPLY"),
      (i[(i.RUN_TERMINAL_COMMAND_V2 = 15)] = "RUN_TERMINAL_COMMAND_V2"),
      (i[(i.FETCH_RULES = 16)] = "FETCH_RULES"),
      (i[(i.PLANNER = 17)] = "PLANNER"),
      (i[(i.WEB_SEARCH = 18)] = "WEB_SEARCH"),
      (i[(i.MCP = 19)] = "MCP"),
      (i[(i.WEB_VIEWER = 20)] = "WEB_VIEWER"),
      (i[(i.DIFF_HISTORY = 21)] = "DIFF_HISTORY")
  })(jt || (jt = {})),
    v.util.setEnumType(jt, "aiserver.v1.ClientSideToolV2", [
      { no: 0, name: "CLIENT_SIDE_TOOL_V2_UNSPECIFIED" },
      { no: 1, name: "CLIENT_SIDE_TOOL_V2_READ_SEMSEARCH_FILES" },
      { no: 2, name: "CLIENT_SIDE_TOOL_V2_READ_FILE_FOR_IMPORTS" },
      { no: 3, name: "CLIENT_SIDE_TOOL_V2_RIPGREP_SEARCH" },
      { no: 4, name: "CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND" },
      { no: 5, name: "CLIENT_SIDE_TOOL_V2_READ_FILE" },
      { no: 6, name: "CLIENT_SIDE_TOOL_V2_LIST_DIR" },
      { no: 7, name: "CLIENT_SIDE_TOOL_V2_EDIT_FILE" },
      { no: 8, name: "CLIENT_SIDE_TOOL_V2_FILE_SEARCH" },
      { no: 9, name: "CLIENT_SIDE_TOOL_V2_SEMANTIC_SEARCH_FULL" },
      { no: 10, name: "CLIENT_SIDE_TOOL_V2_CREATE_FILE" },
      { no: 11, name: "CLIENT_SIDE_TOOL_V2_DELETE_FILE" },
      { no: 12, name: "CLIENT_SIDE_TOOL_V2_REAPPLY" },
      { no: 13, name: "CLIENT_SIDE_TOOL_V2_GET_RELATED_FILES" },
      { no: 14, name: "CLIENT_SIDE_TOOL_V2_PARALLEL_APPLY" },
      { no: 15, name: "CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND_V2" },
      { no: 16, name: "CLIENT_SIDE_TOOL_V2_FETCH_RULES" },
      { no: 17, name: "CLIENT_SIDE_TOOL_V2_PLANNER" },
      { no: 18, name: "CLIENT_SIDE_TOOL_V2_WEB_SEARCH" },
      { no: 19, name: "CLIENT_SIDE_TOOL_V2_MCP" },
      { no: 20, name: "CLIENT_SIDE_TOOL_V2_WEB_VIEWER" },
      { no: 21, name: "CLIENT_SIDE_TOOL_V2_DIFF_HISTORY" },
    ])
  var D$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.BASH = 1)] = "BASH"),
      (i[(i.POWERSHELL = 2)] = "POWERSHELL")
  })(D$ || (D$ = {})),
    v.util.setEnumType(D$, "aiserver.v1.ShellType", [
      { no: 0, name: "SHELL_TYPE_UNSPECIFIED" },
      { no: 1, name: "SHELL_TYPE_BASH" },
      { no: 2, name: "SHELL_TYPE_POWERSHELL" },
    ])
  var xf
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SEARCH = 1)] = "SEARCH"),
      (i[(i.READ_CHUNK = 2)] = "READ_CHUNK"),
      (i[(i.GOTODEF = 3)] = "GOTODEF"),
      (i[(i.EDIT = 4)] = "EDIT"),
      (i[(i.UNDO_EDIT = 5)] = "UNDO_EDIT"),
      (i[(i.END = 6)] = "END"),
      (i[(i.NEW_FILE = 7)] = "NEW_FILE"),
      (i[(i.ADD_TEST = 8)] = "ADD_TEST"),
      (i[(i.RUN_TEST = 9)] = "RUN_TEST"),
      (i[(i.DELETE_TEST = 10)] = "DELETE_TEST"),
      (i[(i.SAVE_FILE = 11)] = "SAVE_FILE"),
      (i[(i.GET_TESTS = 12)] = "GET_TESTS"),
      (i[(i.GET_SYMBOLS = 13)] = "GET_SYMBOLS"),
      (i[(i.SEMANTIC_SEARCH = 14)] = "SEMANTIC_SEARCH"),
      (i[(i.GET_PROJECT_STRUCTURE = 15)] = "GET_PROJECT_STRUCTURE"),
      (i[(i.CREATE_RM_FILES = 16)] = "CREATE_RM_FILES"),
      (i[(i.RUN_TERMINAL_COMMANDS = 17)] = "RUN_TERMINAL_COMMANDS"),
      (i[(i.NEW_EDIT = 18)] = "NEW_EDIT"),
      (i[(i.READ_WITH_LINTER = 19)] = "READ_WITH_LINTER")
  })(xf || (xf = {})),
    v.util.setEnumType(xf, "aiserver.v1.BuiltinTool", [
      { no: 0, name: "BUILTIN_TOOL_UNSPECIFIED" },
      { no: 1, name: "BUILTIN_TOOL_SEARCH" },
      { no: 2, name: "BUILTIN_TOOL_READ_CHUNK" },
      { no: 3, name: "BUILTIN_TOOL_GOTODEF" },
      { no: 4, name: "BUILTIN_TOOL_EDIT" },
      { no: 5, name: "BUILTIN_TOOL_UNDO_EDIT" },
      { no: 6, name: "BUILTIN_TOOL_END" },
      { no: 7, name: "BUILTIN_TOOL_NEW_FILE" },
      { no: 8, name: "BUILTIN_TOOL_ADD_TEST" },
      { no: 9, name: "BUILTIN_TOOL_RUN_TEST" },
      { no: 10, name: "BUILTIN_TOOL_DELETE_TEST" },
      { no: 11, name: "BUILTIN_TOOL_SAVE_FILE" },
      { no: 12, name: "BUILTIN_TOOL_GET_TESTS" },
      { no: 13, name: "BUILTIN_TOOL_GET_SYMBOLS" },
      { no: 14, name: "BUILTIN_TOOL_SEMANTIC_SEARCH" },
      { no: 15, name: "BUILTIN_TOOL_GET_PROJECT_STRUCTURE" },
      { no: 16, name: "BUILTIN_TOOL_CREATE_RM_FILES" },
      { no: 17, name: "BUILTIN_TOOL_RUN_TERMINAL_COMMANDS" },
      { no: 18, name: "BUILTIN_TOOL_NEW_EDIT" },
      { no: 19, name: "BUILTIN_TOOL_READ_WITH_LINTER" },
    ])
  var BT
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.EXECUTION_COMPLETED = 1)] = "EXECUTION_COMPLETED"),
      (i[(i.EXECUTION_ABORTED = 2)] = "EXECUTION_ABORTED"),
      (i[(i.EXECUTION_FAILED = 3)] = "EXECUTION_FAILED"),
      (i[(i.ERROR_OCCURRED_CHECKING_REASON = 4)] =
        "ERROR_OCCURRED_CHECKING_REASON")
  })(BT || (BT = {})),
    v.util.setEnumType(BT, "aiserver.v1.RunTerminalCommandEndedReason", [
      { no: 0, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_UNSPECIFIED" },
      { no: 1, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_COMPLETED" },
      { no: 2, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_ABORTED" },
      { no: 3, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_FAILED" },
      {
        no: 4,
        name: "RUN_TERMINAL_COMMAND_ENDED_REASON_ERROR_OCCURRED_CHECKING_REASON",
      },
    ])
  var wAi = class WSe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReapplyParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new WSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WSe, e, t)
      }
    },
    qSt = class qSe extends _ {
      constructor(e) {
        super(),
          (this.isApplied = !1),
          (this.applyFailed = !1),
          (this.linterErrors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReapplyResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff", kind: "message", T: nG },
          { no: 2, name: "is_applied", kind: "scalar", T: 8 },
          { no: 3, name: "apply_failed", kind: "scalar", T: 8 },
          { no: 4, name: "linter_errors", kind: "message", T: k$, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new qSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qSe, e, t)
      }
    },
    CAi = class jSe extends _ {
      constructor(e) {
        super(), (this.ruleNames = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FetchRulesParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "rule_names", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new jSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jSe, e, t)
      }
    },
    jSt = class zSe extends _ {
      constructor(e) {
        super(), (this.rules = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FetchRulesResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "rules", kind: "message", T: iG, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new zSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zSe, e, t)
      }
    },
    SAi = class GSe extends _ {
      constructor(e) {
        super(), (this.instruction = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PlannerParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instruction", kind: "scalar", T: 9 },
          { no: 2, name: "plan", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new GSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GSe, e, t)
      }
    },
    lVe = class JSe extends _ {
      constructor(e) {
        super(), (this.plan = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PlannerResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "plan", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new JSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JSe, e, t)
      }
    },
    xAi = class KSe extends _ {
      constructor(e) {
        super(), (this.targetFiles = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelatedFilesParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new KSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KSe, e, t)
      }
    },
    kAi = class YSe extends _ {
      constructor(e) {
        super(), (this.files = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelatedFilesResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: cmn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YSe, e, t)
      }
    },
    cmn = class XSe extends _ {
      constructor(e) {
        super(), (this.uri = ""), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelatedFilesResult.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9 },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new XSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XSe, e, t)
      }
    },
    hmn = class QSe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReapplyStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new QSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QSe, e, t)
      }
    },
    pCo = class ZSe extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.explanation = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandArguments"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "explanation", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ZSe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZSe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZSe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZSe, e, t)
      }
    },
    mCo = class e1e extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.targetDirectories = []),
          (this.explanation = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchArguments"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "target_directories",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 3, name: "explanation", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new e1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new e1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new e1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(e1e, e, t)
      }
    },
    cVe = class t1e extends _ {
      constructor(e) {
        super(),
          (this.clientVisibleErrorMessage = ""),
          (this.modelVisibleErrorMessage = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolResultError"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "client_visible_error_message", kind: "scalar", T: 9 },
          { no: 2, name: "model_visible_error_message", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "actual_error_message_only_send_from_client_to_server_never_the_other_way_around_because_that_may_be_a_security_risk",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new t1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new t1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new t1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(t1e, e, t)
      }
    },
    EAi = class i1e extends _ {
      constructor(e) {
        super(),
          (this.tool = jt.UNSPECIFIED),
          (this.params = { case: void 0 }),
          (this.toolCallId = ""),
          (this.name = ""),
          (this.rawArgs = ""),
          (this.isStreaming = !1),
          (this.isLastMessage = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ClientSideToolV2Call"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(jt) },
          {
            no: 2,
            name: "read_semsearch_files_params",
            kind: "message",
            T: XSt,
            oneof: "params",
          },
          {
            no: 4,
            name: "read_file_for_imports_params",
            kind: "message",
            T: ZSt,
            oneof: "params",
          },
          {
            no: 5,
            name: "ripgrep_search_params",
            kind: "message",
            T: LAi,
            oneof: "params",
          },
          {
            no: 7,
            name: "run_terminal_command_params",
            kind: "message",
            T: WAi,
            oneof: "params",
          },
          {
            no: 8,
            name: "read_file_params",
            kind: "message",
            T: PAi,
            oneof: "params",
          },
          {
            no: 12,
            name: "list_dir_params",
            kind: "message",
            T: TAi,
            oneof: "params",
          },
          {
            no: 13,
            name: "edit_file_params",
            kind: "message",
            T: IAi,
            oneof: "params",
          },
          {
            no: 16,
            name: "file_search_params",
            kind: "message",
            T: DAi,
            oneof: "params",
          },
          {
            no: 17,
            name: "semantic_search_full_params",
            kind: "message",
            T: HAi,
            oneof: "params",
          },
          {
            no: 18,
            name: "create_file_params",
            kind: "message",
            T: e1t,
            oneof: "params",
          },
          {
            no: 19,
            name: "delete_file_params",
            kind: "message",
            T: t1t,
            oneof: "params",
          },
          {
            no: 20,
            name: "reapply_params",
            kind: "message",
            T: wAi,
            oneof: "params",
          },
          {
            no: 21,
            name: "get_related_files_params",
            kind: "message",
            T: xAi,
            oneof: "params",
          },
          {
            no: 22,
            name: "parallel_apply_params",
            kind: "message",
            T: fMi,
            oneof: "params",
          },
          {
            no: 23,
            name: "run_terminal_command_v2_params",
            kind: "message",
            T: gMi,
            oneof: "params",
          },
          {
            no: 24,
            name: "fetch_rules_params",
            kind: "message",
            T: CAi,
            oneof: "params",
          },
          {
            no: 25,
            name: "planner_params",
            kind: "message",
            T: SAi,
            oneof: "params",
          },
          {
            no: 26,
            name: "web_search_params",
            kind: "message",
            T: pMi,
            oneof: "params",
          },
          {
            no: 27,
            name: "mcp_params",
            kind: "message",
            T: bMi,
            oneof: "params",
          },
          {
            no: 28,
            name: "web_viewer_params",
            kind: "message",
            T: mMi,
            oneof: "params",
          },
          {
            no: 29,
            name: "diff_history_params",
            kind: "message",
            T: vMi,
            oneof: "params",
          },
          { no: 3, name: "tool_call_id", kind: "scalar", T: 9 },
          { no: 6, name: "timeout_ms", kind: "scalar", T: 1, opt: !0 },
          { no: 9, name: "name", kind: "scalar", T: 9 },
          { no: 10, name: "raw_args", kind: "scalar", T: 9 },
          { no: 14, name: "is_streaming", kind: "scalar", T: 8 },
          { no: 15, name: "is_last_message", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new i1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new i1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new i1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(i1e, e, t)
      }
    },
    Zc = class s1e extends _ {
      constructor(e) {
        super(),
          (this.tool = jt.UNSPECIFIED),
          (this.result = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ClientSideToolV2Result"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(jt) },
          {
            no: 2,
            name: "read_semsearch_files_result",
            kind: "message",
            T: uVe,
            oneof: "result",
          },
          {
            no: 3,
            name: "read_file_for_imports_result",
            kind: "message",
            T: VAi,
            oneof: "result",
          },
          {
            no: 4,
            name: "ripgrep_search_result",
            kind: "message",
            T: GSt,
            oneof: "result",
          },
          {
            no: 5,
            name: "run_terminal_command_result",
            kind: "message",
            T: i1t,
            oneof: "result",
          },
          {
            no: 6,
            name: "read_file_result",
            kind: "message",
            T: hVe,
            oneof: "result",
          },
          {
            no: 9,
            name: "list_dir_result",
            kind: "message",
            T: Ioe,
            oneof: "result",
          },
          {
            no: 10,
            name: "edit_file_result",
            kind: "message",
            T: koe,
            oneof: "result",
          },
          {
            no: 11,
            name: "file_search_result",
            kind: "message",
            T: zSt,
            oneof: "result",
          },
          {
            no: 18,
            name: "semantic_search_full_result",
            kind: "message",
            T: QSt,
            oneof: "result",
          },
          {
            no: 19,
            name: "create_file_result",
            kind: "message",
            T: Doe,
            oneof: "result",
          },
          {
            no: 20,
            name: "delete_file_result",
            kind: "message",
            T: X9,
            oneof: "result",
          },
          {
            no: 21,
            name: "reapply_result",
            kind: "message",
            T: qSt,
            oneof: "result",
          },
          {
            no: 22,
            name: "get_related_files_result",
            kind: "message",
            T: kAi,
            oneof: "result",
          },
          {
            no: 23,
            name: "parallel_apply_result",
            kind: "message",
            T: l1t,
            oneof: "result",
          },
          {
            no: 24,
            name: "run_terminal_command_v2_result",
            kind: "message",
            T: rG,
            oneof: "result",
          },
          {
            no: 25,
            name: "fetch_rules_result",
            kind: "message",
            T: jSt,
            oneof: "result",
          },
          {
            no: 26,
            name: "planner_result",
            kind: "message",
            T: lVe,
            oneof: "result",
          },
          {
            no: 27,
            name: "web_search_result",
            kind: "message",
            T: c1t,
            oneof: "result",
          },
          {
            no: 28,
            name: "mcp_result",
            kind: "message",
            T: d1t,
            oneof: "result",
          },
          {
            no: 29,
            name: "web_viewer_result",
            kind: "message",
            T: h1t,
            oneof: "result",
          },
          {
            no: 30,
            name: "diff_history_result",
            kind: "message",
            T: f1t,
            oneof: "result",
          },
          { no: 8, name: "error", kind: "message", T: cVe, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new s1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new s1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new s1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(s1e, e, t)
      }
    },
    umn = class n1e extends _ {
      constructor(e) {
        super(),
          (this.tool = jt.UNSPECIFIED),
          (this.toolCallId = ""),
          (this.name = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamedBackPartialToolCall"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(jt) },
          { no: 2, name: "tool_call_id", kind: "scalar", T: 9 },
          { no: 3, name: "name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new n1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new n1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new n1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(n1e, e, t)
      }
    },
    dmn = class r1e extends _ {
      constructor(e) {
        super(),
          (this.tool = jt.UNSPECIFIED),
          (this.toolCallId = ""),
          (this.params = { case: void 0 }),
          (this.name = ""),
          (this.rawArgs = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamedBackToolCall"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(jt) },
          { no: 2, name: "tool_call_id", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "read_semsearch_files_stream",
            kind: "message",
            T: Nmn,
            oneof: "params",
          },
          {
            no: 4,
            name: "read_file_for_imports_stream",
            kind: "message",
            T: Mmn,
            oneof: "params",
          },
          {
            no: 5,
            name: "ripgrep_search_stream",
            kind: "message",
            T: Lmn,
            oneof: "params",
          },
          {
            no: 6,
            name: "run_terminal_command_stream",
            kind: "message",
            T: Bmn,
            oneof: "params",
          },
          {
            no: 7,
            name: "read_file_stream",
            kind: "message",
            T: ymn,
            oneof: "params",
          },
          {
            no: 12,
            name: "list_dir_stream",
            kind: "message",
            T: vmn,
            oneof: "params",
          },
          {
            no: 13,
            name: "edit_file_stream",
            kind: "message",
            T: gmn,
            oneof: "params",
          },
          {
            no: 14,
            name: "file_search_stream",
            kind: "message",
            T: pmn,
            oneof: "params",
          },
          {
            no: 19,
            name: "semantic_search_full_stream",
            kind: "message",
            T: Amn,
            oneof: "params",
          },
          {
            no: 20,
            name: "create_file_stream",
            kind: "message",
            T: $mn,
            oneof: "params",
          },
          {
            no: 21,
            name: "delete_file_stream",
            kind: "message",
            T: Fmn,
            oneof: "params",
          },
          {
            no: 22,
            name: "reapply_stream",
            kind: "message",
            T: hmn,
            oneof: "params",
          },
          {
            no: 23,
            name: "get_related_files_stream",
            kind: "message",
            T: Rmn,
            oneof: "params",
          },
          {
            no: 24,
            name: "parallel_apply_stream",
            kind: "message",
            T: bbn,
            oneof: "params",
          },
          {
            no: 25,
            name: "run_terminal_command_v2_stream",
            kind: "message",
            T: ybn,
            oneof: "params",
          },
          {
            no: 26,
            name: "fetch_rules_stream",
            kind: "message",
            T: wbn,
            oneof: "params",
          },
          {
            no: 27,
            name: "planner_stream",
            kind: "message",
            T: Cbn,
            oneof: "params",
          },
          {
            no: 28,
            name: "web_search_stream",
            kind: "message",
            T: xbn,
            oneof: "params",
          },
          {
            no: 29,
            name: "mcp_stream",
            kind: "message",
            T: Ebn,
            oneof: "params",
          },
          {
            no: 30,
            name: "web_viewer_stream",
            kind: "message",
            T: kbn,
            oneof: "params",
          },
          {
            no: 31,
            name: "diff_history_stream",
            kind: "message",
            T: Dbn,
            oneof: "params",
          },
          { no: 8, name: "name", kind: "scalar", T: 9 },
          { no: 9, name: "raw_args", kind: "scalar", T: 9 },
          { no: 10, name: "error", kind: "message", T: cVe, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new r1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new r1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new r1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(r1e, e, t)
      }
    },
    IAi = class o1e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.language = ""),
          (this.contents = ""),
          (this.blocking = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "language", kind: "scalar", T: 9 },
          { no: 3, name: "contents", kind: "scalar", T: 9 },
          { no: 4, name: "blocking", kind: "scalar", T: 8 },
          { no: 5, name: "instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new o1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new o1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new o1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(o1e, e, t)
      }
    },
    koe = class a1e extends _ {
      constructor(e) {
        super(),
          (this.isApplied = !1),
          (this.applyFailed = !1),
          (this.linterErrors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff", kind: "message", T: nG },
          { no: 2, name: "is_applied", kind: "scalar", T: 8 },
          { no: 3, name: "apply_failed", kind: "scalar", T: 8 },
          { no: 4, name: "linter_errors", kind: "message", T: k$, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new a1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new a1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new a1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(a1e, e, t)
      }
    },
    nG = class l1e extends _ {
      constructor(e) {
        super(),
          (this.chunks = []),
          (this.editor = Eoe.UNSPECIFIED),
          (this.hitTimeout = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditFileResult.FileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunks", kind: "message", T: fmn, repeated: !0 },
          { no: 2, name: "editor", kind: "enum", T: v.getEnumType(Eoe) },
          { no: 3, name: "hit_timeout", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new l1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new l1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new l1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(l1e, e, t)
      }
    },
    Eoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.AI = 1)] = "AI"),
      (i[(i.HUMAN = 2)] = "HUMAN")
  })(Eoe || (Eoe = {})),
    v.util.setEnumType(Eoe, "aiserver.v1.EditFileResult.FileDiff.Editor", [
      { no: 0, name: "EDITOR_UNSPECIFIED" },
      { no: 1, name: "EDITOR_AI" },
      { no: 2, name: "EDITOR_HUMAN" },
    ])
  var fmn = class c1e extends _ {
      constructor(e) {
        super(),
          (this.diffString = ""),
          (this.oldStart = 0),
          (this.newStart = 0),
          (this.oldLines = 0),
          (this.newLines = 0),
          (this.linesRemoved = 0),
          (this.linesAdded = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditFileResult.FileDiff.ChunkDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff_string", kind: "scalar", T: 9 },
          { no: 2, name: "old_start", kind: "scalar", T: 5 },
          { no: 3, name: "new_start", kind: "scalar", T: 5 },
          { no: 4, name: "old_lines", kind: "scalar", T: 5 },
          { no: 5, name: "new_lines", kind: "scalar", T: 5 },
          { no: 6, name: "lines_removed", kind: "scalar", T: 5 },
          { no: 7, name: "lines_added", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new c1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new c1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new c1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(c1e, e, t)
      }
    },
    gmn = class h1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditFileStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new h1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new h1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new h1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(h1e, e, t)
      }
    },
    DAi = class u1e extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCallFileSearchParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new u1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new u1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new u1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(u1e, e, t)
      }
    },
    bCo = class d1e extends _ {
      constructor(e) {
        super(), (this.targetFiles = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCallGetRelatedFilesParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new d1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new d1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new d1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(d1e, e, t)
      }
    },
    pmn = class f1e extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCallFileSearchStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new f1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new f1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new f1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(f1e, e, t)
      }
    },
    zSt = class g1e extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.numResults = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCallFileSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: mmn, repeated: !0 },
          { no: 2, name: "limit_hit", kind: "scalar", T: 8, opt: !0 },
          { no: 3, name: "num_results", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new g1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new g1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new g1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(g1e, e, t)
      }
    },
    mmn = class p1e extends _ {
      constructor(e) {
        super(), (this.uri = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCallFileSearchResult.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new p1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new p1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new p1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(p1e, e, t)
      }
    },
    TAi = class m1e extends _ {
      constructor(e) {
        super(), (this.directoryPath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListDirParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "directory_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new m1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new m1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new m1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(m1e, e, t)
      }
    },
    Ioe = class b1e extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.directoryRelativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListDirResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: bmn, repeated: !0 },
          {
            no: 2,
            name: "directory_relative_workspace_path",
            kind: "scalar",
            T: 9,
          },
        ])
      }
      static fromBinary(e, t) {
        return new b1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new b1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new b1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(b1e, e, t)
      }
    },
    bmn = class v1e extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.isDirectory = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListDirResult.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "is_directory", kind: "scalar", T: 8 },
          { no: 3, name: "size", kind: "scalar", T: 3, opt: !0 },
          { no: 4, name: "last_modified", kind: "message", T: PSt, opt: !0 },
          { no: 5, name: "num_children", kind: "scalar", T: 5, opt: !0 },
          { no: 6, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new v1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new v1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new v1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(v1e, e, t)
      }
    },
    vmn = class y1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ListDirStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new y1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new y1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new y1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(y1e, e, t)
      }
    },
    PAi = class w1e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.readEntireFile = !1),
          (this.fileIsAllowedToBeReadEntirely = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "read_entire_file", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "start_line_one_indexed",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 4,
            name: "end_line_one_indexed_inclusive",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 5,
            name: "file_is_allowed_to_be_read_entirely",
            kind: "scalar",
            T: 8,
          },
        ])
      }
      static fromBinary(e, t) {
        return new w1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new w1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new w1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(w1e, e, t)
      }
    },
    hVe = class C1e extends _ {
      constructor(e) {
        super(),
          (this.contents = ""),
          (this.didDowngradeToLineRange = !1),
          (this.didShortenLineRange = !1),
          (this.didSetDefaultLineRange = !1),
          (this.relativeWorkspacePath = ""),
          (this.didShortenCharRange = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "contents", kind: "scalar", T: 9 },
          { no: 2, name: "did_downgrade_to_line_range", kind: "scalar", T: 8 },
          { no: 3, name: "did_shorten_line_range", kind: "scalar", T: 8 },
          { no: 4, name: "did_set_default_line_range", kind: "scalar", T: 8 },
          { no: 5, name: "full_file_contents", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "outline", kind: "scalar", T: 9, opt: !0 },
          {
            no: 7,
            name: "start_line_one_indexed",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 8,
            name: "end_line_one_indexed_inclusive",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 9, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 10, name: "did_shorten_char_range", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new C1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new C1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new C1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(C1e, e, t)
      }
    },
    ymn = class S1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new S1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new S1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new S1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(S1e, e, t)
      }
    },
    LAi = class x1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "options", kind: "message", T: Smn },
          { no: 2, name: "pattern_info", kind: "message", T: wmn },
        ])
      }
      static fromBinary(e, t) {
        return new x1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new x1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new x1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(x1e, e, t)
      }
    },
    wmn = class k1e extends _ {
      constructor(e) {
        super(), (this.pattern = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchParams.IPatternInfoProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "pattern", kind: "scalar", T: 9 },
          { no: 2, name: "is_reg_exp", kind: "scalar", T: 8, opt: !0 },
          { no: 3, name: "is_word_match", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "word_separators", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "is_multiline", kind: "scalar", T: 8, opt: !0 },
          { no: 6, name: "is_unicode", kind: "scalar", T: 8, opt: !0 },
          { no: 7, name: "is_case_sensitive", kind: "scalar", T: 8, opt: !0 },
          { no: 8, name: "notebook_info", kind: "message", T: Cmn },
        ])
      }
      static fromBinary(e, t) {
        return new k1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new k1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new k1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(k1e, e, t)
      }
    },
    Cmn = class E1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "is_in_notebook_markdown_input",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 2,
            name: "is_in_notebook_markdown_preview",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 3,
            name: "is_in_notebook_cell_input",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 4,
            name: "is_in_notebook_cell_output",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new E1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new E1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new E1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(E1e, e, t)
      }
    },
    Smn = class I1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "preview_options", kind: "message", T: Imn },
          { no: 2, name: "file_encoding", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "surrounding_context", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "is_smart_case", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "notebook_search_config", kind: "message", T: Dmn },
          { no: 6, name: "exclude_pattern", kind: "message", T: kmn },
          { no: 7, name: "include_pattern", kind: "message", T: NAi },
          { no: 8, name: "expand_patterns", kind: "scalar", T: 8, opt: !0 },
          { no: 9, name: "max_results", kind: "scalar", T: 5, opt: !0 },
          { no: 10, name: "max_file_size", kind: "scalar", T: 5, opt: !0 },
          {
            no: 11,
            name: "disregard_ignore_files",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 12,
            name: "disregard_global_ignore_files",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 13,
            name: "disregard_parent_ignore_files",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 14,
            name: "disregard_exclude_settings",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 15,
            name: "disregard_search_exclude_settings",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 16, name: "ignore_symlinks", kind: "scalar", T: 8, opt: !0 },
          { no: 17, name: "only_open_editors", kind: "scalar", T: 8, opt: !0 },
          { no: 18, name: "only_file_scheme", kind: "scalar", T: 8, opt: !0 },
          { no: 19, name: "reason", kind: "scalar", T: 9, opt: !0 },
          { no: 20, name: "extra_file_resources", kind: "message", T: xmn },
        ])
      }
      static fromBinary(e, t) {
        return new I1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new I1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new I1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(I1e, e, t)
      }
    },
    xmn = class D1e extends _ {
      constructor(e) {
        super(), (this.extraFileResources = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "extra_file_resources",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new D1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new D1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new D1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(D1e, e, t)
      }
    },
    kmn = class T1e extends _ {
      constructor(e) {
        super(), (this.excludePattern = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "exclude_pattern",
            kind: "message",
            T: Emn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new T1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new T1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new T1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(T1e, e, t)
      }
    },
    Emn = class P1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "pattern", kind: "message", T: NAi },
        ])
      }
      static fromBinary(e, t) {
        return new P1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new P1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new P1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(P1e, e, t)
      }
    },
    NAi = class L1e extends _ {
      constructor(e) {
        super(), (this.patterns = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "patterns", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new L1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new L1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new L1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(L1e, e, t)
      }
    },
    Imn = class N1e extends _ {
      constructor(e) {
        super(),
          (this.matchLines = 0),
          (this.charsPerLine = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "match_lines", kind: "scalar", T: 5 },
          { no: 2, name: "chars_per_line", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new N1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new N1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new N1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(N1e, e, t)
      }
    },
    Dmn = class R1e extends _ {
      constructor(e) {
        super(),
          (this.includeMarkupInput = !1),
          (this.includeMarkupPreview = !1),
          (this.includeCodeInput = !1),
          (this.includeOutput = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "include_markup_input", kind: "scalar", T: 8 },
          { no: 2, name: "include_markup_preview", kind: "scalar", T: 8 },
          { no: 3, name: "include_code_input", kind: "scalar", T: 8 },
          { no: 4, name: "include_output", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new R1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new R1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new R1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(R1e, e, t)
      }
    },
    GSt = class A1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "internal", kind: "message", T: RAi },
        ])
      }
      static fromBinary(e, t) {
        return new A1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new A1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new A1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(A1e, e, t)
      }
    },
    RAi = class M1e extends _ {
      constructor(e) {
        super(),
          (this.results = []),
          (this.messages = []),
          (this.stats = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: AAi, repeated: !0 },
          { no: 2, name: "exit", kind: "enum", T: v.getEnumType(Y9), opt: !0 },
          { no: 3, name: "limit_hit", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "messages", kind: "message", T: Pmn, repeated: !0 },
          {
            no: 5,
            name: "file_search_stats",
            kind: "message",
            T: FAi,
            oneof: "stats",
          },
          {
            no: 6,
            name: "text_search_stats",
            kind: "message",
            T: OAi,
            oneof: "stats",
          },
        ])
      }
      static fromBinary(e, t) {
        return new M1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new M1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new M1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(M1e, e, t)
      }
    },
    $B
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.INFORMATION = 1)] = "INFORMATION"),
      (i[(i.WARNING = 2)] = "WARNING")
  })($B || ($B = {})),
    v.util.setEnumType(
      $B,
      "aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType",
      [
        { no: 0, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_UNSPECIFIED" },
        { no: 1, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_INFORMATION" },
        { no: 2, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_WARNING" },
      ],
    )
  var Y9
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NORMAL = 1)] = "NORMAL"),
      (i[(i.NEW_SEARCH_STARTED = 2)] = "NEW_SEARCH_STARTED")
  })(Y9 || (Y9 = {})),
    v.util.setEnumType(
      Y9,
      "aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode",
      [
        { no: 0, name: "SEARCH_COMPLETION_EXIT_CODE_UNSPECIFIED" },
        { no: 1, name: "SEARCH_COMPLETION_EXIT_CODE_NORMAL" },
        { no: 2, name: "SEARCH_COMPLETION_EXIT_CODE_NEW_SEARCH_STARTED" },
      ],
    )
  var AAi = class $1e extends _ {
      constructor(e) {
        super(),
          (this.resource = ""),
          (this.results = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileMatch"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "resource", kind: "scalar", T: 9 },
          { no: 2, name: "results", kind: "message", T: JSt, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new $1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($1e, e, t)
      }
    },
    JSt = class F1e extends _ {
      constructor(e) {
        super(), (this.result = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "match", kind: "message", T: MAi, oneof: "result" },
          { no: 2, name: "context", kind: "message", T: $Ai, oneof: "result" },
        ])
      }
      static fromBinary(e, t) {
        return new F1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new F1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new F1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(F1e, e, t)
      }
    },
    MAi = class O1e extends _ {
      constructor(e) {
        super(),
          (this.rangeLocations = []),
          (this.previewText = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "range_locations",
            kind: "message",
            T: Tmn,
            repeated: !0,
          },
          { no: 3, name: "preview_text", kind: "scalar", T: 9 },
          { no: 4, name: "webview_index", kind: "scalar", T: 5, opt: !0 },
          { no: 5, name: "cell_fragment", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new O1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new O1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new O1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(O1e, e, t)
      }
    },
    $Ai = class B1e extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.lineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new B1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new B1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new B1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(B1e, e, t)
      }
    },
    Tmn = class _1e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "source", kind: "message", T: KSt },
          { no: 2, name: "preview", kind: "message", T: KSt },
        ])
      }
      static fromBinary(e, t) {
        return new _1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_1e, e, t)
      }
    },
    KSt = class U1e extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.startColumn = 0),
          (this.endLineNumber = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal.ISearchRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "start_column", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new U1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new U1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new U1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(U1e, e, t)
      }
    },
    Pmn = class H1e extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.type = $B.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "type", kind: "enum", T: v.getEnumType($B) },
          { no: 3, name: "trusted", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new H1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new H1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new H1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(H1e, e, t)
      }
    },
    FAi = class V1e extends _ {
      constructor(e) {
        super(),
          (this.fromCache = !1),
          (this.detailStats = { case: void 0 }),
          (this.resultCount = 0),
          (this.type = FB.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "from_cache", kind: "scalar", T: 8 },
          {
            no: 2,
            name: "search_engine_stats",
            kind: "message",
            T: YSt,
            oneof: "detail_stats",
          },
          {
            no: 3,
            name: "cached_search_stats",
            kind: "message",
            T: BAi,
            oneof: "detail_stats",
          },
          {
            no: 4,
            name: "file_search_provider_stats",
            kind: "message",
            T: _Ai,
            oneof: "detail_stats",
          },
          { no: 5, name: "result_count", kind: "scalar", T: 5 },
          { no: 6, name: "type", kind: "enum", T: v.getEnumType(FB) },
          { no: 7, name: "sorting_time", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new V1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new V1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new V1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(V1e, e, t)
      }
    },
    FB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.FILE_SEARCH_PROVIDER = 1)] = "FILE_SEARCH_PROVIDER"),
      (i[(i.SEARCH_PROCESS = 2)] = "SEARCH_PROCESS")
  })(FB || (FB = {})),
    v.util.setEnumType(
      FB,
      "aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType",
      [
        { no: 0, name: "FILE_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
        { no: 1, name: "FILE_SEARCH_PROVIDER_TYPE_FILE_SEARCH_PROVIDER" },
        { no: 2, name: "FILE_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
      ],
    )
  var OAi = class W1e extends _ {
      constructor(e) {
        super(), (this.type = T$.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "enum", T: v.getEnumType(T$) },
        ])
      }
      static fromBinary(e, t) {
        return new W1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new W1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new W1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(W1e, e, t)
      }
    },
    T$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.TEXT_SEARCH_PROVIDER = 1)] = "TEXT_SEARCH_PROVIDER"),
      (i[(i.SEARCH_PROCESS = 2)] = "SEARCH_PROCESS"),
      (i[(i.AI_TEXT_SEARCH_PROVIDER = 3)] = "AI_TEXT_SEARCH_PROVIDER")
  })(T$ || (T$ = {})),
    v.util.setEnumType(
      T$,
      "aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType",
      [
        { no: 0, name: "TEXT_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
        { no: 1, name: "TEXT_SEARCH_PROVIDER_TYPE_TEXT_SEARCH_PROVIDER" },
        { no: 2, name: "TEXT_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
        { no: 3, name: "TEXT_SEARCH_PROVIDER_TYPE_AI_TEXT_SEARCH_PROVIDER" },
      ],
    )
  var YSt = class q1e extends _ {
      constructor(e) {
        super(),
          (this.fileWalkTime = 0),
          (this.directoriesWalked = 0),
          (this.filesWalked = 0),
          (this.cmdTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_walk_time", kind: "scalar", T: 5 },
          { no: 2, name: "directories_walked", kind: "scalar", T: 5 },
          { no: 3, name: "files_walked", kind: "scalar", T: 5 },
          { no: 4, name: "cmd_time", kind: "scalar", T: 5 },
          { no: 5, name: "cmd_result_count", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new q1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new q1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new q1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(q1e, e, t)
      }
    },
    BAi = class j1e extends _ {
      constructor(e) {
        super(),
          (this.cacheWasResolved = !1),
          (this.cacheLookupTime = 0),
          (this.cacheFilterTime = 0),
          (this.cacheEntryCount = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cache_was_resolved", kind: "scalar", T: 8 },
          { no: 2, name: "cache_lookup_time", kind: "scalar", T: 5 },
          { no: 3, name: "cache_filter_time", kind: "scalar", T: 5 },
          { no: 4, name: "cache_entry_count", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new j1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new j1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new j1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(j1e, e, t)
      }
    },
    _Ai = class z1e extends _ {
      constructor(e) {
        super(),
          (this.providerTime = 0),
          (this.postProcessTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "provider_time", kind: "scalar", T: 5 },
          { no: 2, name: "post_process_time", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new z1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new z1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new z1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(z1e, e, t)
      }
    },
    Lmn = class G1e extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RipgrepSearchStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new G1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new G1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new G1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(G1e, e, t)
      }
    },
    XSt = class J1e extends _ {
      constructor(e) {
        super(),
          (this.codeResults = []),
          (this.query = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadSemsearchFilesParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository_info", kind: "message", T: rl },
          { no: 2, name: "code_results", kind: "message", T: im, repeated: !0 },
          { no: 3, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new J1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new J1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new J1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(J1e, e, t)
      }
    },
    UAi = class K1e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.missingReason = OB.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MissingFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "missing_reason", kind: "enum", T: v.getEnumType(OB) },
          { no: 3, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new K1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new K1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new K1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(K1e, e, t)
      }
    },
    OB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.TOO_LARGE = 1)] = "TOO_LARGE"),
      (i[(i.NOT_FOUND = 2)] = "NOT_FOUND")
  })(OB || (OB = {})),
    v.util.setEnumType(OB, "aiserver.v1.MissingFile.MissingReason", [
      { no: 0, name: "MISSING_REASON_UNSPECIFIED" },
      { no: 1, name: "MISSING_REASON_TOO_LARGE" },
      { no: 2, name: "MISSING_REASON_NOT_FOUND" },
    ])
  var uVe = class Y1e extends _ {
      constructor(e) {
        super(),
          (this.codeResults = []),
          (this.allFiles = []),
          (this.missingFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadSemsearchFilesResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_results", kind: "message", T: im, repeated: !0 },
          { no: 2, name: "all_files", kind: "message", T: AC, repeated: !0 },
          { no: 3, name: "missing_files", kind: "message", T: UAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Y1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Y1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Y1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Y1e, e, t)
      }
    },
    Nmn = class X1e extends _ {
      constructor(e) {
        super(), (this.numFiles = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadSemsearchFilesStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "num_files", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new X1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new X1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new X1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(X1e, e, t)
      }
    },
    Rmn = class Q1e extends _ {
      constructor(e) {
        super(), (this.targetFiles = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelatedFilesStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Q1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Q1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Q1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Q1e, e, t)
      }
    },
    HAi = class Z1e extends _ {
      constructor(e) {
        super(), (this.query = ""), (this.topK = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchFullParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "repository_info", kind: "message", T: rl },
          { no: 2, name: "query", kind: "scalar", T: 9 },
          { no: 3, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "top_k", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new Z1e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Z1e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Z1e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Z1e, e, t)
      }
    },
    QSt = class exe extends _ {
      constructor(e) {
        super(),
          (this.codeResults = []),
          (this.allFiles = []),
          (this.missingFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchFullResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_results", kind: "message", T: im, repeated: !0 },
          { no: 2, name: "all_files", kind: "message", T: AC, repeated: !0 },
          { no: 3, name: "missing_files", kind: "message", T: UAi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new exe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new exe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new exe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(exe, e, t)
      }
    },
    Amn = class txe extends _ {
      constructor(e) {
        super(), (this.numFiles = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchFullStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "num_files", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new txe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new txe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new txe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(txe, e, t)
      }
    },
    Mmn = class ixe extends _ {
      constructor(e) {
        super(), (this.relativeFilePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileForImportsStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ixe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ixe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ixe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ixe, e, t)
      }
    },
    ZSt = class sxe extends _ {
      constructor(e) {
        super(), (this.relativeFilePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileForImportsParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sxe, e, t)
      }
    },
    VAi = class nxe extends _ {
      constructor(e) {
        super(), (this.contents = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadFileForImportsResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nxe, e, t)
      }
    },
    $mn = class rxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateFileStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new rxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rxe, e, t)
      }
    },
    e1t = class oxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oxe, e, t)
      }
    },
    Doe = class axe extends _ {
      constructor(e) {
        super(),
          (this.fileCreatedSuccessfully = !1),
          (this.fileAlreadyExists = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_created_successfully", kind: "scalar", T: 8 },
          { no: 2, name: "file_already_exists", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new axe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new axe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new axe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(axe, e, t)
      }
    },
    t1t = class lxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DeleteFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new lxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lxe, e, t)
      }
    },
    X9 = class cxe extends _ {
      constructor(e) {
        super(),
          (this.rejected = !1),
          (this.fileNonExistent = !1),
          (this.fileDeletedSuccessfully = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DeleteFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "rejected", kind: "scalar", T: 8 },
          { no: 2, name: "file_non_existent", kind: "scalar", T: 8 },
          { no: 3, name: "file_deleted_successfully", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new cxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cxe, e, t)
      }
    },
    Fmn = class hxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DeleteFileStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hxe, e, t)
      }
    },
    WAi = class uxe extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.requireUserApproval = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "cwd", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "new_session", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "require_user_approval", kind: "scalar", T: 8 },
          { no: 4, name: "options", kind: "message", T: Omn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new uxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uxe, e, t)
      }
    },
    Omn = class dxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandParams.ExecutionOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "timeout", kind: "scalar", T: 5, opt: !0 },
          { no: 2, name: "skip_ai_check", kind: "scalar", T: 8, opt: !0 },
          {
            no: 3,
            name: "command_run_timeout_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 4,
            name: "command_change_check_interval_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 5,
            name: "ai_finish_check_max_attempts",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 6,
            name: "ai_finish_check_interval_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 7, name: "delayer_interval_ms", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dxe, e, t)
      }
    },
    i1t = class fxe extends _ {
      constructor(e) {
        super(),
          (this.output = ""),
          (this.exitCode = 0),
          (this.poppedOutIntoBackground = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "output", kind: "scalar", T: 9 },
          { no: 2, name: "exit_code", kind: "scalar", T: 5 },
          { no: 3, name: "rejected", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "popped_out_into_background", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new fxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fxe, e, t)
      }
    },
    Bmn = class gxe extends _ {
      constructor(e) {
        super(), (this.command = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gxe, e, t)
      }
    },
    _mn = class pxe extends _ {
      constructor(e) {
        super(),
          (this.tool = xf.UNSPECIFIED),
          (this.params = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BuiltinToolCall"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(xf) },
          {
            no: 2,
            name: "search_params",
            kind: "message",
            T: Zmn,
            oneof: "params",
          },
          {
            no: 3,
            name: "read_chunk_params",
            kind: "message",
            T: ebn,
            oneof: "params",
          },
          {
            no: 4,
            name: "gotodef_params",
            kind: "message",
            T: rbn,
            oneof: "params",
          },
          {
            no: 5,
            name: "edit_params",
            kind: "message",
            T: abn,
            oneof: "params",
          },
          {
            no: 6,
            name: "undo_edit_params",
            kind: "message",
            T: tbn,
            oneof: "params",
          },
          { no: 7, name: "end_params", kind: "message", T: ibn, oneof: "params" },
          {
            no: 8,
            name: "new_file_params",
            kind: "message",
            T: Xmn,
            oneof: "params",
          },
          {
            no: 9,
            name: "add_test_params",
            kind: "message",
            T: lbn,
            oneof: "params",
          },
          {
            no: 10,
            name: "run_test_params",
            kind: "message",
            T: cbn,
            oneof: "params",
          },
          {
            no: 11,
            name: "delete_test_params",
            kind: "message",
            T: dbn,
            oneof: "params",
          },
          {
            no: 12,
            name: "save_file_params",
            kind: "message",
            T: fbn,
            oneof: "params",
          },
          {
            no: 13,
            name: "get_tests_params",
            kind: "message",
            T: hbn,
            oneof: "params",
          },
          {
            no: 14,
            name: "get_symbols_params",
            kind: "message",
            T: gbn,
            oneof: "params",
          },
          {
            no: 15,
            name: "semantic_search_params",
            kind: "message",
            T: Qmn,
            oneof: "params",
          },
          {
            no: 16,
            name: "get_project_structure_params",
            kind: "message",
            T: Jmn,
            oneof: "params",
          },
          {
            no: 17,
            name: "create_rm_files_params",
            kind: "message",
            T: Gmn,
            oneof: "params",
          },
          {
            no: 18,
            name: "run_terminal_commands_params",
            kind: "message",
            T: jmn,
            oneof: "params",
          },
          {
            no: 19,
            name: "new_edit_params",
            kind: "message",
            T: obn,
            oneof: "params",
          },
          {
            no: 20,
            name: "read_with_linter_params",
            kind: "message",
            T: qmn,
            oneof: "params",
          },
          {
            no: 21,
            name: "add_ui_step_params",
            kind: "message",
            T: Umn,
            oneof: "params",
          },
          {
            no: 23,
            name: "read_semsearch_files_params",
            kind: "message",
            T: XSt,
            oneof: "params",
          },
          {
            no: 24,
            name: "read_file_for_imports_params",
            kind: "message",
            T: ZSt,
            oneof: "params",
          },
          {
            no: 25,
            name: "create_file_params",
            kind: "message",
            T: e1t,
            oneof: "params",
          },
          {
            no: 26,
            name: "delete_file_params",
            kind: "message",
            T: t1t,
            oneof: "params",
          },
          { no: 22, name: "tool_call_id", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pxe, e, t)
      }
    },
    qAi = class mxe extends _ {
      constructor(e) {
        super(),
          (this.tool = xf.UNSPECIFIED),
          (this.result = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BuiltinToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool", kind: "enum", T: v.getEnumType(xf) },
          {
            no: 2,
            name: "search_result",
            kind: "message",
            T: r1t,
            oneof: "result",
          },
          {
            no: 3,
            name: "read_chunk_result",
            kind: "message",
            T: YAi,
            oneof: "result",
          },
          {
            no: 4,
            name: "gotodef_result",
            kind: "message",
            T: iMi,
            oneof: "result",
          },
          {
            no: 5,
            name: "edit_result",
            kind: "message",
            T: o1t,
            oneof: "result",
          },
          {
            no: 6,
            name: "undo_edit_result",
            kind: "message",
            T: QAi,
            oneof: "result",
          },
          { no: 7, name: "end_result", kind: "message", T: ZAi, oneof: "result" },
          {
            no: 8,
            name: "new_file_result",
            kind: "message",
            T: XAi,
            oneof: "result",
          },
          {
            no: 9,
            name: "add_test_result",
            kind: "message",
            T: oMi,
            oneof: "result",
          },
          {
            no: 10,
            name: "run_test_result",
            kind: "message",
            T: cMi,
            oneof: "result",
          },
          {
            no: 11,
            name: "delete_test_result",
            kind: "message",
            T: a1t,
            oneof: "result",
          },
          {
            no: 12,
            name: "save_file_result",
            kind: "message",
            T: uMi,
            oneof: "result",
          },
          {
            no: 13,
            name: "get_tests_result",
            kind: "message",
            T: hMi,
            oneof: "result",
          },
          {
            no: 14,
            name: "get_symbols_result",
            kind: "message",
            T: dMi,
            oneof: "result",
          },
          {
            no: 15,
            name: "semantic_search_result",
            kind: "message",
            T: s1t,
            oneof: "result",
          },
          {
            no: 16,
            name: "get_project_structure_result",
            kind: "message",
            T: Kmn,
            oneof: "result",
          },
          {
            no: 17,
            name: "create_rm_files_result",
            kind: "message",
            T: GAi,
            oneof: "result",
          },
          {
            no: 18,
            name: "run_terminal_commands_result",
            kind: "message",
            T: zmn,
            oneof: "result",
          },
          {
            no: 19,
            name: "new_edit_result",
            kind: "message",
            T: sMi,
            oneof: "result",
          },
          {
            no: 20,
            name: "read_with_linter_result",
            kind: "message",
            T: zAi,
            oneof: "result",
          },
          {
            no: 21,
            name: "add_ui_step_result",
            kind: "message",
            T: Wmn,
            oneof: "result",
          },
          {
            no: 22,
            name: "read_semsearch_files_result",
            kind: "message",
            T: uVe,
            oneof: "result",
          },
          {
            no: 23,
            name: "create_file_result",
            kind: "message",
            T: Doe,
            oneof: "result",
          },
          {
            no: 24,
            name: "delete_file_result",
            kind: "message",
            T: X9,
            oneof: "result",
          },
        ])
      }
      static fromBinary(e, t) {
        return new mxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mxe, e, t)
      }
    },
    Umn = class bxe extends _ {
      constructor(e) {
        super(),
          (this.conversationId = ""),
          (this.step = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddUiStepParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "search_results",
            kind: "message",
            T: Vmn,
            oneof: "step",
          },
        ])
      }
      static fromBinary(e, t) {
        return new bxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bxe, e, t)
      }
    },
    Hmn = class vxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddUiStepParams.SearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new vxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vxe, e, t)
      }
    },
    Vmn = class yxe extends _ {
      constructor(e) {
        super(), (this.searchResults = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddUiStepParams.SearchResults"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "search_results",
            kind: "message",
            T: Hmn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new yxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yxe, e, t)
      }
    },
    Wmn = class wxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddUiStepResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new wxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wxe, e, t)
      }
    },
    vCo = class Cxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ServerSideToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Cxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Cxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Cxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Cxe, e, t)
      }
    },
    jAi = class Sxe extends _ {
      constructor(e) {
        super(), (this.toolCall = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolCall"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "builtin_tool_call",
            kind: "message",
            T: _mn,
            oneof: "tool_call",
          },
          {
            no: 2,
            name: "custom_tool_call",
            kind: "message",
            T: sbn,
            oneof: "tool_call",
          },
        ])
      }
      static fromBinary(e, t) {
        return new Sxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Sxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Sxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Sxe, e, t)
      }
    },
    BB = class xxe extends _ {
      constructor(e) {
        super(), (this.toolResult = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "builtin_tool_result",
            kind: "message",
            T: qAi,
            oneof: "tool_result",
          },
          {
            no: 2,
            name: "custom_tool_result",
            kind: "message",
            T: nbn,
            oneof: "tool_result",
          },
          {
            no: 3,
            name: "error_tool_result",
            kind: "message",
            T: dVe,
            oneof: "tool_result",
          },
        ])
      }
      static fromBinary(e, t) {
        return new xxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xxe, e, t)
      }
    },
    qmn = class kxe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadWithLinterParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new kxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kxe, e, t)
      }
    },
    zAi = class Exe extends _ {
      constructor(e) {
        super(),
          (this.contents = ""),
          (this.diagnostics = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadWithLinterResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "contents", kind: "scalar", T: 9 },
          { no: 2, name: "diagnostics", kind: "message", T: qRi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Exe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Exe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Exe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Exe, e, t)
      }
    },
    jmn = class Ixe extends _ {
      constructor(e) {
        super(),
          (this.commands = []),
          (this.commandsUuid = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandsParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "commands", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "commands_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Ixe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ixe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ixe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ixe, e, t)
      }
    },
    zmn = class Dxe extends _ {
      constructor(e) {
        super(), (this.outputs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandsResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "outputs", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Dxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Dxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Dxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Dxe, e, t)
      }
    },
    Gmn = class Txe extends _ {
      constructor(e) {
        super(),
          (this.removedFilePaths = []),
          (this.createdFilePaths = []),
          (this.createdDirectoryPaths = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateRmFilesParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "removed_file_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 2,
            name: "created_file_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 3,
            name: "created_directory_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Txe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Txe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Txe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Txe, e, t)
      }
    },
    GAi = class Pxe extends _ {
      constructor(e) {
        super(),
          (this.createdFilePaths = []),
          (this.removedFilePaths = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CreateRmFilesResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "created_file_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 2,
            name: "removed_file_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Pxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Pxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Pxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Pxe, e, t)
      }
    },
    Jmn = class Lxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetProjectStructureParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Lxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Lxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Lxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Lxe, e, t)
      }
    },
    Kmn = class Nxe extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.rootWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetProjectStructureResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: Ymn, repeated: !0 },
          { no: 2, name: "root_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Nxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Nxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Nxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Nxe, e, t)
      }
    },
    Ymn = class Rxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.outline = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetProjectStructureResult.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "outline", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Rxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Rxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Rxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Rxe, e, t)
      }
    },
    Xmn = class Axe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NewFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Axe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Axe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Axe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Axe, e, t)
      }
    },
    Qmn = class Mxe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.topK = 0),
          (this.grabWholeFile = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "top_k", kind: "scalar", T: 5 },
          { no: 5, name: "index_id", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "grab_whole_file", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Mxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Mxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Mxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Mxe, e, t)
      }
    },
    s1t = class $xe extends _ {
      constructor(e) {
        super(),
          (this.results = []),
          (this.files = {}),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: JAi, repeated: !0 },
          {
            no: 2,
            name: "files",
            kind: "map",
            K: 9,
            V: { kind: "scalar", T: 9 },
          },
        ])
      }
      static fromBinary(e, t) {
        return new $xe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $xe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $xe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($xe, e, t)
      }
    },
    JAi = class Fxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.score = 0),
          (this.content = ""),
          (this.detailedLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SemanticSearchResult.Item"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "score", kind: "scalar", T: 2 },
          { no: 3, name: "content", kind: "scalar", T: 9 },
          { no: 4, name: "range", kind: "message", T: Hu },
          { no: 5, name: "original_content", kind: "scalar", T: 9, opt: !0 },
          {
            no: 6,
            name: "detailed_lines",
            kind: "message",
            T: ASt,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Fxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Fxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Fxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Fxe, e, t)
      }
    },
    Zmn = class Oxe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.regex = !1),
          (this.includePattern = ""),
          (this.excludePattern = ""),
          (this.filenameSearch = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "regex", kind: "scalar", T: 8 },
          { no: 3, name: "include_pattern", kind: "scalar", T: 9 },
          { no: 4, name: "exclude_pattern", kind: "scalar", T: 9 },
          { no: 5, name: "filename_search", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Oxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Oxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Oxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Oxe, e, t)
      }
    },
    n1t = class Bxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.numMatches = 0),
          (this.potentiallyRelevantLines = []),
          (this.cropped = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchToolFileSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "num_matches", kind: "scalar", T: 5 },
          {
            no: 3,
            name: "potentially_relevant_lines",
            kind: "message",
            T: KAi,
            repeated: !0,
          },
          { no: 4, name: "cropped", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Bxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Bxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Bxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Bxe, e, t)
      }
    },
    KAi = class _xe extends _ {
      constructor(e) {
        super(),
          (this.lineNumber = 0),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchToolFileSearchResult.Line"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line_number", kind: "scalar", T: 5 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new _xe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _xe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _xe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_xe, e, t)
      }
    },
    r1t = class Uxe extends _ {
      constructor(e) {
        super(),
          (this.fileResults = []),
          (this.numTotalMatches = 0),
          (this.numTotalMatchedFiles = 0),
          (this.numTotalMayBeIncomplete = !1),
          (this.filesOnly = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_results", kind: "message", T: n1t, repeated: !0 },
          { no: 2, name: "num_total_matches", kind: "scalar", T: 5 },
          { no: 3, name: "num_total_matched_files", kind: "scalar", T: 5 },
          { no: 4, name: "num_total_may_be_incomplete", kind: "scalar", T: 8 },
          { no: 5, name: "files_only", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Uxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Uxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Uxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Uxe, e, t)
      }
    },
    ebn = class Hxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadChunkParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Hxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Hxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Hxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Hxe, e, t)
      }
    },
    YAi = class Vxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          (this.totalNumLines = 0),
          (this.cropped = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReadChunkResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "total_num_lines", kind: "scalar", T: 5 },
          { no: 5, name: "cropped", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Vxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Vxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Vxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Vxe, e, t)
      }
    },
    tbn = class Wxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UndoEditParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Wxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Wxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Wxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Wxe, e, t)
      }
    },
    ibn = class qxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EndParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new qxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qxe, e, t)
      }
    },
    XAi = class jxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.fileTotalLines = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NewFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "file_total_lines", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new jxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jxe, e, t)
      }
    },
    QAi = class zxe extends _ {
      constructor(e) {
        super(),
          (this.feedback = []),
          (this.relativeWorkspacePath = ""),
          (this.contextStartLineNumber = 0),
          (this.contextLines = []),
          (this.contextTotalNumLines = 0),
          (this.fileTotalLines = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UndoEditResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feedback", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "context_start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "context_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "context_total_num_lines", kind: "scalar", T: 5 },
          { no: 6, name: "file_total_lines", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new zxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zxe, e, t)
      }
    },
    ZAi = class Gxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EndResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Gxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Gxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Gxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Gxe, e, t)
      }
    },
    sbn = class Jxe extends _ {
      constructor(e) {
        super(),
          (this.toolId = ""),
          (this.params = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CustomToolCall"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool_id", kind: "scalar", T: 9 },
          { no: 2, name: "params", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Jxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Jxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Jxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Jxe, e, t)
      }
    },
    yCo = class Kxe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ScratchpadResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Kxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Kxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Kxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Kxe, e, t)
      }
    },
    nbn = class Yxe extends _ {
      constructor(e) {
        super(),
          (this.toolId = ""),
          (this.result = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CustomToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool_id", kind: "scalar", T: 9 },
          { no: 2, name: "result", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Yxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Yxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Yxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Yxe, e, t)
      }
    },
    rbn = class Xxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lineNumber = 0),
          (this.symbol = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GotodefParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          { no: 3, name: "symbol", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Xxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Xxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Xxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Xxe, e, t)
      }
    },
    eMi = class Qxe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.potentiallyRelevantLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GotodefToolFileSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "potentially_relevant_lines",
            kind: "message",
            T: tMi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Qxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Qxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Qxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Qxe, e, t)
      }
    },
    tMi = class Zxe extends _ {
      constructor(e) {
        super(),
          (this.lineNumber = 0),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GotodefToolFileSearchResult.Line"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line_number", kind: "scalar", T: 5 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Zxe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Zxe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Zxe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Zxe, e, t)
      }
    },
    iMi = class eke extends _ {
      constructor(e) {
        super(), (this.results = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GotodefResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: eMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new eke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eke, e, t)
      }
    },
    dVe = class tke extends _ {
      constructor(e) {
        super(), (this.errorMessage = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ErrorToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error_message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new tke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tke, e, t)
      }
    },
    obn = class ike extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          (this.editId = ""),
          (this.firstEdit = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NewEditParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "text", kind: "scalar", T: 9 },
          { no: 5, name: "edit_id", kind: "scalar", T: 9 },
          { no: 6, name: "first_edit", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new ike().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ike().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ike().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ike, e, t)
      }
    },
    sMi = class ske extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NewEditResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ske().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ske().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ske().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ske, e, t)
      }
    },
    abn = class nke extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.replaceNumLines = 0),
          (this.newLines = []),
          (this.editId = ""),
          (this.frontendEditType = P$.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "replace_num_lines", kind: "scalar", T: 5 },
          { no: 4, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 7, name: "replace_whole_file", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "edit_id", kind: "scalar", T: 9 },
          {
            no: 6,
            name: "frontend_edit_type",
            kind: "enum",
            T: v.getEnumType(P$),
          },
          {
            no: 8,
            name: "auto_fix_all_linter_errors_in_file",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new nke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nke, e, t)
      }
    },
    P$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.INLINE_DIFFS = 1)] = "INLINE_DIFFS"),
      (i[(i.SIMPLE = 2)] = "SIMPLE")
  })(P$ || (P$ = {})),
    v.util.setEnumType(P$, "aiserver.v1.EditParams.FrontendEditType", [
      { no: 0, name: "FRONTEND_EDIT_TYPE_UNSPECIFIED" },
      { no: 1, name: "FRONTEND_EDIT_TYPE_INLINE_DIFFS" },
      { no: 2, name: "FRONTEND_EDIT_TYPE_SIMPLE" },
    ])
  var o1t = class rke extends _ {
      constructor(e) {
        super(),
          (this.feedback = []),
          (this.contextStartLineNumber = 0),
          (this.contextLines = []),
          (this.file = ""),
          (this.fileTotalLines = 0),
          (this.structuredFeedback = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feedback", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "context_start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "context_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "file", kind: "scalar", T: 9 },
          { no: 5, name: "file_total_lines", kind: "scalar", T: 5 },
          {
            no: 6,
            name: "structured_feedback",
            kind: "message",
            T: rMi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new rke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rke, e, t)
      }
    },
    nMi = class oke extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditResult.RelatedInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oke, e, t)
      }
    },
    rMi = class ake extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.relatedInformation = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditResult.Feedback"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "severity", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_line_number", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "related_information",
            kind: "message",
            T: nMi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new ake().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ake().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ake().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ake, e, t)
      }
    },
    lbn = class lke extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.testName = ""),
          (this.testCode = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddTestParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "test_name", kind: "scalar", T: 9 },
          { no: 3, name: "test_code", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new lke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lke, e, t)
      }
    },
    oMi = class cke extends _ {
      constructor(e) {
        super(), (this.feedback = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddTestResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feedback", kind: "message", T: lMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new cke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cke, e, t)
      }
    },
    aMi = class hke extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddTestResult.RelatedInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hke, e, t)
      }
    },
    lMi = class uke extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          (this.relatedInformation = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AddTestResult.Feedback"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "severity", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_line_number", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "related_information",
            kind: "message",
            T: aMi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new uke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uke, e, t)
      }
    },
    cbn = class dke extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTestParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "test_name", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dke, e, t)
      }
    },
    cMi = class fke extends _ {
      constructor(e) {
        super(), (this.result = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTestResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "result", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new fke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fke, e, t)
      }
    },
    hbn = class gke extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetTestsParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gke, e, t)
      }
    },
    hMi = class pke extends _ {
      constructor(e) {
        super(), (this.tests = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetTestsResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tests", kind: "message", T: ubn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pke, e, t)
      }
    },
    ubn = class mke extends _ {
      constructor(e) {
        super(), (this.name = ""), (this.lines = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetTestsResult.Test"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new mke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mke, e, t)
      }
    },
    dbn = class bke extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DeleteTestParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "test_name", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new bke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bke, e, t)
      }
    },
    a1t = class vke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DeleteTestResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new vke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vke, e, t)
      }
    },
    fbn = class yke extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SaveFileParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new yke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yke, e, t)
      }
    },
    uMi = class wke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SaveFileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new wke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wke, e, t)
      }
    },
    gbn = class Cke extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.includeChildren = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSymbolsParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_range", kind: "message", T: pbn, opt: !0 },
          { no: 3, name: "include_children", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Cke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Cke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Cke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Cke, e, t)
      }
    },
    pbn = class Ske extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumberInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSymbolsParams.LineRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new Ske().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ske().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ske().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ske, e, t)
      }
    },
    dMi = class xke extends _ {
      constructor(e) {
        super(), (this.symbols = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSymbolsResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbols", kind: "message", T: toe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xke, e, t)
      }
    },
    fMi = class kke extends _ {
      constructor(e) {
        super(),
          (this.editPlan = ""),
          (this.fileRegions = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ParallelApplyParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "edit_plan", kind: "scalar", T: 9 },
          { no: 2, name: "file_regions", kind: "message", T: mbn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new kke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kke, e, t)
      }
    },
    mbn = class Eke extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ParallelApplyParams.FileRegion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: Hu },
        ])
      }
      static fromBinary(e, t) {
        return new Eke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Eke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Eke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Eke, e, t)
      }
    },
    l1t = class Ike extends _ {
      constructor(e) {
        super(), (this.fileResults = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ParallelApplyResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_results", kind: "message", T: fVe, repeated: !0 },
          { no: 2, name: "error", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Ike().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ike().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ike().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ike, e, t)
      }
    },
    fVe = class Dke extends _ {
      constructor(e) {
        super(),
          (this.filePath = ""),
          (this.isApplied = !1),
          (this.applyFailed = !1),
          (this.linterErrors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ParallelApplyResult.FileResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_path", kind: "scalar", T: 9 },
          { no: 2, name: "diff", kind: "message", T: nG },
          { no: 3, name: "is_applied", kind: "scalar", T: 8 },
          { no: 4, name: "apply_failed", kind: "scalar", T: 8 },
          { no: 5, name: "error", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "linter_errors", kind: "message", T: k$, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Dke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Dke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Dke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Dke, e, t)
      }
    },
    bbn = class Tke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ParallelApplyStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Tke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Tke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Tke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Tke, e, t)
      }
    },
    gMi = class Pke extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.isBackground = !1),
          (this.requireUserApproval = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandV2Params"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "cwd", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "new_session", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "options", kind: "message", T: vbn, opt: !0 },
          { no: 5, name: "is_background", kind: "scalar", T: 8 },
          { no: 6, name: "require_user_approval", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Pke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Pke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Pke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Pke, e, t)
      }
    },
    vbn = class Lke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "timeout", kind: "scalar", T: 5, opt: !0 },
          { no: 2, name: "skip_ai_check", kind: "scalar", T: 8, opt: !0 },
          {
            no: 3,
            name: "command_run_timeout_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 4,
            name: "command_change_check_interval_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 5,
            name: "ai_finish_check_max_attempts",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 6,
            name: "ai_finish_check_interval_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 7, name: "delayer_interval_ms", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Lke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Lke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Lke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Lke, e, t)
      }
    },
    rG = class Nke extends _ {
      constructor(e) {
        super(),
          (this.output = ""),
          (this.exitCode = 0),
          (this.poppedOutIntoBackground = !1),
          (this.isRunningInBackground = !1),
          (this.notInterrupted = !1),
          (this.resultingWorkingDirectory = ""),
          (this.didUserChange = !1),
          (this.endedReason = BT.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandV2Result"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "output", kind: "scalar", T: 9 },
          { no: 2, name: "exit_code", kind: "scalar", T: 5 },
          { no: 3, name: "rejected", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "popped_out_into_background", kind: "scalar", T: 8 },
          { no: 5, name: "is_running_in_background", kind: "scalar", T: 8 },
          { no: 6, name: "not_interrupted", kind: "scalar", T: 8 },
          { no: 7, name: "resulting_working_directory", kind: "scalar", T: 9 },
          { no: 8, name: "did_user_change", kind: "scalar", T: 8 },
          { no: 9, name: "ended_reason", kind: "enum", T: v.getEnumType(BT) },
          { no: 10, name: "exit_code_v2", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Nke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Nke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Nke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Nke, e, t)
      }
    },
    ybn = class Rke extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.isBackground = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunTerminalCommandV2Stream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "is_background", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new Rke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Rke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Rke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Rke, e, t)
      }
    },
    wbn = class Ake extends _ {
      constructor(e) {
        super(), (this.ruleNames = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FetchRulesStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "rule_names", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Ake().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ake().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ake().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ake, e, t)
      }
    },
    Cbn = class Mke extends _ {
      constructor(e) {
        super(), (this.instruction = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PlannerStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instruction", kind: "scalar", T: 9 },
          { no: 2, name: "plan", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Mke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Mke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Mke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Mke, e, t)
      }
    },
    pMi = class $ke extends _ {
      constructor(e) {
        super(), (this.searchTerm = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebSearchParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "search_term", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new $ke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $ke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $ke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($ke, e, t)
      }
    },
    c1t = class Fke extends _ {
      constructor(e) {
        super(), (this.references = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "references", kind: "message", T: Sbn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Fke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Fke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Fke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Fke, e, t)
      }
    },
    Sbn = class Oke extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.url = ""),
          (this.chunk = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebSearchResult.WebReference"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "url", kind: "scalar", T: 9 },
          { no: 3, name: "chunk", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Oke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Oke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Oke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Oke, e, t)
      }
    },
    xbn = class Bke extends _ {
      constructor(e) {
        super(), (this.searchTerm = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebSearchStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "search_term", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Bke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Bke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Bke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Bke, e, t)
      }
    },
    mMi = class _ke extends _ {
      constructor(e) {
        super(), (this.url = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebViewerParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "url", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new _ke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _ke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _ke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_ke, e, t)
      }
    },
    h1t = class Uke extends _ {
      constructor(e) {
        super(), (this.url = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebViewerResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "url", kind: "scalar", T: 9 },
          { no: 2, name: "screenshot", kind: "message", T: OT },
        ])
      }
      static fromBinary(e, t) {
        return new Uke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Uke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Uke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Uke, e, t)
      }
    },
    kbn = class Hke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebViewerStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Hke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Hke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Hke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Hke, e, t)
      }
    },
    bMi = class Vke extends _ {
      constructor(e) {
        super(), (this.tools = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MCPParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tools", kind: "message", T: u1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Vke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Vke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Vke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Vke, e, t)
      }
    },
    u1t = class Wke extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.description = ""),
          (this.parameters = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MCPParams.Tool"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "description", kind: "scalar", T: 9 },
          { no: 3, name: "parameters", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Wke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Wke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Wke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Wke, e, t)
      }
    },
    d1t = class qke extends _ {
      constructor(e) {
        super(),
          (this.selectedTool = ""),
          (this.result = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MCPResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "selected_tool", kind: "scalar", T: 9 },
          { no: 2, name: "result", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new qke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qke, e, t)
      }
    },
    Ebn = class jke extends _ {
      constructor(e) {
        super(), (this.tools = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MCPStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tools", kind: "message", T: u1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new jke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jke, e, t)
      }
    },
    vMi = class zke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryParams"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new zke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zke, e, t)
      }
    },
    f1t = class Gke extends _ {
      constructor(e) {
        super(), (this.humanChanges = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 40,
            name: "human_changes",
            kind: "message",
            T: yMi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Gke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Gke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Gke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Gke, e, t)
      }
    },
    Ibn = class Jke extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumberExclusive = 0),
          (this.beforeContextLines = []),
          (this.removedLines = []),
          (this.addedLines = []),
          (this.afterContextLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryResult.RenderedDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 },
          {
            no: 3,
            name: "before_context_lines",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 4, name: "removed_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "added_lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 6,
            name: "after_context_lines",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Jke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Jke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Jke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Jke, e, t)
      }
    },
    yMi = class Kke extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.renderedDiffs = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryResult.HumanChange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "rendered_diffs",
            kind: "message",
            T: Ibn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Kke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Kke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Kke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Kke, e, t)
      }
    },
    Dbn = class Yke extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new Yke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Yke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Yke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Yke, e, t)
      }
    },
    g1t = class Xke extends _ {
      constructor(e) {
        super(),
          (this.file = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.codeLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugLocation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
          { no: 4, name: "code_lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Xke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Xke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Xke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Xke, e, t)
      }
    },
    Toe = class Qke extends _ {
      constructor(e) {
        super(),
          (this.locations = []),
          (this.id = ""),
          (this.description = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugReport"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "locations", kind: "message", T: g1t, repeated: !0 },
          { no: 2, name: "id", kind: "scalar", T: 9 },
          { no: 3, name: "description", kind: "scalar", T: 9 },
          { no: 4, name: "confidence", kind: "scalar", T: 2, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Qke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Qke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Qke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Qke, e, t)
      }
    },
    wMi = class Zke extends _ {
      constructor(e) {
        super(), (this.bugReports = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugReports"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_reports", kind: "message", T: Toe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Zke().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Zke().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Zke().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Zke, e, t)
      }
    },
    p1t = class eEe extends _ {
      constructor(e) {
        super(),
          (this.inBackgroundSubsidized = !1),
          (this.hasTelemetry = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBugBotRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "git_diff", kind: "message", T: FT },
          { no: 2, name: "model_details", kind: "message", T: zr },
          { no: 3, name: "user_instructions", kind: "scalar", T: 9, opt: !0 },
          {
            no: 4,
            name: "bug_detection_guidelines",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          { no: 5, name: "iterations", kind: "scalar", T: 5, opt: !0 },
          {
            no: 12,
            name: "unified_context_lines",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 6, name: "in_background_subsidized", kind: "scalar", T: 8 },
          { no: 7, name: "session_id", kind: "scalar", T: 9, opt: !0 },
          { no: 8, name: "price_id", kind: "scalar", T: 9, opt: !0 },
          { no: 9, name: "has_telemetry", kind: "scalar", T: 8 },
          { no: 10, name: "constrain_to_file", kind: "scalar", T: 9, opt: !0 },
          {
            no: 11,
            name: "constrain_to_range",
            kind: "message",
            T: Tbn,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new eEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eEe, e, t)
      }
    },
    Tbn = class tEe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBugBotRequest.Range"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new tEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tEe, e, t)
      }
    },
    wCo = class iEe extends _ {
      constructor(e) {
        super(), (this.seed = ""), (this.date = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RunBugBotPromptProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "req", kind: "message", T: p1t },
          { no: 2, name: "seed", kind: "scalar", T: 9 },
          { no: 3, name: "date", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iEe, e, t)
      }
    },
    Pbn = class sEe extends _ {
      constructor(e) {
        super(), (this.date = ""), (this.seed = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotDiscriminatorPromptProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "req", kind: "message", T: p1t },
          { no: 2, name: "bug", kind: "message", T: Toe },
          { no: 3, name: "date", kind: "scalar", T: 9 },
          { no: 4, name: "seed", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sEe, e, t)
      }
    },
    CCo = class nEe extends _ {
      constructor(e) {
        super(), (this.isRealBug = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotDiscriminatorTrainingPromptProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "props", kind: "message", T: Pbn },
          { no: 2, name: "is_real_bug", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new nEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nEe, e, t)
      }
    },
    CMi = class rEe extends _ {
      constructor(e) {
        super(),
          (this.prefixUrl = ""),
          (this.docName = ""),
          (this.isDifferentPrefixOrigin = !1),
          (this.truePrefixUrl = ""),
          (this.public = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationMetadata"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "prefix_url", kind: "scalar", T: 9 },
          { no: 2, name: "doc_name", kind: "scalar", T: 9 },
          { no: 3, name: "is_different_prefix_origin", kind: "scalar", T: 8 },
          { no: 4, name: "true_prefix_url", kind: "scalar", T: 9 },
          { no: 5, name: "public", kind: "scalar", T: 8 },
          { no: 6, name: "team_id", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new rEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rEe, e, t)
      }
    },
    SMi = class oEe extends _ {
      constructor(e) {
        super(),
          (this.docName = ""),
          (this.pageUrl = ""),
          (this.documentationChunk = ""),
          (this.score = 0),
          (this.pageTitle = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_name", kind: "scalar", T: 9 },
          { no: 2, name: "page_url", kind: "scalar", T: 9 },
          { no: 3, name: "documentation_chunk", kind: "scalar", T: 9 },
          { no: 4, name: "score", kind: "scalar", T: 2 },
          { no: 5, name: "page_title", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oEe, e, t)
      }
    },
    Lbn = class aEe extends _ {
      constructor(e) {
        super(),
          (this.docIdentifier = ""),
          (this.query = ""),
          (this.topK = 0),
          (this.rerankResults = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationQueryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
          { no: 2, name: "query", kind: "scalar", T: 9 },
          { no: 3, name: "top_k", kind: "scalar", T: 13 },
          { no: 4, name: "rerank_results", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new aEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aEe, e, t)
      }
    },
    Nbn = class lEe extends _ {
      constructor(e) {
        super(),
          (this.docIdentifier = ""),
          (this.docName = ""),
          (this.docChunks = []),
          (this.status = Poe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationQueryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
          { no: 2, name: "doc_name", kind: "scalar", T: 9 },
          { no: 3, name: "doc_chunks", kind: "message", T: SMi, repeated: !0 },
          { no: 4, name: "status", kind: "enum", T: v.getEnumType(Poe) },
        ])
      }
      static fromBinary(e, t) {
        return new lEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lEe, e, t)
      }
    },
    Poe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NOT_FOUND = 1)] = "NOT_FOUND"),
      (i[(i.SUCCESS = 2)] = "SUCCESS"),
      (i[(i.FAILURE = 3)] = "FAILURE")
  })(Poe || (Poe = {})),
    v.util.setEnumType(Poe, "aiserver.v1.DocumentationQueryResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_NOT_FOUND" },
      { no: 2, name: "STATUS_SUCCESS" },
      { no: 3, name: "STATUS_FAILURE" },
    ])
  var oG = class cEe extends _ {
      constructor(e) {
        super(),
          (this.type = ls.UNSPECIFIED),
          (this.data = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerCapabilityRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "enum", T: v.getEnumType(ls) },
          {
            no: 2,
            name: "loop_on_lints",
            kind: "message",
            T: Abn,
            oneof: "data",
          },
          {
            no: 3,
            name: "loop_on_tests",
            kind: "message",
            T: Mbn,
            oneof: "data",
          },
          { no: 4, name: "mega_planner", kind: "message", T: $bn, oneof: "data" },
          {
            no: 5,
            name: "loop_on_command",
            kind: "message",
            T: Fbn,
            oneof: "data",
          },
          { no: 6, name: "tool_call", kind: "message", T: Obn, oneof: "data" },
          { no: 7, name: "diff_review", kind: "message", T: Bbn, oneof: "data" },
          {
            no: 8,
            name: "context_picking",
            kind: "message",
            T: Ubn,
            oneof: "data",
          },
          { no: 9, name: "edit_trail", kind: "message", T: Hbn, oneof: "data" },
          {
            no: 10,
            name: "auto_context",
            kind: "message",
            T: Vbn,
            oneof: "data",
          },
          {
            no: 11,
            name: "context_planner",
            kind: "message",
            T: Wbn,
            oneof: "data",
          },
          {
            no: 12,
            name: "remember_this",
            kind: "message",
            T: qbn,
            oneof: "data",
          },
          { no: 13, name: "decomposer", kind: "message", T: _bn, oneof: "data" },
          {
            no: 14,
            name: "cursor_rules",
            kind: "message",
            T: jbn,
            oneof: "data",
          },
        ])
      }
      static fromBinary(e, t) {
        return new cEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cEe, e, t)
      }
    },
    ls
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LOOP_ON_LINTS = 1)] = "LOOP_ON_LINTS"),
      (i[(i.LOOP_ON_TESTS = 2)] = "LOOP_ON_TESTS"),
      (i[(i.MEGA_PLANNER = 3)] = "MEGA_PLANNER"),
      (i[(i.LOOP_ON_COMMAND = 4)] = "LOOP_ON_COMMAND"),
      (i[(i.TOOL_CALL = 5)] = "TOOL_CALL"),
      (i[(i.DIFF_REVIEW = 6)] = "DIFF_REVIEW"),
      (i[(i.CONTEXT_PICKING = 7)] = "CONTEXT_PICKING"),
      (i[(i.EDIT_TRAIL = 8)] = "EDIT_TRAIL"),
      (i[(i.AUTO_CONTEXT = 9)] = "AUTO_CONTEXT"),
      (i[(i.CONTEXT_PLANNER = 10)] = "CONTEXT_PLANNER"),
      (i[(i.DIFF_HISTORY = 11)] = "DIFF_HISTORY"),
      (i[(i.REMEMBER_THIS = 12)] = "REMEMBER_THIS"),
      (i[(i.DECOMPOSER = 13)] = "DECOMPOSER"),
      (i[(i.USES_CODEBASE = 14)] = "USES_CODEBASE"),
      (i[(i.TOOL_FORMER = 15)] = "TOOL_FORMER"),
      (i[(i.CURSOR_RULES = 16)] = "CURSOR_RULES")
  })(ls || (ls = {})),
    v.util.setEnumType(
      ls,
      "aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType",
      [
        { no: 0, name: "COMPOSER_CAPABILITY_TYPE_UNSPECIFIED" },
        { no: 1, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_LINTS" },
        { no: 2, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_TESTS" },
        { no: 3, name: "COMPOSER_CAPABILITY_TYPE_MEGA_PLANNER" },
        { no: 4, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_COMMAND" },
        { no: 5, name: "COMPOSER_CAPABILITY_TYPE_TOOL_CALL" },
        { no: 6, name: "COMPOSER_CAPABILITY_TYPE_DIFF_REVIEW" },
        { no: 7, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PICKING" },
        { no: 8, name: "COMPOSER_CAPABILITY_TYPE_EDIT_TRAIL" },
        { no: 9, name: "COMPOSER_CAPABILITY_TYPE_AUTO_CONTEXT" },
        { no: 10, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PLANNER" },
        { no: 11, name: "COMPOSER_CAPABILITY_TYPE_DIFF_HISTORY" },
        { no: 12, name: "COMPOSER_CAPABILITY_TYPE_REMEMBER_THIS" },
        { no: 13, name: "COMPOSER_CAPABILITY_TYPE_DECOMPOSER" },
        { no: 14, name: "COMPOSER_CAPABILITY_TYPE_USES_CODEBASE" },
        { no: 15, name: "COMPOSER_CAPABILITY_TYPE_TOOL_FORMER" },
        { no: 16, name: "COMPOSER_CAPABILITY_TYPE_CURSOR_RULES" },
      ],
    )
  var bl
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ADD_FILE_TO_CONTEXT = 1)] = "ADD_FILE_TO_CONTEXT"),
      (i[(i.RUN_TERMINAL_COMMAND = 2)] = "RUN_TERMINAL_COMMAND"),
      (i[(i.ITERATE = 3)] = "ITERATE"),
      (i[(i.REMOVE_FILE_FROM_CONTEXT = 4)] = "REMOVE_FILE_FROM_CONTEXT"),
      (i[(i.SEMANTIC_SEARCH_CODEBASE = 5)] = "SEMANTIC_SEARCH_CODEBASE")
  })(bl || (bl = {})),
    v.util.setEnumType(bl, "aiserver.v1.ComposerCapabilityRequest.ToolType", [
      { no: 0, name: "TOOL_TYPE_UNSPECIFIED" },
      { no: 1, name: "TOOL_TYPE_ADD_FILE_TO_CONTEXT" },
      { no: 2, name: "TOOL_TYPE_RUN_TERMINAL_COMMAND" },
      { no: 3, name: "TOOL_TYPE_ITERATE" },
      { no: 4, name: "TOOL_TYPE_REMOVE_FILE_FROM_CONTEXT" },
      { no: 5, name: "TOOL_TYPE_SEMANTIC_SEARCH_CODEBASE" },
    ])
  var xMi = class hEe extends _ {
      constructor(e) {
        super(),
          (this.type = bl.UNSPECIFIED),
          (this.name = ""),
          (this.properties = {}),
          (this.required = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerCapabilityRequest.ToolSchema"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "enum", T: v.getEnumType(bl) },
          { no: 2, name: "name", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "properties",
            kind: "map",
            K: 9,
            V: { kind: "message", T: Rbn },
          },
          { no: 4, name: "required", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new hEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hEe, e, t)
      }
    },
    Rbn = class uEe extends _ {
      constructor(e) {
        super(), (this.type = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerCapabilityRequest.SchemaProperty"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "scalar", T: 9 },
          { no: 2, name: "description", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new uEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uEe, e, t)
      }
    },
    Abn = class dEe extends _ {
      constructor(e) {
        super(), (this.linterErrors = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "linter_errors", kind: "message", T: Cf, repeated: !0 },
          { no: 2, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dEe, e, t)
      }
    },
    Mbn = class fEe extends _ {
      constructor(e) {
        super(), (this.testNames = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "test_names", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new fEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fEe, e, t)
      }
    },
    $bn = class gEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new gEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gEe, e, t)
      }
    },
    Fbn = class pEe extends _ {
      constructor(e) {
        super(), (this.command = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "output", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pEe, e, t)
      }
    },
    Obn = class mEe extends _ {
      constructor(e) {
        super(),
          (this.toolSchemas = []),
          (this.relevantFiles = []),
          (this.filesInContext = []),
          (this.semanticSearchFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerCapabilityRequest.ToolCallCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "tool_schemas", kind: "message", T: xMi, repeated: !0 },
          { no: 3, name: "relevant_files", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "files_in_context", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 5,
            name: "semantic_search_files",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new mEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mEe, e, t)
      }
    },
    Bbn = class bEe extends _ {
      constructor(e) {
        super(), (this.diffs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "diffs", kind: "message", T: kMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new bEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bEe, e, t)
      }
    },
    kMi = class vEe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.chunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "chunks", kind: "message", T: EMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new vEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vEe, e, t)
      }
    },
    EMi = class yEe extends _ {
      constructor(e) {
        super(),
          (this.oldLines = []),
          (this.newLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "old_range", kind: "message", T: Kf },
          { no: 4, name: "new_range", kind: "message", T: Kf },
        ])
      }
      static fromBinary(e, t) {
        return new yEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yEe, e, t)
      }
    },
    _bn = class wEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.DecomposerCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new wEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wEe, e, t)
      }
    },
    Ubn = class CEe extends _ {
      constructor(e) {
        super(),
          (this.potentialContextFiles = []),
          (this.potentialContextCodeChunks = []),
          (this.filesInContext = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "potential_context_files",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 3,
            name: "potential_context_code_chunks",
            kind: "message",
            T: QRi,
            repeated: !0,
          },
          { no: 4, name: "files_in_context", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new CEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CEe, e, t)
      }
    },
    Hbn = class SEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.EditTrailCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SEe, e, t)
      }
    },
    Vbn = class xEe extends _ {
      constructor(e) {
        super(), (this.additionalFiles = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.AutoContextCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "additional_files", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xEe, e, t)
      }
    },
    Wbn = class kEe extends _ {
      constructor(e) {
        super(), (this.attachedCodeChunks = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "attached_code_chunks",
            kind: "message",
            T: QRi,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new kEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kEe, e, t)
      }
    },
    qbn = class EEe extends _ {
      constructor(e) {
        super(), (this.memory = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.RememberThisCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "memory", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new EEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EEe, e, t)
      }
    },
    jbn = class IEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ComposerCapabilityRequest.CursorRulesCapability"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new IEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IEe, e, t)
      }
    },
    IMi = class DEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShadowHealthCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new DEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DEe, e, t)
      }
    },
    DMi = class TEe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShadowHealthCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new TEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TEe, e, t)
      }
    },
    gVe = class PEe extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.includeQuickFixes = !1),
          (this.doNotUseInProdNewFilesShouldBeTemporarilyCreatedForIncreasedAccuracy =
            !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: zbn, repeated: !0 },
          { no: 2, name: "include_quick_fixes", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "do_not_use_in_prod_new_files_should_be_temporarily_created_for_increased_accuracy",
            kind: "scalar",
            T: 8,
          },
        ])
      }
      static fromBinary(e, t) {
        return new PEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PEe, e, t)
      }
    },
    zbn = class LEe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.initialContent = ""),
          (this.finalContent = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeRequest.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "initial_content", kind: "scalar", T: 9 },
          { no: 3, name: "final_content", kind: "scalar", T: 9 },
          {
            no: 4,
            name: "get_all_lints_not_just_delta_lints_for_ranges_in_final_model",
            kind: "message",
            T: Gbn,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new LEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LEe, e, t)
      }
    },
    Gbn = class NEe extends _ {
      constructor(e) {
        super(), (this.ranges = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.GetLintsForChangeRequest.File.RangeCollection"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ranges", kind: "message", T: Jbn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NEe, e, t)
      }
    },
    Jbn = class REe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.startColumn = 0),
          (this.endLineNumber = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeRequest.File.IRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "start_column", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new REe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new REe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new REe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(REe, e, t)
      }
    },
    _B = class AEe extends _ {
      constructor(e) {
        super(), (this.lints = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lints", kind: "message", T: pVe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new AEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AEe, e, t)
      }
    },
    pVe = class MEe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = ""),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          (this.quickFixes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeResponse.Lint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "severity", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 6,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
          { no: 9, name: "quick_fixes", kind: "message", T: TMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new MEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MEe, e, t)
      }
    },
    TMi = class $Ee extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.kind = ""),
          (this.isPreferred = !1),
          (this.edits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "kind", kind: "scalar", T: 9 },
          { no: 3, name: "is_preferred", kind: "scalar", T: 8 },
          { no: 4, name: "edits", kind: "message", T: PMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new $Ee().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Ee().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Ee().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Ee, e, t)
      }
    },
    PMi = class FEe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new FEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FEe, e, t)
      }
    },
    hk
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.CODEBASE = 1)] = "CODEBASE"),
      (i[(i.LONG_FILE = 2)] = "LONG_FILE"),
      (i[(i.DOCS = 3)] = "DOCS")
  })(hk || (hk = {})),
    v.util.setEnumType(hk, "aiserver.v1.ChunkType", [
      { no: 0, name: "CHUNK_TYPE_UNSPECIFIED" },
      { no: 1, name: "CHUNK_TYPE_CODEBASE" },
      { no: 2, name: "CHUNK_TYPE_LONG_FILE" },
      { no: 3, name: "CHUNK_TYPE_DOCS" },
    ])
  var Kbn = class OEe extends _ {
      constructor(e) {
        super(), (this.editPlan = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamParallelApplyRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_block", kind: "message", T: ed },
          { no: 2, name: "file", kind: "message", T: AC },
          { no: 3, name: "edit_plan", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new OEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OEe, e, t)
      }
    },
    Ybn = class BEe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamParallelApplyResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new BEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BEe, e, t)
      }
    },
    Q9 = class _Ee extends _ {
      constructor(e) {
        super(), (this.request = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatRequestWithTools"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "stream_unified_chat_request",
            kind: "message",
            T: vVe,
            oneof: "request",
          },
          {
            no: 2,
            name: "client_side_tool_v2_result",
            kind: "message",
            T: Zc,
            oneof: "request",
          },
        ])
      }
      static fromBinary(e, t) {
        return new _Ee().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Ee().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Ee().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Ee, e, t)
      }
    },
    Xbn = class UEe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatResponseWithTools"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "client_side_tool_v2_call",
            kind: "message",
            T: EAi,
            oneof: "response",
          },
          {
            no: 2,
            name: "stream_unified_chat_response",
            kind: "message",
            T: AMi,
            oneof: "response",
          },
          {
            no: 3,
            name: "conversation_summary",
            kind: "message",
            T: L$,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new UEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UEe, e, t)
      }
    },
    SCo = class HEe extends _ {
      constructor(e) {
        super(), (this.strategy = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationSummaryStrategy"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "plain_text_summary",
            kind: "scalar",
            T: 9,
            oneof: "strategy",
          },
          {
            no: 2,
            name: "arbitrary_summary_plus_tool_result_truncation",
            kind: "message",
            T: Qbn,
            oneof: "strategy",
          },
        ])
      }
      static fromBinary(e, t) {
        return new HEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HEe, e, t)
      }
    },
    Qbn = class VEe extends _ {
      constructor(e) {
        super(),
          (this.toolResultTruncationLength = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ConversationSummaryStrategy.ArbitrarySummaryPlusToolResultTruncation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "arbitrary_summary", kind: "message", T: L$ },
          { no: 2, name: "tool_result_truncation_length", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new VEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VEe, e, t)
      }
    },
    L$ = class WEe extends _ {
      constructor(e) {
        super(),
          (this.summary = ""),
          (this.truncationLastBubbleIdInclusive = ""),
          (this.clientShouldStartSendingFromInclusiveBubbleId = ""),
          (this.previousConversationSummaryBubbleId = ""),
          (this.includesToolResults = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationSummary"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "summary", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "truncation_last_bubble_id_inclusive",
            kind: "scalar",
            T: 9,
          },
          {
            no: 3,
            name: "client_should_start_sending_from_inclusive_bubble_id",
            kind: "scalar",
            T: 9,
          },
          {
            no: 4,
            name: "previous_conversation_summary_bubble_id",
            kind: "scalar",
            T: 9,
          },
          { no: 5, name: "includes_tool_results", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new WEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WEe, e, t)
      }
    },
    mVe = class qEe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextToRank"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "line_range", kind: "message", T: Kf, opt: !0 },
          { no: 4, name: "code_block", kind: "message", T: ed, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new qEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qEe, e, t)
      }
    },
    m1t = class jEe extends _ {
      constructor(e) {
        super(), (this.score = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RankedContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context", kind: "message", T: mVe },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new jEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jEe, e, t)
      }
    },
    b1t = class zEe extends _ {
      constructor(e) {
        super(), (this.chunks = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationCitation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunks", kind: "message", T: SMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new zEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zEe, e, t)
      }
    },
    LMi = class GEe extends _ {
      constructor(e) {
        super(), (this.references = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebCitation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "references", kind: "message", T: NMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new GEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GEe, e, t)
      }
    },
    NMi = class JEe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.url = ""),
          (this.chunk = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WebReference"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "title", kind: "scalar", T: 9 },
          { no: 1, name: "url", kind: "scalar", T: 9 },
          { no: 3, name: "chunk", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new JEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JEe, e, t)
      }
    },
    bVe = class KEe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.url = ""),
          (this.chunk = ""),
          (this.name = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocsReference"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "url", kind: "scalar", T: 9 },
          { no: 3, name: "chunk", kind: "scalar", T: 9 },
          { no: 4, name: "name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new KEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KEe, e, t)
      }
    },
    Zbn = class YEe extends _ {
      constructor(e) {
        super(), (this.message = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StatusUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "metadata", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YEe, e, t)
      }
    },
    RMi = class XEe extends _ {
      constructor(e) {
        super(), (this.updates = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StatusUpdates"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "updates", kind: "message", T: Zbn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new XEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XEe, e, t)
      }
    },
    evn = class QEe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.documents = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankDocumentsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "documents", kind: "message", T: ivn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new QEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QEe, e, t)
      }
    },
    tvn = class ZEe extends _ {
      constructor(e) {
        super(), (this.documents = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankDocumentsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "documents", kind: "message", T: svn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ZEe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZEe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZEe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZEe, e, t)
      }
    },
    ivn = class eIe extends _ {
      constructor(e) {
        super(), (this.content = ""), (this.id = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Document"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "content", kind: "scalar", T: 9 },
          { no: 2, name: "id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new eIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eIe, e, t)
      }
    },
    svn = class tIe extends _ {
      constructor(e) {
        super(),
          (this.documentId = ""),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentIdsWithScores"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "document_id", kind: "scalar", T: 9 },
          { no: 2, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new tIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tIe, e, t)
      }
    },
    v1t = class iIe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.diffHistory = []),
          (this.diffHistoryTimestamps = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerFileDiffHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 3,
            name: "diff_history_timestamps",
            kind: "scalar",
            T: 1,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new iIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iIe, e, t)
      }
    },
    nvn = class sIe extends _ {
      constructor(e) {
        super(), (this.workspaceUris = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EnvironmentInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "exthost_platform", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "exthost_arch", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "exthost_release", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "exthost_shell", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "local_timestamp", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "workspace_uris", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new sIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sIe, e, t)
      }
    },
    vVe = class nIe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.fullConversationHeadersOnly = []),
          (this.documentationIdentifiers = []),
          (this.externalLinks = []),
          (this.diffsForCompressingFiles = []),
          (this.multiFileLinterErrors = []),
          (this.fileDiffHistories = []),
          (this.quotes = []),
          (this.additionalRankedContext = []),
          (this.isChat = !1),
          (this.conversationId = ""),
          (this.repositoryInfoShouldQueryStaging = !1),
          (this.isAgentic = !1),
          (this.supportedTools = []),
          (this.enableYoloMode = !1),
          (this.yoloPrompt = ""),
          (this.useUnifiedChatPrompt = !1),
          (this.mcpTools = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          {
            no: 30,
            name: "full_conversation_headers_only",
            kind: "message",
            T: dvn,
            repeated: !0,
          },
          { no: 2, name: "allow_long_file_scan", kind: "scalar", T: 8, opt: !0 },
          { no: 3, name: "explicit_context", kind: "message", T: Sf },
          {
            no: 4,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 5, name: "model_details", kind: "message", T: zr },
          { no: 6, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 7,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
          {
            no: 9,
            name: "external_links",
            kind: "message",
            T: FSt,
            repeated: !0,
          },
          { no: 10, name: "project_context", kind: "message", T: Ha, opt: !0 },
          {
            no: 11,
            name: "diffs_for_compressing_files",
            kind: "message",
            T: rvn,
            repeated: !0,
          },
          { no: 12, name: "compress_edits", kind: "scalar", T: 8, opt: !0 },
          { no: 13, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
          {
            no: 14,
            name: "multi_file_linter_errors",
            kind: "message",
            T: Cf,
            repeated: !0,
          },
          { no: 15, name: "current_file", kind: "message", T: Ho },
          { no: 16, name: "recent_edits", kind: "message", T: ovn, opt: !0 },
          {
            no: 17,
            name: "use_reference_composer_diff_prompt",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 18,
            name: "file_diff_histories",
            kind: "message",
            T: v1t,
            repeated: !0,
          },
          {
            no: 19,
            name: "use_new_compression_scheme",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 21, name: "quotes", kind: "message", T: eVe, repeated: !0 },
          {
            no: 20,
            name: "additional_ranked_context",
            kind: "message",
            T: m1t,
            repeated: !0,
          },
          { no: 22, name: "is_chat", kind: "scalar", T: 8 },
          { no: 23, name: "conversation_id", kind: "scalar", T: 9 },
          { no: 24, name: "repository_info", kind: "message", T: rl },
          {
            no: 25,
            name: "repository_info_should_query_staging",
            kind: "scalar",
            T: 8,
          },
          { no: 26, name: "environment_info", kind: "message", T: nvn },
          { no: 27, name: "is_agentic", kind: "scalar", T: 8 },
          {
            no: 28,
            name: "conversation_summary",
            kind: "message",
            T: L$,
            opt: !0,
          },
          {
            no: 29,
            name: "supported_tools",
            kind: "enum",
            T: v.getEnumType(jt),
            repeated: !0,
          },
          { no: 31, name: "enable_yolo_mode", kind: "scalar", T: 8 },
          { no: 32, name: "yolo_prompt", kind: "scalar", T: 9 },
          { no: 33, name: "use_unified_chat_prompt", kind: "scalar", T: 8 },
          { no: 34, name: "mcp_tools", kind: "message", T: u1t, repeated: !0 },
          {
            no: 35,
            name: "use_full_inputs_context",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 36, name: "is_resume", kind: "scalar", T: 8, opt: !0 },
          {
            no: 37,
            name: "allow_model_fallbacks",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 38,
            name: "number_of_times_shown_fallback_model_warning",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new nIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nIe, e, t)
      }
    },
    rvn = class rIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.redRanges = []),
          (this.redRangesReversed = []),
          (this.startHash = ""),
          (this.endHash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatRequest.RedDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "red_ranges", kind: "message", T: ck, repeated: !0 },
          {
            no: 3,
            name: "red_ranges_reversed",
            kind: "message",
            T: ck,
            repeated: !0,
          },
          { no: 4, name: "start_hash", kind: "scalar", T: 9 },
          { no: 5, name: "end_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new rIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rIe, e, t)
      }
    },
    ovn = class oIe extends _ {
      constructor(e) {
        super(),
          (this.codeBlockInfo = []),
          (this.finalFileValues = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatRequest.RecentEdits"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "code_block_info",
            kind: "message",
            T: avn,
            repeated: !0,
          },
          {
            no: 2,
            name: "final_file_values",
            kind: "message",
            T: lvn,
            repeated: !0,
          },
          {
            no: 3,
            name: "edits_belong_to_composer_generation_uuid",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new oIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oIe, e, t)
      }
    },
    avn = class aIe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamUnifiedChatRequest.RecentEdits.CodeBlockInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "content_before", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "content_after", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "generation_uuid", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "version", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new aIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aIe, e, t)
      }
    },
    lvn = class lIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamUnifiedChatRequest.RecentEdits.FileInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new lIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lIe, e, t)
      }
    },
    AMi = class cIe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 22, name: "server_bubble_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "debugging_only_chat_prompt",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          {
            no: 3,
            name: "debugging_only_token_count",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 4, name: "document_citation", kind: "message", T: b1t },
          { no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "is_big_file", kind: "scalar", T: 8, opt: !0 },
          { no: 7, name: "intermediate_text", kind: "scalar", T: 9, opt: !0 },
          {
            no: 10,
            name: "is_using_slow_request",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 8, name: "chunk_identity", kind: "message", T: cvn, opt: !0 },
          { no: 9, name: "docs_reference", kind: "message", T: bVe, opt: !0 },
          { no: 11, name: "web_citation", kind: "message", T: LMi, opt: !0 },
          { no: 12, name: "status_updates", kind: "message", T: RMi, opt: !0 },
          { no: 13, name: "tool_call", kind: "message", T: dmn, opt: !0 },
          {
            no: 14,
            name: "should_break_ai_message",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 15, name: "partial_tool_call", kind: "message", T: umn, opt: !0 },
          { no: 16, name: "final_tool_result", kind: "message", T: hvn, opt: !0 },
          { no: 17, name: "symbol_link", kind: "message", T: yVe, opt: !0 },
          { no: 19, name: "file_link", kind: "message", T: y1t, opt: !0 },
          {
            no: 18,
            name: "conversation_summary",
            kind: "message",
            T: L$,
            opt: !0,
          },
          {
            no: 20,
            name: "service_status_update",
            kind: "message",
            T: MMi,
            opt: !0,
          },
          {
            no: 21,
            name: "viewable_git_context",
            kind: "message",
            T: $Mi,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new cIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cIe, e, t)
      }
    },
    cvn = class hIe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.text = ""),
          (this.chunkType = hk.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatResponse.ChunkIdentity"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
          { no: 4, name: "text", kind: "scalar", T: 9 },
          { no: 5, name: "chunk_type", kind: "enum", T: v.getEnumType(hk) },
        ])
      }
      static fromBinary(e, t) {
        return new hIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hIe, e, t)
      }
    },
    hvn = class uIe extends _ {
      constructor(e) {
        super(), (this.toolCallId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamUnifiedChatResponse.FinalToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool_call_id", kind: "scalar", T: 9 },
          { no: 2, name: "result", kind: "message", T: Zc },
        ])
      }
      static fromBinary(e, t) {
        return new uIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uIe, e, t)
      }
    },
    MMi = class dIe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.codicon = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ServiceStatusUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "codicon", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "allow_command_links_potentially_unsafe_please_only_use_for_handwritten_trusted_markdown",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 4,
            name: "action_to_run_on_status_update",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new dIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dIe, e, t)
      }
    },
    yVe = class fIe extends _ {
      constructor(e) {
        super(),
          (this.symbolName = ""),
          (this.symbolSearchString = ""),
          (this.relativeWorkspacePath = ""),
          (this.roughLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SymbolLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbol_name", kind: "scalar", T: 9 },
          { no: 2, name: "symbol_search_string", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "rough_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new fIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fIe, e, t)
      }
    },
    y1t = class gIe extends _ {
      constructor(e) {
        super(),
          (this.displayName = ""),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "display_name", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gIe, e, t)
      }
    },
    uvn = class pIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.redRanges = []),
          (this.redRangesReversed = []),
          (this.startHash = ""),
          (this.endHash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RedDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "red_ranges", kind: "message", T: ck, repeated: !0 },
          {
            no: 3,
            name: "red_ranges_reversed",
            kind: "message",
            T: ck,
            repeated: !0,
          },
          { no: 4, name: "start_hash", kind: "scalar", T: 9 },
          { no: 5, name: "end_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new pIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pIe, e, t)
      }
    },
    dvn = class mIe extends _ {
      constructor(e) {
        super(),
          (this.bubbleId = ""),
          (this.type = fs.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessageHeader"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bubble_id", kind: "scalar", T: 9 },
          { no: 2, name: "server_bubble_id", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "type", kind: "enum", T: v.getEnumType(fs) },
        ])
      }
      static fromBinary(e, t) {
        return new mIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mIe, e, t)
      }
    },
    w1t = class bIe extends _ {
      constructor(e) {
        super(),
          (this.fileDetails = ""),
          (this.fileName = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_details", kind: "scalar", T: 9 },
          { no: 2, name: "file_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new bIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bIe, e, t)
      }
    },
    fvn = class vIe extends _ {
      constructor(e) {
        super(),
          (this.description = ""),
          (this.message = ""),
          (this.files = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ViewableCommitProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "description", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "files", kind: "message", T: w1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new vIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vIe, e, t)
      }
    },
    gvn = class yIe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.body = ""),
          (this.files = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ViewablePRProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "body", kind: "scalar", T: 9 },
          { no: 3, name: "files", kind: "message", T: w1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new yIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yIe, e, t)
      }
    },
    pvn = class wIe extends _ {
      constructor(e) {
        super(),
          (this.files = []),
          (this.diffPreface = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ViewableDiffProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: w1t, repeated: !0 },
          { no: 2, name: "diff_preface", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new wIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wIe, e, t)
      }
    },
    $Mi = class CIe extends _ {
      constructor(e) {
        super(), (this.diffData = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ViewableGitContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "commit_data", kind: "message", T: fvn, opt: !0 },
          { no: 2, name: "pull_request_data", kind: "message", T: gvn, opt: !0 },
          { no: 3, name: "diff_data", kind: "message", T: pvn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new CIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CIe, e, t)
      }
    },
    Ha = class SIe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.type = fs.UNSPECIFIED),
          (this.attachedCodeChunks = []),
          (this.codebaseContextChunks = []),
          (this.commits = []),
          (this.pullRequests = []),
          (this.gitDiffs = []),
          (this.assistantSuggestedDiffs = []),
          (this.interpreterResults = []),
          (this.images = []),
          (this.attachedFolders = []),
          (this.approximateLintErrors = []),
          (this.bubbleId = ""),
          (this.attachedFoldersNew = []),
          (this.lints = []),
          (this.userResponsesToSuggestedCodeBlocks = []),
          (this.relevantFiles = []),
          (this.toolResults = []),
          (this.notepads = []),
          (this.capabilities = []),
          (this.editTrailContexts = []),
          (this.suggestedCodeBlocks = []),
          (this.diffsForCompressingFiles = []),
          (this.multiFileLinterErrors = []),
          (this.diffHistories = []),
          (this.recentlyViewedFiles = []),
          (this.recentLocationsHistory = []),
          (this.isAgentic = !1),
          (this.fileDiffTrajectories = []),
          (this.existedSubsequentTerminalCommand = !1),
          (this.existedPreviousTerminalCommand = !1),
          (this.docsReferences = []),
          (this.webReferences = []),
          (this.attachedFoldersListDirResults = []),
          (this.humanChanges = []),
          (this.attachedHumanChanges = !1),
          (this.summarizedComposers = []),
          (this.cursorRules = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "type", kind: "enum", T: v.getEnumType(fs) },
          {
            no: 3,
            name: "attached_code_chunks",
            kind: "message",
            T: _T,
            repeated: !0,
          },
          {
            no: 4,
            name: "codebase_context_chunks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          { no: 5, name: "commits", kind: "message", T: XN, repeated: !0 },
          { no: 6, name: "pull_requests", kind: "message", T: k1t, repeated: !0 },
          { no: 7, name: "git_diffs", kind: "message", T: FT, repeated: !0 },
          {
            no: 8,
            name: "assistant_suggested_diffs",
            kind: "message",
            T: aG,
            repeated: !0,
          },
          {
            no: 9,
            name: "interpreter_results",
            kind: "message",
            T: _Mi,
            repeated: !0,
          },
          { no: 10, name: "images", kind: "message", T: OT, repeated: !0 },
          {
            no: 11,
            name: "attached_folders",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 12,
            name: "approximate_lint_errors",
            kind: "message",
            T: wvn,
            repeated: !0,
          },
          { no: 13, name: "bubble_id", kind: "scalar", T: 9 },
          { no: 32, name: "server_bubble_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 14,
            name: "attached_folders_new",
            kind: "message",
            T: S1t,
            repeated: !0,
          },
          { no: 15, name: "lints", kind: "message", T: OMi, repeated: !0 },
          {
            no: 16,
            name: "user_responses_to_suggested_code_blocks",
            kind: "message",
            T: Ivn,
            repeated: !0,
          },
          { no: 17, name: "relevant_files", kind: "scalar", T: 9, repeated: !0 },
          { no: 18, name: "tool_results", kind: "message", T: FMi, repeated: !0 },
          { no: 19, name: "notepads", kind: "message", T: bvn, repeated: !0 },
          {
            no: 20,
            name: "is_capability_iteration",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 21, name: "capabilities", kind: "message", T: oG, repeated: !0 },
          {
            no: 22,
            name: "edit_trail_contexts",
            kind: "message",
            T: yvn,
            repeated: !0,
          },
          {
            no: 23,
            name: "suggested_code_blocks",
            kind: "message",
            T: Evn,
            repeated: !0,
          },
          {
            no: 24,
            name: "diffs_for_compressing_files",
            kind: "message",
            T: uvn,
            repeated: !0,
          },
          {
            no: 25,
            name: "multi_file_linter_errors",
            kind: "message",
            T: zRi,
            repeated: !0,
          },
          {
            no: 26,
            name: "diff_histories",
            kind: "message",
            T: E1t,
            repeated: !0,
          },
          {
            no: 27,
            name: "recently_viewed_files",
            kind: "message",
            T: _T,
            repeated: !0,
          },
          {
            no: 28,
            name: "recent_locations_history",
            kind: "message",
            T: BMi,
            repeated: !0,
          },
          { no: 29, name: "is_agentic", kind: "scalar", T: 8 },
          {
            no: 30,
            name: "file_diff_trajectories",
            kind: "message",
            T: v1t,
            repeated: !0,
          },
          {
            no: 31,
            name: "conversation_summary",
            kind: "message",
            T: L$,
            opt: !0,
          },
          {
            no: 33,
            name: "existed_subsequent_terminal_command",
            kind: "scalar",
            T: 8,
          },
          {
            no: 34,
            name: "existed_previous_terminal_command",
            kind: "scalar",
            T: 8,
          },
          {
            no: 35,
            name: "docs_references",
            kind: "message",
            T: bVe,
            repeated: !0,
          },
          {
            no: 36,
            name: "web_references",
            kind: "message",
            T: NMi,
            repeated: !0,
          },
          { no: 37, name: "git_context", kind: "message", T: $Mi, opt: !0 },
          {
            no: 38,
            name: "attached_folders_list_dir_results",
            kind: "message",
            T: Ioe,
            repeated: !0,
          },
          {
            no: 39,
            name: "cached_conversation_summary",
            kind: "message",
            T: L$,
            opt: !0,
          },
          {
            no: 40,
            name: "human_changes",
            kind: "message",
            T: Svn,
            repeated: !0,
          },
          { no: 41, name: "attached_human_changes", kind: "scalar", T: 8 },
          {
            no: 42,
            name: "summarized_composers",
            kind: "message",
            T: C1t,
            repeated: !0,
          },
          { no: 43, name: "cursor_rules", kind: "message", T: iG, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SIe, e, t)
      }
    },
    fs
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.HUMAN = 1)] = "HUMAN"),
      (i[(i.AI = 2)] = "AI")
  })(fs || (fs = {})),
    v.util.setEnumType(fs, "aiserver.v1.ConversationMessage.MessageType", [
      { no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
      { no: 1, name: "MESSAGE_TYPE_HUMAN" },
      { no: 2, name: "MESSAGE_TYPE_AI" },
    ])
  var _T = class xIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          (this.languageIdentifier = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.CodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 4,
            name: "summarization_strategy",
            kind: "enum",
            T: v.getEnumType(N$),
            opt: !0,
          },
          { no: 5, name: "language_identifier", kind: "scalar", T: 9 },
          { no: 6, name: "intent", kind: "enum", T: v.getEnumType(ev), opt: !0 },
          { no: 7, name: "is_final_version", kind: "scalar", T: 8, opt: !0 },
          { no: 8, name: "is_first_version", kind: "scalar", T: 8, opt: !0 },
          { no: 9, name: "contents_are_missing", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xIe, e, t)
      }
    },
    ev
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.COMPOSER_FILE = 1)] = "COMPOSER_FILE"),
      (i[(i.COMPRESSED_COMPOSER_FILE = 2)] = "COMPRESSED_COMPOSER_FILE"),
      (i[(i.RECENTLY_VIEWED_FILE = 3)] = "RECENTLY_VIEWED_FILE"),
      (i[(i.OUTLINE = 4)] = "OUTLINE"),
      (i[(i.MENTIONED_FILE = 5)] = "MENTIONED_FILE"),
      (i[(i.CODE_SELECTION = 6)] = "CODE_SELECTION")
  })(ev || (ev = {})),
    v.util.setEnumType(ev, "aiserver.v1.ConversationMessage.CodeChunk.Intent", [
      { no: 0, name: "INTENT_UNSPECIFIED" },
      { no: 1, name: "INTENT_COMPOSER_FILE" },
      { no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
      { no: 3, name: "INTENT_RECENTLY_VIEWED_FILE" },
      { no: 4, name: "INTENT_OUTLINE" },
      { no: 5, name: "INTENT_MENTIONED_FILE" },
      { no: 6, name: "INTENT_CODE_SELECTION" },
    ])
  var N$
  ;(function (i) {
    ;(i[(i.NONE_UNSPECIFIED = 0)] = "NONE_UNSPECIFIED"),
      (i[(i.SUMMARIZED = 1)] = "SUMMARIZED"),
      (i[(i.EMBEDDED = 2)] = "EMBEDDED")
  })(N$ || (N$ = {})),
    v.util.setEnumType(
      N$,
      "aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy",
      [
        { no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
        { no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
        { no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
      ],
    )
  var FMi = class kIe extends _ {
      constructor(e) {
        super(),
          (this.toolCallId = ""),
          (this.toolName = ""),
          (this.toolIndex = 0),
          (this.args = ""),
          (this.rawArgs = ""),
          (this.attachedCodeChunks = []),
          (this.images = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.ToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool_call_id", kind: "scalar", T: 9 },
          { no: 2, name: "tool_name", kind: "scalar", T: 9 },
          { no: 3, name: "tool_index", kind: "scalar", T: 13 },
          { no: 4, name: "args", kind: "scalar", T: 9 },
          { no: 5, name: "raw_args", kind: "scalar", T: 9 },
          {
            no: 6,
            name: "attached_code_chunks",
            kind: "message",
            T: _T,
            repeated: !0,
          },
          { no: 7, name: "content", kind: "scalar", T: 9, opt: !0 },
          { no: 8, name: "result", kind: "message", T: Zc },
          { no: 9, name: "error", kind: "message", T: cVe, opt: !0 },
          { no: 10, name: "images", kind: "message", T: OT, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new kIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kIe, e, t)
      }
    },
    xCo = class EIe extends _ {
      constructor(e) {
        super(),
          (this.ranges = []),
          (this.content = ""),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.MultiRangeCodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ranges", kind: "message", T: mvn, repeated: !0 },
          { no: 2, name: "content", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new EIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EIe, e, t)
      }
    },
    mvn = class IIe extends _ {
      constructor(e) {
        super(), (this.priority = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "range", kind: "message", T: ck },
          { no: 2, name: "priority", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new IIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IIe, e, t)
      }
    },
    bvn = class DIe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.text = ""),
          (this.attachedCodeChunks = []),
          (this.attachedFolders = []),
          (this.commits = []),
          (this.pullRequests = []),
          (this.gitDiffs = []),
          (this.images = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.NotepadContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "attached_code_chunks",
            kind: "message",
            T: _T,
            repeated: !0,
          },
          { no: 4, name: "attached_folders", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "commits", kind: "message", T: XN, repeated: !0 },
          { no: 6, name: "pull_requests", kind: "message", T: k1t, repeated: !0 },
          { no: 7, name: "git_diffs", kind: "message", T: FT, repeated: !0 },
          { no: 8, name: "images", kind: "message", T: OT, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new DIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DIe, e, t)
      }
    },
    C1t = class TIe extends _ {
      constructor(e) {
        super(), (this.name = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.ComposerContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "conversation_summary", kind: "message", T: L$ },
        ])
      }
      static fromBinary(e, t) {
        return new TIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TIe, e, t)
      }
    },
    vvn = class PIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contextLines = ""),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.EditLocation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "range", kind: "message", T: ck },
          { no: 4, name: "initial_range", kind: "message", T: ck },
          { no: 5, name: "context_lines", kind: "scalar", T: 9 },
          { no: 6, name: "text", kind: "scalar", T: 9 },
          { no: 7, name: "text_range", kind: "message", T: ck },
        ])
      }
      static fromBinary(e, t) {
        return new PIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PIe, e, t)
      }
    },
    yvn = class LIe extends _ {
      constructor(e) {
        super(),
          (this.uniqueId = ""),
          (this.editTrailSorted = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.EditTrailContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "unique_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "edit_trail_sorted",
            kind: "message",
            T: vvn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new LIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LIe, e, t)
      }
    },
    wvn = class NIe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.value = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.startColumn = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.ApproximateLintError"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "value", kind: "scalar", T: 9 },
          { no: 3, name: "start_line", kind: "scalar", T: 5 },
          { no: 4, name: "end_line", kind: "scalar", T: 5 },
          { no: 5, name: "start_column", kind: "scalar", T: 5 },
          { no: 6, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new NIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NIe, e, t)
      }
    },
    OMi = class RIe extends _ {
      constructor(e) {
        super(), (this.chatCodeblockModelValue = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.Lints"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lints", kind: "message", T: _B },
          { no: 2, name: "chat_codeblock_model_value", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new RIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RIe, e, t)
      }
    },
    BMi = class AIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.RecentLocation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new AIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AIe, e, t)
      }
    },
    Cvn = class MIe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumberExclusive = 0),
          (this.beforeContextLines = []),
          (this.removedLines = []),
          (this.addedLines = []),
          (this.afterContextLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.RenderedDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 },
          {
            no: 3,
            name: "before_context_lines",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 4, name: "removed_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "added_lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 6,
            name: "after_context_lines",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new MIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MIe, e, t)
      }
    },
    Svn = class $Ie extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.renderedDiffs = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ConversationMessage.HumanChange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "rendered_diffs",
            kind: "message",
            T: Cvn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new $Ie().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Ie().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Ie().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Ie, e, t)
      }
    },
    kCo = class FIe extends _ {
      constructor(e) {
        super(), (this.query = ""), (this.files = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "files", kind: "message", T: xvn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new FIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FIe, e, t)
      }
    },
    xvn = class OIe extends _ {
      constructor(e) {
        super(),
          (this.relativePath = ""),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SearchFileInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new OIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OIe, e, t)
      }
    },
    S1t = class BIe extends _ {
      constructor(e) {
        super(),
          (this.relativePath = ""),
          (this.files = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FolderInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "files", kind: "message", T: kvn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new BIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BIe, e, t)
      }
    },
    kvn = class _Ie extends _ {
      constructor(e) {
        super(),
          (this.relativePath = ""),
          (this.content = ""),
          (this.truncated = !1),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FolderFileInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "content", kind: "scalar", T: 9 },
          { no: 3, name: "truncated", kind: "scalar", T: 8 },
          { no: 4, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new _Ie().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Ie().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Ie().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Ie, e, t)
      }
    },
    _Mi = class UIe extends _ {
      constructor(e) {
        super(),
          (this.output = ""),
          (this.success = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.InterpreterResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "output", kind: "scalar", T: 9 },
          { no: 2, name: "success", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new UIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UIe, e, t)
      }
    },
    aG = class HIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.chunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleFileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "chunks", kind: "message", T: x1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new HIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HIe, e, t)
      }
    },
    x1t = class VIe extends _ {
      constructor(e) {
        super(),
          (this.oldLines = []),
          (this.newLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleFileDiff.Chunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "old_range", kind: "message", T: Kf },
          { no: 4, name: "new_range", kind: "message", T: Kf },
        ])
      }
      static fromBinary(e, t) {
        return new VIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VIe, e, t)
      }
    },
    XN = class WIe extends _ {
      constructor(e) {
        super(),
          (this.sha = ""),
          (this.message = ""),
          (this.description = ""),
          (this.diff = []),
          (this.author = ""),
          (this.date = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Commit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "sha", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "description", kind: "scalar", T: 9 },
          { no: 4, name: "diff", kind: "message", T: J9, repeated: !0 },
          { no: 5, name: "author", kind: "scalar", T: 9 },
          { no: 6, name: "date", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new WIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WIe, e, t)
      }
    },
    k1t = class qIe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.body = ""),
          (this.diff = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PullRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "body", kind: "scalar", T: 9 },
          { no: 3, name: "diff", kind: "message", T: J9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new qIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qIe, e, t)
      }
    },
    Evn = class jIe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SuggestedCodeBlock"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new jIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jIe, e, t)
      }
    },
    Ivn = class zIe extends _ {
      constructor(e) {
        super(),
          (this.userResponseType = Zm.UNSPECIFIED),
          (this.filePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UserResponseToSuggestedCodeBlock"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "user_response_type",
            kind: "enum",
            T: v.getEnumType(Zm),
          },
          { no: 2, name: "file_path", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "user_modifications_to_suggested_code_blocks",
            kind: "message",
            T: J9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new zIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zIe, e, t)
      }
    },
    Zm
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ACCEPT = 1)] = "ACCEPT"),
      (i[(i.REJECT = 2)] = "REJECT"),
      (i[(i.MODIFY = 3)] = "MODIFY")
  })(Zm || (Zm = {})),
    v.util.setEnumType(
      Zm,
      "aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType",
      [
        { no: 0, name: "USER_RESPONSE_TYPE_UNSPECIFIED" },
        { no: 1, name: "USER_RESPONSE_TYPE_ACCEPT" },
        { no: 2, name: "USER_RESPONSE_TYPE_REJECT" },
        { no: 3, name: "USER_RESPONSE_TYPE_MODIFY" },
      ],
    )
  var Dvn = class GIe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.fileContent = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextRerankingCandidateFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "file_content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new GIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GIe, e, t)
      }
    },
    lG = class JIe extends _ {
      constructor(e) {
        super(),
          (this.chunks = []),
          (this.editor = UB.UNSPECIFIED),
          (this.hitTimeout = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerFileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunks", kind: "message", T: wVe, repeated: !0 },
          { no: 2, name: "editor", kind: "enum", T: v.getEnumType(UB) },
          { no: 3, name: "hit_timeout", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new JIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JIe, e, t)
      }
    },
    UB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.AI = 1)] = "AI"),
      (i[(i.HUMAN = 2)] = "HUMAN")
  })(UB || (UB = {})),
    v.util.setEnumType(UB, "aiserver.v1.ComposerFileDiff.Editor", [
      { no: 0, name: "EDITOR_UNSPECIFIED" },
      { no: 1, name: "EDITOR_AI" },
      { no: 2, name: "EDITOR_HUMAN" },
    ])
  var wVe = class KIe extends _ {
      constructor(e) {
        super(),
          (this.diffString = ""),
          (this.oldStart = 0),
          (this.newStart = 0),
          (this.oldLines = 0),
          (this.newLines = 0),
          (this.linesRemoved = 0),
          (this.linesAdded = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ComposerFileDiff.ChunkDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff_string", kind: "scalar", T: 9 },
          { no: 2, name: "old_start", kind: "scalar", T: 5 },
          { no: 3, name: "new_start", kind: "scalar", T: 5 },
          { no: 4, name: "old_lines", kind: "scalar", T: 5 },
          { no: 5, name: "new_lines", kind: "scalar", T: 5 },
          { no: 6, name: "lines_removed", kind: "scalar", T: 5 },
          { no: 7, name: "lines_added", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new KIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KIe, e, t)
      }
    },
    E1t = class YIe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.diffs = []),
          (this.timestamp = 0),
          (this.uniqueId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DiffHistoryData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "diffs", kind: "message", T: lG, repeated: !0 },
          { no: 3, name: "timestamp", kind: "scalar", T: 1 },
          { no: 4, name: "unique_id", kind: "scalar", T: 9 },
          { no: 5, name: "start_to_end_diff", kind: "message", T: lG },
        ])
      }
      static fromBinary(e, t) {
        return new YIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YIe, e, t)
      }
    },
    Tvn = class XIe extends _ {
      constructor(e) {
        super(),
          (this.line = 0),
          (this.character = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSubgraphPosition"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 5 },
          { no: 2, name: "character", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new XIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XIe, e, t)
      }
    },
    Pvn = class QIe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.startCharacter = 0),
          (this.endLine = 0),
          (this.endCharacter = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSubgraphRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "start_character", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
          { no: 4, name: "end_character", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new QIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QIe, e, t)
      }
    },
    Lvn = class ZIe extends _ {
      constructor(e) {
        super(),
          (this.type = ""),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSubgraphContextItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "type", kind: "scalar", T: 9 },
          { no: 3, name: "content", kind: "scalar", T: 9 },
          { no: 4, name: "range", kind: "message", T: Pvn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ZIe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZIe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZIe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZIe, e, t)
      }
    },
    I1t = class eDe extends _ {
      constructor(e) {
        super(),
          (this.uri = ""),
          (this.symbolName = ""),
          (this.positions = []),
          (this.contextItems = []),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSubgraphFullContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9 },
          { no: 2, name: "symbol_name", kind: "scalar", T: 9 },
          { no: 3, name: "positions", kind: "message", T: Tvn, repeated: !0 },
          { no: 4, name: "context_items", kind: "message", T: Lvn, repeated: !0 },
          { no: 5, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new eDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eDe, e, t)
      }
    },
    Loe
  ;(function (i) {
    ;(i[(i.FS_UPLOAD_ERROR_TYPE_UNSPECIFIED = 0)] =
      "FS_UPLOAD_ERROR_TYPE_UNSPECIFIED"),
      (i[(i.FS_UPLOAD_ERROR_TYPE_NON_EXISTANT = 1)] =
        "FS_UPLOAD_ERROR_TYPE_NON_EXISTANT"),
      (i[(i.FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH = 2)] =
        "FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH")
  })(Loe || (Loe = {})),
    v.util.setEnumType(Loe, "aiserver.v1.FSUploadErrorType", [
      { no: 0, name: "FS_UPLOAD_ERROR_TYPE_UNSPECIFIED" },
      { no: 1, name: "FS_UPLOAD_ERROR_TYPE_NON_EXISTANT" },
      { no: 2, name: "FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH" },
    ])
  var Noe
  ;(function (i) {
    ;(i[(i.FS_SYNC_ERROR_TYPE_UNSPECIFIED = 0)] =
      "FS_SYNC_ERROR_TYPE_UNSPECIFIED"),
      (i[(i.FS_SYNC_ERROR_TYPE_NON_EXISTANT = 1)] =
        "FS_SYNC_ERROR_TYPE_NON_EXISTANT"),
      (i[(i.FS_SYNC_ERROR_TYPE_HASH_MISMATCH = 2)] =
        "FS_SYNC_ERROR_TYPE_HASH_MISMATCH")
  })(Noe || (Noe = {})),
    v.util.setEnumType(Noe, "aiserver.v1.FSSyncErrorType", [
      { no: 0, name: "FS_SYNC_ERROR_TYPE_UNSPECIFIED" },
      { no: 1, name: "FS_SYNC_ERROR_TYPE_NON_EXISTANT" },
      { no: 2, name: "FS_SYNC_ERROR_TYPE_HASH_MISMATCH" },
    ])
  var ECo = class tDe extends _ {
      constructor(e) {
        super(),
          (this.uuid = ""),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.modelVersion = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSUploadFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "contents", kind: "scalar", T: 9 },
          { no: 4, name: "model_version", kind: "scalar", T: 5 },
          { no: 5, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new tDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tDe, e, t)
      }
    },
    ICo = class iDe extends _ {
      constructor(e) {
        super(),
          (this.error = Loe.FS_UPLOAD_ERROR_TYPE_UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSUploadFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error", kind: "enum", T: v.getEnumType(Loe) },
        ])
      }
      static fromBinary(e, t) {
        return new iDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iDe, e, t)
      }
    },
    cG = class sDe extends _ {
      constructor(e) {
        super(),
          (this.modelVersion = 0),
          (this.relativeWorkspacePath = ""),
          (this.updates = []),
          (this.expectedFileLength = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FilesyncUpdateWithModelVersion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_version", kind: "scalar", T: 5 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "updates", kind: "message", T: Nvn, repeated: !0 },
          { no: 4, name: "expected_file_length", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new sDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sDe, e, t)
      }
    },
    Nvn = class nDe extends _ {
      constructor(e) {
        super(),
          (this.startPosition = 0),
          (this.endPosition = 0),
          (this.changeLength = 0),
          (this.replacedString = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SingleUpdateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_position", kind: "scalar", T: 5 },
          { no: 2, name: "end_position", kind: "scalar", T: 5 },
          { no: 3, name: "change_length", kind: "scalar", T: 5 },
          { no: 4, name: "replaced_string", kind: "scalar", T: 9 },
          { no: 5, name: "range", kind: "message", T: Hu },
        ])
      }
      static fromBinary(e, t) {
        return new nDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nDe, e, t)
      }
    },
    DCo = class rDe extends _ {
      constructor(e) {
        super(),
          (this.uuid = ""),
          (this.relativeWorkspacePath = ""),
          (this.modelVersion = 0),
          (this.filesyncUpdates = []),
          (this.sha256Hash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSSyncFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "model_version", kind: "scalar", T: 5 },
          {
            no: 4,
            name: "filesync_updates",
            kind: "message",
            T: cG,
            repeated: !0,
          },
          { no: 5, name: "sha256_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new rDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rDe, e, t)
      }
    },
    TCo = class oDe extends _ {
      constructor(e) {
        super(),
          (this.error = Noe.FS_SYNC_ERROR_TYPE_UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSSyncFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error", kind: "enum", T: v.getEnumType(Noe) },
        ])
      }
      static fromBinary(e, t) {
        return new oDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oDe, e, t)
      }
    },
    PCo = class aDe extends _ {
      constructor(e) {
        super(), (this.uuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSIsEnabledForUserRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new aDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aDe, e, t)
      }
    },
    LCo = class lDe extends _ {
      constructor(e) {
        super(), (this.enabled = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSIsEnabledForUserResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "enabled", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new lDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lDe, e, t)
      }
    },
    NCo = class cDe extends _ {
      constructor(e) {
        super(),
          (this.uuid = ""),
          (this.authId = ""),
          (this.relativeWorkspacePath = ""),
          (this.modelVersion = 0),
          (this.filesyncUpdates = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSGetFileContentsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "auth_id", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "model_version", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "filesync_updates",
            kind: "message",
            T: cG,
            repeated: !0,
          },
          { no: 6, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new cDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cDe, e, t)
      }
    },
    RCo = class hDe extends _ {
      constructor(e) {
        super(), (this.contents = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSGetFileContentsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "contents", kind: "scalar", T: 9 },
          { no: 2, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new hDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hDe, e, t)
      }
    },
    Rvn = class uDe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.required = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "requested_version", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "required", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new uDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uDe, e, t)
      }
    },
    ACo = class dDe extends _ {
      constructor(e) {
        super(),
          (this.authId = ""),
          (this.filesyncUpdates = []),
          (this.fileRequests = []),
          (this.getAllRecentFiles = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSGetMultiFileContentsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "auth_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "filesync_updates",
            kind: "message",
            T: cG,
            repeated: !0,
          },
          { no: 3, name: "file_requests", kind: "message", T: Rvn, repeated: !0 },
          { no: 4, name: "get_all_recent_files", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new dDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dDe, e, t)
      }
    },
    Avn = class fDe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.modelVersion = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileRetrieved"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "model_version", kind: "scalar", T: 5 },
          { no: 4, name: "last_modified", kind: "message", T: PSt },
        ])
      }
      static fromBinary(e, t) {
        return new fDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fDe, e, t)
      }
    },
    MCo = class gDe extends _ {
      constructor(e) {
        super(), (this.files = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSGetMultiFileContentsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: Avn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new gDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gDe, e, t)
      }
    },
    $Co = class pDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSInternalHealthCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "from_server", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pDe, e, t)
      }
    },
    FCo = class mDe extends _ {
      constructor(e) {
        super(), (this.success = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSInternalHealthCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "success", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new mDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mDe, e, t)
      }
    },
    OCo = class bDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSConfigRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new bDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bDe, e, t)
      }
    },
    BCo = class vDe extends _ {
      constructor(e) {
        super(), (this.checkFilesyncHashPercent = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FSConfigResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "check_filesync_hash_percent", kind: "scalar", T: 2 },
          {
            no: 2,
            name: "rate_limiter_breaker_reset_time_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 3, name: "rate_limiter_rps", kind: "scalar", T: 5, opt: !0 },
          {
            no: 4,
            name: "rate_limiter_burst_capacity",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 5,
            name: "max_recent_updates_stored",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 6,
            name: "max_model_version_cache_size",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 7,
            name: "max_file_size_to_sync_bytes",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 8,
            name: "sync_retry_max_attempts",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 9,
            name: "sync_retry_initial_delay_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 10,
            name: "sync_retry_time_multiplier",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 11,
            name: "file_sync_status_max_cache_size",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 12,
            name: "successive_syncs_required_for_reliance",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 13,
            name: "extra_successful_syncs_needed_after_errors",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 14,
            name: "big_change_stripping_threshold_bytes",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 15,
            name: "last_n_updates_to_send",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 16,
            name: "file_sync_status_ttl_ms",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 17, name: "sync_debounce_ms", kind: "scalar", T: 5, opt: !0 },
          {
            no: 18,
            name: "sync_update_threshold",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new vDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vDe, e, t)
      }
    },
    HB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ACCEPT = 1)] = "ACCEPT"),
      (i[(i.REJECT = 2)] = "REJECT"),
      (i[(i.PARTIAL_ACCEPT = 3)] = "PARTIAL_ACCEPT")
  })(HB || (HB = {})),
    v.util.setEnumType(HB, "aiserver.v1.CppFate", [
      { no: 0, name: "CPP_FATE_UNSPECIFIED" },
      { no: 1, name: "CPP_FATE_ACCEPT" },
      { no: 2, name: "CPP_FATE_REJECT" },
      { no: 3, name: "CPP_FATE_PARTIAL_ACCEPT" },
    ])
  var MC
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LINE_CHANGE = 1)] = "LINE_CHANGE"),
      (i[(i.TYPING = 2)] = "TYPING"),
      (i[(i.OPTION_HOLD = 3)] = "OPTION_HOLD"),
      (i[(i.LINTER_ERRORS = 4)] = "LINTER_ERRORS"),
      (i[(i.PARAMETER_HINTS = 5)] = "PARAMETER_HINTS"),
      (i[(i.CURSOR_PREDICTION = 6)] = "CURSOR_PREDICTION"),
      (i[(i.MANUAL_TRIGGER = 7)] = "MANUAL_TRIGGER"),
      (i[(i.EDITOR_CHANGE = 8)] = "EDITOR_CHANGE"),
      (i[(i.LSP_SUGGESTIONS = 9)] = "LSP_SUGGESTIONS")
  })(MC || (MC = {})),
    v.util.setEnumType(MC, "aiserver.v1.CppSource", [
      { no: 0, name: "CPP_SOURCE_UNSPECIFIED" },
      { no: 1, name: "CPP_SOURCE_LINE_CHANGE" },
      { no: 2, name: "CPP_SOURCE_TYPING" },
      { no: 3, name: "CPP_SOURCE_OPTION_HOLD" },
      { no: 4, name: "CPP_SOURCE_LINTER_ERRORS" },
      { no: 5, name: "CPP_SOURCE_PARAMETER_HINTS" },
      { no: 6, name: "CPP_SOURCE_CURSOR_PREDICTION" },
      { no: 7, name: "CPP_SOURCE_MANUAL_TRIGGER" },
      { no: 8, name: "CPP_SOURCE_EDITOR_CHANGE" },
      { no: 9, name: "CPP_SOURCE_LSP_SUGGESTIONS" },
    ])
  var UMi = class yDe extends _ {
      constructor(e) {
        super(), (this.source = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppIntentInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "source", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new yDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yDe, e, t)
      }
    },
    Mvn = class wDe extends _ {
      constructor(e) {
        super(), (this.label = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSuggestion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "label", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new wDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wDe, e, t)
      }
    },
    $vn = class CDe extends _ {
      constructor(e) {
        super(), (this.suggestions = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSuggestedItems"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "suggestions", kind: "message", T: Mvn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new CDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CDe, e, t)
      }
    },
    Fvn = class SDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShouldTurnOnCppOnboardingRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new SDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SDe, e, t)
      }
    },
    Ovn = class xDe extends _ {
      constructor(e) {
        super(),
          (this.shouldTurnOnCppOnboarding = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShouldTurnOnCppOnboardingResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "should_turn_on_cpp_onboarding", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new xDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xDe, e, t)
      }
    },
    D1t = class kDe extends _ {
      constructor(e) {
        super(),
          (this.diffHistory = []),
          (this.contextItems = []),
          (this.diffHistoryKeys = []),
          (this.fileDiffHistories = []),
          (this.mergedDiffHistories = []),
          (this.blockDiffPatches = []),
          (this.parameterHints = []),
          (this.lspContexts = []),
          (this.additionalFiles = []),
          (this.filesyncUpdates = []),
          (this.timeSinceRequestStart = 0),
          (this.timeAtRequestSend = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCppRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "linter_errors", kind: "message", T: Cf, opt: !0 },
          {
            no: 13,
            name: "context_items",
            kind: "message",
            T: N1t,
            repeated: !0,
          },
          {
            no: 5,
            name: "diff_history_keys",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 6, name: "give_debug_output", kind: "scalar", T: 8, opt: !0 },
          {
            no: 7,
            name: "file_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 8,
            name: "merged_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 9,
            name: "block_diff_patches",
            kind: "message",
            T: $1t,
            repeated: !0,
          },
          { no: 10, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
          { no: 11, name: "is_debug", kind: "scalar", T: 8, opt: !0 },
          { no: 12, name: "immediately_ack", kind: "scalar", T: 8, opt: !0 },
          { no: 17, name: "enable_more_context", kind: "scalar", T: 8, opt: !0 },
          {
            no: 14,
            name: "parameter_hints",
            kind: "message",
            T: WMi,
            repeated: !0,
          },
          { no: 15, name: "lsp_contexts", kind: "message", T: I1t, repeated: !0 },
          { no: 16, name: "cpp_intent_info", kind: "message", T: UMi, opt: !0 },
          { no: 18, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 19,
            name: "additional_files",
            kind: "message",
            T: Jvn,
            repeated: !0,
          },
          {
            no: 20,
            name: "control_token",
            kind: "enum",
            T: v.getEnumType(hG),
            opt: !0,
          },
          { no: 21, name: "client_time", kind: "scalar", T: 1, opt: !0 },
          {
            no: 22,
            name: "filesync_updates",
            kind: "message",
            T: cG,
            repeated: !0,
          },
          { no: 23, name: "time_since_request_start", kind: "scalar", T: 1 },
          { no: 24, name: "time_at_request_send", kind: "scalar", T: 1 },
          {
            no: 25,
            name: "client_timezone_offset",
            kind: "scalar",
            T: 1,
            opt: !0,
          },
          {
            no: 26,
            name: "lsp_suggested_items",
            kind: "message",
            T: $vn,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new kDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kDe, e, t)
      }
    },
    hG
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.QUIET = 1)] = "QUIET"),
      (i[(i.LOUD = 2)] = "LOUD"),
      (i[(i.OP = 3)] = "OP")
  })(hG || (hG = {})),
    v.util.setEnumType(hG, "aiserver.v1.StreamCppRequest.ControlToken", [
      { no: 0, name: "CONTROL_TOKEN_UNSPECIFIED" },
      { no: 1, name: "CONTROL_TOKEN_QUIET" },
      { no: 2, name: "CONTROL_TOKEN_LOUD" },
      { no: 3, name: "CONTROL_TOKEN_OP" },
    ])
  var Bvn = class EDe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCppResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "suggestion_start_line", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "suggestion_confidence", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "done_stream", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "debug_model_output", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "debug_model_input", kind: "scalar", T: 9, opt: !0 },
          { no: 7, name: "debug_stream_time", kind: "scalar", T: 9, opt: !0 },
          { no: 8, name: "debug_total_time", kind: "scalar", T: 9, opt: !0 },
          { no: 9, name: "debug_ttft_time", kind: "scalar", T: 9, opt: !0 },
          { no: 10, name: "debug_server_timing", kind: "scalar", T: 9, opt: !0 },
          { no: 11, name: "range_to_replace", kind: "message", T: Kf, opt: !0 },
          {
            no: 12,
            name: "cursor_prediction_target",
            kind: "message",
            T: _vn,
            opt: !0,
          },
          { no: 13, name: "done_edit", kind: "scalar", T: 8, opt: !0 },
          { no: 14, name: "model_info", kind: "message", T: Uvn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new EDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EDe, e, t)
      }
    },
    _vn = class IDe extends _ {
      constructor(e) {
        super(),
          (this.relativePath = ""),
          (this.lineNumberOneIndexed = 0),
          (this.expectedContent = ""),
          (this.shouldRetriggerCpp = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCppResponse.CursorPredictionTarget"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 3, name: "expected_content", kind: "scalar", T: 9 },
          { no: 4, name: "should_retrigger_cpp", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new IDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IDe, e, t)
      }
    },
    Uvn = class DDe extends _ {
      constructor(e) {
        super(),
          (this.isFusedCursorPredictionModel = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCppResponse.ModelInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "is_fused_cursor_prediction_model",
            kind: "scalar",
            T: 8,
          },
        ])
      }
      static fromBinary(e, t) {
        return new DDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DDe, e, t)
      }
    },
    T1t = class TDe extends _ {
      constructor(e) {
        super(), (this.model = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppConfigRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
          { no: 2, name: "model", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new TDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TDe, e, t)
      }
    },
    Hvn = class PDe extends _ {
      constructor(e) {
        super(),
          (this.heuristics = []),
          (this.excludeRecentlyViewedFilesPatterns = []),
          (this.enableRvfTracking = !1),
          (this.globalDebounceDurationMillis = 0),
          (this.clientDebounceDurationMillis = 0),
          (this.cppUrl = ""),
          (this.useWhitespaceDiffHistory = !1),
          (this.enableFilesyncDebounceSkipping = !1),
          (this.checkFilesyncHashPercent = 0),
          (this.geoCppBackendUrl = ""),
          (this.isFusedCursorPredictionModel = !1),
          (this.includeUnchangedLines = !1),
          (this.shouldFetchRvfText = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppConfigResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "above_radius", kind: "scalar", T: 5, opt: !0 },
          { no: 2, name: "below_radius", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "merge_behavior", kind: "message", T: Wvn, opt: !0 },
          { no: 5, name: "is_on", kind: "scalar", T: 8, opt: !0 },
          { no: 6, name: "is_ghost_text", kind: "scalar", T: 8, opt: !0 },
          {
            no: 7,
            name: "should_let_user_enable_cpp_even_if_not_pro",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 8,
            name: "heuristics",
            kind: "enum",
            T: v.getEnumType(VB),
            repeated: !0,
          },
          {
            no: 9,
            name: "exclude_recently_viewed_files_patterns",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 10, name: "enable_rvf_tracking", kind: "scalar", T: 8 },
          {
            no: 11,
            name: "global_debounce_duration_millis",
            kind: "scalar",
            T: 5,
          },
          {
            no: 12,
            name: "client_debounce_duration_millis",
            kind: "scalar",
            T: 5,
          },
          { no: 13, name: "cpp_url", kind: "scalar", T: 9 },
          { no: 14, name: "use_whitespace_diff_history", kind: "scalar", T: 8 },
          { no: 15, name: "import_prediction_config", kind: "message", T: Vvn },
          {
            no: 16,
            name: "enable_filesync_debounce_skipping",
            kind: "scalar",
            T: 8,
          },
          { no: 17, name: "check_filesync_hash_percent", kind: "scalar", T: 2 },
          { no: 18, name: "geo_cpp_backend_url", kind: "scalar", T: 9 },
          {
            no: 19,
            name: "recently_rejected_edit_thresholds",
            kind: "message",
            T: qvn,
            opt: !0,
          },
          {
            no: 20,
            name: "is_fused_cursor_prediction_model",
            kind: "scalar",
            T: 8,
          },
          { no: 21, name: "include_unchanged_lines", kind: "scalar", T: 8 },
          { no: 22, name: "should_fetch_rvf_text", kind: "scalar", T: 8 },
          {
            no: 23,
            name: "max_number_of_cleared_suggestions_since_last_accept",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 24,
            name: "suggestion_hint_config",
            kind: "message",
            T: jvn,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new PDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PDe, e, t)
      }
    },
    VB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LOTS_OF_ADDED_TEXT = 1)] = "LOTS_OF_ADDED_TEXT"),
      (i[(i.DUPLICATING_LINE_AFTER_SUGGESTION = 2)] =
        "DUPLICATING_LINE_AFTER_SUGGESTION"),
      (i[(i.DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3)] =
        "DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION"),
      (i[(i.REVERTING_USER_CHANGE = 4)] = "REVERTING_USER_CHANGE"),
      (i[(i.OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5)] =
        "OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED"),
      (i[(i.SUGGESTING_RECENTLY_REJECTED_EDIT = 6)] =
        "SUGGESTING_RECENTLY_REJECTED_EDIT")
  })(VB || (VB = {})),
    v.util.setEnumType(VB, "aiserver.v1.CppConfigResponse.Heuristic", [
      { no: 0, name: "HEURISTIC_UNSPECIFIED" },
      { no: 1, name: "HEURISTIC_LOTS_OF_ADDED_TEXT" },
      { no: 2, name: "HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION" },
      { no: 3, name: "HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION" },
      { no: 4, name: "HEURISTIC_REVERTING_USER_CHANGE" },
      { no: 5, name: "HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED" },
      { no: 6, name: "HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT" },
    ])
  var Vvn = class LDe extends _ {
      constructor(e) {
        super(),
          (this.isDisabledByBackend = !1),
          (this.shouldTurnOnAutomatically = !1),
          (this.pythonEnabled = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppConfigResponse.ImportPredictionConfig"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_disabled_by_backend", kind: "scalar", T: 8 },
          { no: 2, name: "should_turn_on_automatically", kind: "scalar", T: 8 },
          { no: 3, name: "python_enabled", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new LDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LDe, e, t)
      }
    },
    Wvn = class NDe extends _ {
      constructor(e) {
        super(), (this.type = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppConfigResponse.MergeBehavior"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "scalar", T: 9 },
          { no: 2, name: "limit", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "radius", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NDe, e, t)
      }
    },
    qvn = class RDe extends _ {
      constructor(e) {
        super(),
          (this.hardRejectThreshold = 0),
          (this.softRejectThreshold = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "hard_reject_threshold", kind: "scalar", T: 5 },
          { no: 2, name: "soft_reject_threshold", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new RDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RDe, e, t)
      }
    },
    jvn = class ADe extends _ {
      constructor(e) {
        super(),
          (this.importantLspExtensions = []),
          (this.enabledForPathExtensions = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppConfigResponse.SuggestionHintConfig"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "important_lsp_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 2,
            name: "enabled_for_path_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new ADe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ADe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ADe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ADe, e, t)
      }
    },
    P1t = class MDe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SuggestedEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "edit_range", kind: "message", T: Hu },
          { no: 2, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new MDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MDe, e, t)
      }
    },
    HMi = class $De extends _ {
      constructor(e) {
        super(),
          (this.suggestedEdits = []),
          (this.markerTouchesGreen = !1),
          (this.currentFileContentsForLinterErrors = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCppEditClassificationRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_request", kind: "message", T: D1t },
          {
            no: 25,
            name: "suggested_edits",
            kind: "message",
            T: P1t,
            repeated: !0,
          },
          { no: 26, name: "marker_touches_green", kind: "scalar", T: 8 },
          {
            no: 27,
            name: "current_file_contents_for_linter_errors",
            kind: "scalar",
            T: 9,
          },
        ])
      }
      static fromBinary(e, t) {
        return new $De().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $De().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $De().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($De, e, t)
      }
    },
    zvn = class FDe extends _ {
      constructor(e) {
        super(), (this.scoredEdits = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCppEditClassificationResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "scored_edits", kind: "message", T: L1t, repeated: !0 },
          { no: 2, name: "noop_edit", kind: "message", T: L1t },
          { no: 3, name: "should_noop", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "generation_edit", kind: "message", T: L1t },
        ])
      }
      static fromBinary(e, t) {
        return new FDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FDe, e, t)
      }
    },
    Gvn = class ODe extends _ {
      constructor(e) {
        super(),
          (this.tokens = []),
          (this.tokenLogprobs = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCppEditClassificationResponse.LogProbs"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tokens", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "token_logprobs", kind: "scalar", T: 1, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ODe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ODe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ODe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ODe, e, t)
      }
    },
    L1t = class BDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCppEditClassificationResponse.ScoredEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "edit", kind: "message", T: P1t },
          { no: 2, name: "log_probs", kind: "message", T: Gvn },
        ])
      }
      static fromBinary(e, t) {
        return new BDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BDe, e, t)
      }
    },
    Jvn = class _De extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.isOpen = !1),
          (this.visibleRangeContent = []),
          (this.startLineNumberOneIndexed = []),
          (this.visibleRanges = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AdditionalFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "is_open", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "visible_range_content",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 4, name: "last_viewed_at", kind: "scalar", T: 1, opt: !0 },
          {
            no: 5,
            name: "start_line_number_one_indexed",
            kind: "scalar",
            T: 5,
            repeated: !0,
          },
          { no: 6, name: "visible_ranges", kind: "message", T: Kf, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _De().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _De().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _De().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_De, e, t)
      }
    },
    VMi = class UDe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.performanceNowTime = 0),
          (this.fate = HB.UNSPECIFIED),
          (this.extension = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RecordCppFateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "performance_now_time", kind: "scalar", T: 2 },
          { no: 3, name: "fate", kind: "enum", T: v.getEnumType(HB) },
          { no: 4, name: "extension", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new UDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UDe, e, t)
      }
    },
    Kvn = class HDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RecordCppFateResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new HDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HDe, e, t)
      }
    },
    Yvn = class VDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableCppModelsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new VDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VDe, e, t)
      }
    },
    Xvn = class WDe extends _ {
      constructor(e) {
        super(), (this.models = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableCppModelsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "models", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "default_model", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new WDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WDe, e, t)
      }
    },
    Qvn = class qDe extends _ {
      constructor(e) {
        super(),
          (this.contextItems = []),
          (this.fileDiffHistories = []),
          (this.mergedDiffHistories = []),
          (this.blockDiffPatches = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamHoldCppRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 4, name: "linter_errors", kind: "message", T: Cf, opt: !0 },
          {
            no: 13,
            name: "context_items",
            kind: "message",
            T: N1t,
            repeated: !0,
          },
          {
            no: 7,
            name: "file_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 8,
            name: "merged_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 9,
            name: "block_diff_patches",
            kind: "message",
            T: $1t,
            repeated: !0,
          },
          { no: 10, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new qDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qDe, e, t)
      }
    },
    Zvn = class jDe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamHoldCppResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new jDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jDe, e, t)
      }
    },
    $C = class zDe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.diffHistory = []),
          (this.diffHistoryTimestamps = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppFileDiffHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 3,
            name: "diff_history_timestamps",
            kind: "scalar",
            T: 1,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new zDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zDe, e, t)
      }
    },
    N1t = class GDe extends _ {
      constructor(e) {
        super(),
          (this.contents = ""),
          (this.relativeWorkspacePath = ""),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppContextItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "contents", kind: "scalar", T: 9 },
          { no: 2, name: "symbol", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new GDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GDe, e, t)
      }
    },
    eyn = class JDe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.sessionId = ""),
          (this.responseType = Roe.UNSPECIFIED),
          (this.modelCodeName = ""),
          (this.modelOpenaiName = ""),
          (this.currentPerformanceNowTime = 0),
          (this.sessionPerformanceOriginTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MarkCppRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "session_id", kind: "scalar", T: 9 },
          { no: 3, name: "response_type", kind: "enum", T: v.getEnumType(Roe) },
          { no: 4, name: "desired_completion", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "range_transformation", kind: "message", T: tyn },
          { no: 10, name: "model_code_name", kind: "scalar", T: 9 },
          { no: 11, name: "model_openai_name", kind: "scalar", T: 9 },
          { no: 12, name: "current_performance_now_time", kind: "scalar", T: 1 },
          {
            no: 13,
            name: "session_performance_origin_time",
            kind: "scalar",
            T: 1,
          },
        ])
      }
      static fromBinary(e, t) {
        return new JDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JDe, e, t)
      }
    },
    Roe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.GOOD = 1)] = "GOOD"),
      (i[(i.BAD = 2)] = "BAD"),
      (i[(i.BAD_CONTEXT = 3)] = "BAD_CONTEXT"),
      (i[(i.BAD_REASONING = 4)] = "BAD_REASONING"),
      (i[(i.BAD_STUPID_MISTAKE = 5)] = "BAD_STUPID_MISTAKE"),
      (i[(i.BAD_FORMATTING = 6)] = "BAD_FORMATTING"),
      (i[(i.BAD_RANGE = 7)] = "BAD_RANGE"),
      (i[(i.GOOD_PREDICTION = 8)] = "GOOD_PREDICTION"),
      (i[(i.BAD_FALSE_POSITIVE_TRIGGER = 9)] = "BAD_FALSE_POSITIVE_TRIGGER"),
      (i[(i.BAD_FALSE_NEGATIVE_TRIGGER = 10)] = "BAD_FALSE_NEGATIVE_TRIGGER")
  })(Roe || (Roe = {})),
    v.util.setEnumType(Roe, "aiserver.v1.MarkCppRequest.CppResponseTypes", [
      { no: 0, name: "CPP_RESPONSE_TYPES_UNSPECIFIED" },
      { no: 1, name: "CPP_RESPONSE_TYPES_GOOD" },
      { no: 2, name: "CPP_RESPONSE_TYPES_BAD" },
      { no: 3, name: "CPP_RESPONSE_TYPES_BAD_CONTEXT" },
      { no: 4, name: "CPP_RESPONSE_TYPES_BAD_REASONING" },
      { no: 5, name: "CPP_RESPONSE_TYPES_BAD_STUPID_MISTAKE" },
      { no: 6, name: "CPP_RESPONSE_TYPES_BAD_FORMATTING" },
      { no: 7, name: "CPP_RESPONSE_TYPES_BAD_RANGE" },
      { no: 8, name: "CPP_RESPONSE_TYPES_GOOD_PREDICTION" },
      { no: 9, name: "CPP_RESPONSE_TYPES_BAD_FALSE_POSITIVE_TRIGGER" },
      { no: 10, name: "CPP_RESPONSE_TYPES_BAD_FALSE_NEGATIVE_TRIGGER" },
    ])
  var tyn = class KDe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MarkCppRequest.RangeTransformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new KDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KDe, e, t)
      }
    },
    WMi = class YDe extends _ {
      constructor(e) {
        super(), (this.label = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppParameterHint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "label", kind: "scalar", T: 9 },
          { no: 2, name: "documentation", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YDe, e, t)
      }
    },
    iyn = class XDe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MarkCppResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new XDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XDe, e, t)
      }
    },
    uk = class QDe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.startColumn = 0),
          (this.endLineNumber = 0),
          (this.endColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "start_column", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "end_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new QDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QDe, e, t)
      }
    },
    Aoe = class ZDe extends _ {
      constructor(e) {
        super(),
          (this.lineNumberOneIndexed = 0),
          (this.columnOneIndexed = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.OneIndexedPosition"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 2, name: "column_one_indexed", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new ZDe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZDe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZDe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZDe, e, t)
      }
    },
    syn = class eTe extends _ {
      constructor(e) {
        super(),
          (this.selectionStartLineNumber = 0),
          (this.selectionStartColumn = 0),
          (this.positionLineNumber = 0),
          (this.positionColumn = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorSelection"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "selection_start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "selection_start_column", kind: "scalar", T: 5 },
          { no: 3, name: "position_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "position_column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new eTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eTe, e, t)
      }
    },
    uG = class tTe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.modelIsAttachedToEditor = !1),
          (this.modelIsAttachedToTheActiveEditor = !1),
          (this.cursorSelections = []),
          (this.modelVersionAtMetadataRetrievalTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelChange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: uk },
          { no: 3, name: "final_model_hash", kind: "scalar", T: 9, opt: !0 },
          {
            no: 4,
            name: "model_version_immediately_after_this_change",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 5,
            name: "performance_now_timestamp",
            kind: "scalar",
            T: 1,
            opt: !0,
          },
          { no: 7, name: "is_undoing", kind: "scalar", T: 8, opt: !0 },
          { no: 8, name: "is_redoing", kind: "scalar", T: 8, opt: !0 },
          { no: 9, name: "model_is_attached_to_editor", kind: "scalar", T: 8 },
          {
            no: 10,
            name: "model_is_attached_to_the_active_editor",
            kind: "scalar",
            T: 8,
          },
          {
            no: 11,
            name: "cursor_selections",
            kind: "message",
            T: syn,
            repeated: !0,
          },
          {
            no: 12,
            name: "model_version_at_metadata_retrieval_time",
            kind: "scalar",
            T: 5,
          },
        ])
      }
      static fromBinary(e, t) {
        return new tTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tTe, e, t)
      }
    },
    CVe = class iTe extends _ {
      constructor(e) {
        super(),
          (this.suggestionId = 0),
          (this.suggestionText = ""),
          (this.modelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel = 0),
          (this.originalText = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CurrentlyShownCppSuggestion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "suggestion_id", kind: "scalar", T: 5 },
          { no: 2, name: "suggestion_text", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model",
            kind: "scalar",
            T: 5,
          },
          {
            no: 4,
            name: "range_of_suggestion_in_current_model",
            kind: "message",
            T: uk,
            opt: !0,
          },
          { no: 5, name: "original_text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iTe, e, t)
      }
    },
    nyn = class sTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppAcceptEventNew"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: CVe },
          { no: 7, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new sTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sTe, e, t)
      }
    },
    qMi = class nTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.suggestionText = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RecoverableCppData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "suggestion_text", kind: "scalar", T: 9 },
          { no: 3, name: "suggestion_range", kind: "message", T: uk },
          { no: 4, name: "position", kind: "message", T: Aoe },
        ])
      }
      static fromBinary(e, t) {
        return new nTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nTe, e, t)
      }
    },
    ryn = class rTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppSuggestEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: CVe },
          { no: 2, name: "point_in_time_model", kind: "message", T: sm },
          { no: 3, name: "recoverable_cpp_data", kind: "message", T: qMi },
        ])
      }
      static fromBinary(e, t) {
        return new rTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rTe, e, t)
      }
    },
    oyn = class oTe extends _ {
      constructor(e) {
        super(),
          (this.generationUuid = ""),
          (this.modelVersion = 0),
          (this.source = MC.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTriggerEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "model_version", kind: "scalar", T: 5 },
          { no: 3, name: "cursor_position", kind: "message", T: Aoe },
          { no: 4, name: "point_in_time_model", kind: "message", T: sm },
          { no: 5, name: "source", kind: "enum", T: v.getEnumType(MC) },
        ])
      }
      static fromBinary(e, t) {
        return new oTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oTe, e, t)
      }
    },
    ayn = class aTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FinishedCppGenerationEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "recoverable_cpp_data", kind: "message", T: qMi },
        ])
      }
      static fromBinary(e, t) {
        return new aTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aTe, e, t)
      }
    },
    lyn = class lTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppRejectEventNew"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: CVe },
          { no: 7, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new lTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lTe, e, t)
      }
    },
    cyn = class cTe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: uk },
        ])
      }
      static fromBinary(e, t) {
        return new cTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cTe, e, t)
      }
    },
    hyn = class hTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppPartialAcceptEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: CVe },
          { no: 2, name: "edit", kind: "message", T: cyn },
          { no: 3, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new hTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hTe, e, t)
      }
    },
    R1t = class uTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.predictionId = 0),
          (this.lineNumber = 0),
          (this.source = QN.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorPrediction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "prediction_id", kind: "scalar", T: 5 },
          { no: 3, name: "line_number", kind: "scalar", T: 5 },
          { no: 4, name: "source", kind: "enum", T: v.getEnumType(QN) },
        ])
      }
      static fromBinary(e, t) {
        return new uTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uTe, e, t)
      }
    },
    QN
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ALWAYS_ON = 1)] = "ALWAYS_ON"),
      (i[(i.ACCEPT = 2)] = "ACCEPT"),
      (i[(i.UNDO = 3)] = "UNDO"),
      (i[(i.EDITOR_CHANGE = 4)] = "EDITOR_CHANGE")
  })(QN || (QN = {})),
    v.util.setEnumType(
      QN,
      "aiserver.v1.CursorPrediction.CursorPredictionSource",
      [
        { no: 0, name: "CURSOR_PREDICTION_SOURCE_UNSPECIFIED" },
        { no: 1, name: "CURSOR_PREDICTION_SOURCE_ALWAYS_ON" },
        { no: 2, name: "CURSOR_PREDICTION_SOURCE_ACCEPT" },
        { no: 3, name: "CURSOR_PREDICTION_SOURCE_UNDO" },
        { no: 4, name: "CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE" },
      ],
    )
  var uyn = class dTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SuggestCursorPredictionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cursor_prediction", kind: "message", T: R1t },
          { no: 2, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new dTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dTe, e, t)
      }
    },
    dyn = class fTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AcceptCursorPredictionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cursor_prediction", kind: "message", T: R1t },
          { no: 2, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new fTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fTe, e, t)
      }
    },
    fyn = class gTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RejectCursorPredictionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cursor_prediction", kind: "message", T: R1t },
          { no: 2, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new gTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gTe, e, t)
      }
    },
    jMi = class pTe extends _ {
      constructor(e) {
        super(),
          (this.modelVersion = 0),
          (this.relativePath = ""),
          (this.modelId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MaybeDefinedPointInTimeModel"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_uuid", kind: "scalar", T: 9, opt: !0 },
          { no: 2, name: "model_version", kind: "scalar", T: 5 },
          { no: 3, name: "relative_path", kind: "scalar", T: 9 },
          { no: 4, name: "model_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new pTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pTe, e, t)
      }
    },
    sm = class mTe extends _ {
      constructor(e) {
        super(),
          (this.modelUuid = ""),
          (this.modelVersion = 0),
          (this.relativePath = ""),
          (this.modelId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PointInTimeModel"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "model_version", kind: "scalar", T: 5 },
          { no: 3, name: "relative_path", kind: "scalar", T: 9 },
          { no: 4, name: "model_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new mTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mTe, e, t)
      }
    },
    gyn = class bTe extends _ {
      constructor(e) {
        super(),
          (this.lineNumberOneIndexed = 0),
          (this.columnNumberOneIndexed = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppManualTriggerEventNew"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 2, name: "column_number_one_indexed", kind: "scalar", T: 5 },
          { no: 7, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new bTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bTe, e, t)
      }
    },
    pyn = class vTe extends _ {
      constructor(e) {
        super(),
          (this.modelUuid = ""),
          (this.relativePath = ""),
          (this.reason = Z9.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppStoppedTrackingModelEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "relative_path", kind: "scalar", T: 9 },
          { no: 3, name: "reason", kind: "enum", T: v.getEnumType(Z9) },
        ])
      }
      static fromBinary(e, t) {
        return new vTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vTe, e, t)
      }
    },
    Z9
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.FILE_TOO_BIG = 1)] = "FILE_TOO_BIG"),
      (i[(i.FILE_DISPOSED = 2)] = "FILE_DISPOSED"),
      (i[(i.CHANGE_TOO_BIG = 3)] = "CHANGE_TOO_BIG")
  })(Z9 || (Z9 = {})),
    v.util.setEnumType(
      Z9,
      "aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason",
      [
        { no: 0, name: "STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED" },
        { no: 1, name: "STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG" },
        { no: 2, name: "STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED" },
        { no: 3, name: "STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG" },
      ],
    )
  var myn = class yTe extends _ {
      constructor(e) {
        super(),
          (this.addedErrors = []),
          (this.removedErrors = []),
          (this.errors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppLinterErrorEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "added_errors", kind: "message", T: k$, repeated: !0 },
          { no: 3, name: "removed_errors", kind: "message", T: k$, repeated: !0 },
          { no: 4, name: "errors", kind: "message", T: k$, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new yTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yTe, e, t)
      }
    },
    byn = class wTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppDebouncedCursorMovementEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "cursor_position", kind: "message", T: Aoe },
        ])
      }
      static fromBinary(e, t) {
        return new wTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wTe, e, t)
      }
    },
    vyn = class CTe extends _ {
      constructor(e) {
        super(),
          (this.visibleRanges = []),
          (this.editorId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppEditorChangedEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "cursor_position", kind: "message", T: Aoe },
          { no: 3, name: "visible_ranges", kind: "message", T: uk, repeated: !0 },
          { no: 4, name: "editor_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new CTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CTe, e, t)
      }
    },
    yyn = class STe extends _ {
      constructor(e) {
        super(), (this.clipboardContents = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppCopyEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "clipboard_contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new STe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new STe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new STe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(STe, e, t)
      }
    },
    zMi = class xTe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.id = ""),
          (this.arguments = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppQuickActionCommand"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "id", kind: "scalar", T: 9 },
          { no: 3, name: "arguments", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xTe, e, t)
      }
    },
    SVe = class kTe extends _ {
      constructor(e) {
        super(), (this.title = ""), (this.edits = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppQuickAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "edits", kind: "message", T: wyn, repeated: !0 },
          { no: 3, name: "is_preferred", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "command", kind: "message", T: zMi },
        ])
      }
      static fromBinary(e, t) {
        return new kTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kTe, e, t)
      }
    },
    wyn = class ETe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppQuickAction.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: uk },
        ])
      }
      static fromBinary(e, t) {
        return new ETe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ETe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ETe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ETe, e, t)
      }
    },
    Cyn = class ITe extends _ {
      constructor(e) {
        super(),
          (this.added = []),
          (this.removed = []),
          (this.actions = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppChangeQuickActionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "added", kind: "message", T: SVe, repeated: !0 },
          { no: 3, name: "removed", kind: "message", T: SVe, repeated: !0 },
          { no: 4, name: "actions", kind: "message", T: SVe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ITe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ITe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ITe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ITe, e, t)
      }
    },
    Syn = class DTe extends _ {
      constructor(e) {
        super(),
          (this.actionIdentifier = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppQuickActionFireEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          {
            no: 2,
            name: "quick_action_command",
            kind: "message",
            T: zMi,
            oneof: "action_identifier",
          },
          {
            no: 3,
            name: "quick_action_event",
            kind: "message",
            T: SVe,
            oneof: "action_identifier",
          },
        ])
      }
      static fromBinary(e, t) {
        return new DTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DTe, e, t)
      }
    },
    xyn = class TTe extends _ {
      constructor(e) {
        super(),
          (this.terminalId = 0),
          (this.terminalPath = ""),
          (this.event = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTerminalEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "terminal_id", kind: "scalar", T: 5 },
          { no: 2, name: "terminal_path", kind: "scalar", T: 9 },
          { no: 6, name: "terminal_cwd", kind: "scalar", T: 9, opt: !0 },
          {
            no: 3,
            name: "terminal_input",
            kind: "message",
            T: kyn,
            oneof: "event",
          },
          {
            no: 4,
            name: "command_started",
            kind: "message",
            T: Eyn,
            oneof: "event",
          },
          {
            no: 5,
            name: "command_finished",
            kind: "message",
            T: Iyn,
            oneof: "event",
          },
        ])
      }
      static fromBinary(e, t) {
        return new TTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TTe, e, t)
      }
    },
    kyn = class PTe extends _ {
      constructor(e) {
        super(), (this.bufferedKeypresses = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTerminalEvent.TerminalInput"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "buffered_keypresses",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new PTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PTe, e, t)
      }
    },
    Eyn = class LTe extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.startedTimestampUnixMs = 0),
          (this.commandWasTrimmed = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTerminalEvent.CommandStarted"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "started_timestamp_unix_ms", kind: "scalar", T: 1 },
          { no: 3, name: "command_was_trimmed", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new LTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LTe, e, t)
      }
    },
    Iyn = class NTe extends _ {
      constructor(e) {
        super(),
          (this.command = ""),
          (this.output = ""),
          (this.finishedTimestampUnixMs = 0),
          (this.commandWasTrimmed = !1),
          (this.outputWasTrimmed = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTerminalEvent.CommandFinished"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
          { no: 2, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "output", kind: "scalar", T: 9 },
          { no: 4, name: "finished_timestamp_unix_ms", kind: "scalar", T: 1 },
          { no: 5, name: "command_was_trimmed", kind: "scalar", T: 8 },
          { no: 6, name: "output_was_trimmed", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new NTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NTe, e, t)
      }
    },
    Dyn = class RTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.eventType = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "request_id", kind: "scalar", T: 9 },
          { no: 20, name: "prompt_bar_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 3,
            name: "submit_prompt",
            kind: "message",
            T: Tyn,
            oneof: "event_type",
          },
          {
            no: 4,
            name: "end_of_generation",
            kind: "message",
            T: Pyn,
            oneof: "event_type",
          },
          {
            no: 5,
            name: "interrupt_generation",
            kind: "message",
            T: Lyn,
            oneof: "event_type",
          },
          {
            no: 6,
            name: "accept_all",
            kind: "message",
            T: Nyn,
            oneof: "event_type",
          },
          {
            no: 7,
            name: "reject_all",
            kind: "message",
            T: Ryn,
            oneof: "event_type",
          },
          {
            no: 8,
            name: "reject_partial_diff",
            kind: "message",
            T: Myn,
            oneof: "event_type",
          },
          {
            no: 9,
            name: "accept_partial_diff",
            kind: "message",
            T: Ayn,
            oneof: "event_type",
          },
        ])
      }
      static fromBinary(e, t) {
        return new RTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RTe, e, t)
      }
    },
    Tyn = class ATe extends _ {
      constructor(e) {
        super(),
          (this.originalText = ""),
          (this.prompt = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.SubmitPrompt"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "original_range", kind: "message", T: uk },
          { no: 2, name: "original_text", kind: "scalar", T: 9 },
          { no: 3, name: "prompt", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ATe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ATe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ATe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ATe, e, t)
      }
    },
    Pyn = class MTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.EndOfGeneration"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new MTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MTe, e, t)
      }
    },
    Lyn = class $Te extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.InterruptGeneration"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new $Te().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Te().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Te().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Te, e, t)
      }
    },
    Nyn = class FTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.AcceptDiffs"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new FTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FTe, e, t)
      }
    },
    Ryn = class OTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.RejectDiffs"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new OTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OTe, e, t)
      }
    },
    Ayn = class BTe extends _ {
      constructor(e) {
        super(),
          (this.greenLines = []),
          (this.redLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.AcceptPartialDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "green_range", kind: "message", T: uk },
          { no: 2, name: "green_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "red_lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new BTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BTe, e, t)
      }
    },
    Myn = class _Te extends _ {
      constructor(e) {
        super(),
          (this.greenLines = []),
          (this.redLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKEvent.RejectPartialDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "green_range", kind: "message", T: uk },
          { no: 2, name: "green_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "red_lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _Te().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Te().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Te().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Te, e, t)
      }
    },
    $yn = class UTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.eventType = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "submit_prompt",
            kind: "message",
            T: Fyn,
            oneof: "event_type",
          },
          {
            no: 3,
            name: "end_of_any_generation",
            kind: "message",
            T: Oyn,
            oneof: "event_type",
          },
          {
            no: 4,
            name: "end_of_uninterrupted_generation",
            kind: "message",
            T: Byn,
            oneof: "event_type",
          },
        ])
      }
      static fromBinary(e, t) {
        return new UTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UTe, e, t)
      }
    },
    Fyn = class HTe extends _ {
      constructor(e) {
        super(), (this.prompt = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatEvent.SubmitPrompt"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "prompt", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new HTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HTe, e, t)
      }
    },
    Oyn = class VTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatEvent.EndOfAnyGeneration"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new VTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VTe, e, t)
      }
    },
    Byn = class WTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ChatEvent.EndOfUninterruptedGeneration"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new WTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WTe, e, t)
      }
    },
    _yn = class qTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.eventType = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "point_in_time_model", kind: "message", T: sm },
          {
            no: 3,
            name: "lint_generated",
            kind: "message",
            T: Hyn,
            oneof: "event_type",
          },
          {
            no: 4,
            name: "lint_dismissed",
            kind: "message",
            T: Vyn,
            oneof: "event_type",
          },
          {
            no: 5,
            name: "user_feedback",
            kind: "message",
            T: Wyn,
            oneof: "event_type",
          },
          {
            no: 6,
            name: "viewed_report",
            kind: "message",
            T: qyn,
            oneof: "event_type",
          },
          {
            no: 7,
            name: "unviewed_report",
            kind: "message",
            T: jyn,
            oneof: "event_type",
          },
          {
            no: 8,
            name: "started",
            kind: "message",
            T: Uyn,
            oneof: "event_type",
          },
          {
            no: 9,
            name: "not_shown_because_heuristic",
            kind: "message",
            T: zyn,
            oneof: "event_type",
          },
        ])
      }
      static fromBinary(e, t) {
        return new qTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qTe, e, t)
      }
    },
    Uyn = class jTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.Started"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new jTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jTe, e, t)
      }
    },
    Hyn = class zTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.LintGenerated"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report", kind: "message", T: Toe },
        ])
      }
      static fromBinary(e, t) {
        return new zTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zTe, e, t)
      }
    },
    Vyn = class GTe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.LintDismissed"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new GTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GTe, e, t)
      }
    },
    Wyn = class JTe extends _ {
      constructor(e) {
        super(),
          (this.bugReportId = ""),
          (this.feedback = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.UserFeedback"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
          { no: 2, name: "feedback", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new JTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JTe, e, t)
      }
    },
    qyn = class KTe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.ViewedReport"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new KTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KTe, e, t)
      }
    },
    jyn = class YTe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.UnviewedReport"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new YTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YTe, e, t)
      }
    },
    zyn = class XTe extends _ {
      constructor(e) {
        super(), (this.heuristic = WB.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "heuristic", kind: "enum", T: v.getEnumType(WB) },
        ])
      }
      static fromBinary(e, t) {
        return new XTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XTe, e, t)
      }
    },
    WB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LINT_OVERLAP = 1)] = "LINT_OVERLAP"),
      (i[(i.LINES_MISMATCH = 2)] = "LINES_MISMATCH")
  })(WB || (WB = {})),
    v.util.setEnumType(
      WB,
      "aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic",
      [
        { no: 0, name: "HEURISTIC_UNSPECIFIED" },
        { no: 1, name: "HEURISTIC_LINT_OVERLAP" },
        { no: 2, name: "HEURISTIC_LINES_MISMATCH" },
      ],
    )
  var Gyn = class QTe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.eventType = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "started",
            kind: "message",
            T: Jyn,
            oneof: "event_type",
          },
          {
            no: 3,
            name: "reports_generated",
            kind: "message",
            T: Kyn,
            oneof: "event_type",
          },
          {
            no: 4,
            name: "pressed_fix_in_composer",
            kind: "message",
            T: Yyn,
            oneof: "event_type",
          },
          {
            no: 5,
            name: "pressed_open_in_editor",
            kind: "message",
            T: Qyn,
            oneof: "event_type",
          },
          {
            no: 6,
            name: "viewed_report",
            kind: "message",
            T: Zyn,
            oneof: "event_type",
          },
          {
            no: 7,
            name: "user_feedback",
            kind: "message",
            T: ewn,
            oneof: "event_type",
          },
          {
            no: 8,
            name: "pressed_add_to_chat",
            kind: "message",
            T: Xyn,
            oneof: "event_type",
          },
          {
            no: 9,
            name: "background_interval_started",
            kind: "message",
            T: twn,
            oneof: "event_type",
          },
          {
            no: 10,
            name: "background_interval_ended",
            kind: "message",
            T: iwn,
            oneof: "event_type",
          },
          {
            no: 11,
            name: "background_interval_interrupted",
            kind: "message",
            T: swn,
            oneof: "event_type",
          },
          {
            no: 12,
            name: "background_interval_errored",
            kind: "message",
            T: nwn,
            oneof: "event_type",
          },
        ])
      }
      static fromBinary(e, t) {
        return new QTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QTe, e, t)
      }
    },
    Zy
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.DISABLED = 1)] = "DISABLED"),
      (i[(i.TOO_RECENT = 2)] = "TOO_RECENT"),
      (i[(i.UNVIEWED_BUG_REPORTS = 3)] = "UNVIEWED_BUG_REPORTS"),
      (i[(i.NOT_IN_GIT_REPO = 4)] = "NOT_IN_GIT_REPO"),
      (i[(i.DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH = 5)] =
        "DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH"),
      (i[(i.NO_GIT_USER = 6)] = "NO_GIT_USER"),
      (i[(i.NO_LAST_COMMIT = 7)] = "NO_LAST_COMMIT"),
      (i[(i.LAST_COMMIT_NOT_MADE_BY_USER = 8)] = "LAST_COMMIT_NOT_MADE_BY_USER"),
      (i[(i.LAST_COMMIT_TOO_OLD = 9)] = "LAST_COMMIT_TOO_OLD"),
      (i[(i.DIFF_TOO_LONG = 10)] = "DIFF_TOO_LONG"),
      (i[(i.DIFF_TOO_SHORT = 11)] = "DIFF_TOO_SHORT"),
      (i[(i.TELEMETRY_UNHEALTHY = 12)] = "TELEMETRY_UNHEALTHY")
  })(Zy || (Zy = {})),
    v.util.setEnumType(
      Zy,
      "aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason",
      [
        { no: 0, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNSPECIFIED" },
        { no: 1, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DISABLED" },
        { no: 2, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TOO_RECENT" },
        {
          no: 3,
          name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNVIEWED_BUG_REPORTS",
        },
        { no: 4, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NOT_IN_GIT_REPO" },
        {
          no: 5,
          name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH",
        },
        { no: 6, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_GIT_USER" },
        { no: 7, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_LAST_COMMIT" },
        {
          no: 8,
          name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_NOT_MADE_BY_USER",
        },
        {
          no: 9,
          name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_TOO_OLD",
        },
        { no: 10, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_LONG" },
        { no: 11, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_SHORT" },
        {
          no: 12,
          name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TELEMETRY_UNHEALTHY",
        },
      ],
    )
  var Jyn = class ZTe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.Started"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ZTe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZTe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZTe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZTe, e, t)
      }
    },
    Kyn = class ePe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.ReportsGenerated"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_reports", kind: "message", T: wMi },
        ])
      }
      static fromBinary(e, t) {
        return new ePe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ePe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ePe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ePe, e, t)
      }
    },
    Yyn = class tPe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.PressedFixInComposer"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new tPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tPe, e, t)
      }
    },
    Xyn = class iPe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.PressedAddToChat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iPe, e, t)
      }
    },
    Qyn = class sPe extends _ {
      constructor(e) {
        super(), (this.bugReportId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.PressedOpenInEditor"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_location", kind: "message", T: g1t },
          { no: 2, name: "bug_report_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sPe, e, t)
      }
    },
    Zyn = class nPe extends _ {
      constructor(e) {
        super(),
          (this.secondsViewed = 0),
          (this.reportViews = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.ViewedReport"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "seconds_viewed", kind: "scalar", T: 5 },
          { no: 2, name: "report_views", kind: "message", T: GMi, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new nPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nPe, e, t)
      }
    },
    GMi = class rPe extends _ {
      constructor(e) {
        super(),
          (this.bugReportId = ""),
          (this.viewPercentage = 0),
          (this.textPercentage = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.ViewedReport.ReportView"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
          { no: 2, name: "view_percentage", kind: "scalar", T: 1 },
          { no: 3, name: "text_percentage", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new rPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rPe, e, t)
      }
    },
    ewn = class oPe extends _ {
      constructor(e) {
        super(),
          (this.bugReportId = ""),
          (this.feedback = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.UserFeedback"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
          { no: 2, name: "feedback", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oPe, e, t)
      }
    },
    twn = class aPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalStarted"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new aPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aPe, e, t)
      }
    },
    iwn = class lPe extends _ {
      constructor(e) {
        super(), (this.success = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalEnded"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "success", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new lPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lPe, e, t)
      }
    },
    swn = class cPe extends _ {
      constructor(e) {
        super(), (this.reason = Zy.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "reason", kind: "enum", T: v.getEnumType(Zy) },
        ])
      }
      static fromBinary(e, t) {
        return new cPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cPe, e, t)
      }
    },
    nwn = class hPe extends _ {
      constructor(e) {
        super(), (this.errorMessage = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalErrored"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error_message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hPe, e, t)
      }
    },
    rwn = class uPe extends _ {
      constructor(e) {
        super(),
          (this.requestType = e7.UNSPECIFIED),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiRequestEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_type", kind: "enum", T: v.getEnumType(e7) },
          { no: 2, name: "request_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new uPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uPe, e, t)
      }
    },
    e7
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.START = 1)] = "START"),
      (i[(i.END = 2)] = "END")
  })(e7 || (e7 = {})),
    v.util.setEnumType(e7, "aiserver.v1.AiRequestEvent.RequestType", [
      { no: 0, name: "REQUEST_TYPE_UNSPECIFIED" },
      { no: 1, name: "REQUEST_TYPE_START" },
      { no: 2, name: "REQUEST_TYPE_END" },
    ])
  var own = class dPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelOpenedEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new dPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dPe, e, t)
      }
    },
    awn = class fPe extends _ {
      constructor(e) {
        super(), (this.files = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundFilesEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "files", kind: "message", T: lwn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new fPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fPe, e, t)
      }
    },
    lwn = class gPe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.hash = ""),
          (this.fullPath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundFilesEvent.BackgroundFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "hash", kind: "scalar", T: 9 },
          { no: 4, name: "full_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gPe, e, t)
      }
    },
    cwn = class pPe extends _ {
      constructor(e) {
        super(),
          (this.visibleRanges = []),
          (this.editorId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ScrollEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: sm },
          { no: 2, name: "visible_ranges", kind: "message", T: uk, repeated: !0 },
          { no: 3, name: "editor_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new pPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pPe, e, t)
      }
    },
    hwn = class mPe extends _ {
      constructor(e) {
        super(), (this.editorId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditorCloseEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "editor_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new mPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mPe, e, t)
      }
    },
    uwn = class bPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TabCloseEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: jMi },
        ])
      }
      static fromBinary(e, t) {
        return new bPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bPe, e, t)
      }
    },
    dwn = class vPe extends _ {
      constructor(e) {
        super(),
          (this.fullUri = ""),
          (this.modelId = ""),
          (this.uriScheme = ""),
          (this.isTooLargeForSyncing = !1),
          (this.isTooLargeForTokenization = !1),
          (this.isTooLargeForHeapOperation = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelAddedEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "point_in_time_model", kind: "message", T: jMi },
          { no: 2, name: "full_uri", kind: "scalar", T: 9 },
          { no: 3, name: "model_id", kind: "scalar", T: 9 },
          { no: 4, name: "uri_scheme", kind: "scalar", T: 9 },
          { no: 5, name: "is_too_large_for_syncing", kind: "scalar", T: 8 },
          { no: 6, name: "is_too_large_for_tokenization", kind: "scalar", T: 8 },
          {
            no: 7,
            name: "is_too_large_for_heap_operation",
            kind: "scalar",
            T: 8,
          },
        ])
      }
      static fromBinary(e, t) {
        return new vPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vPe, e, t)
      }
    },
    fwn = class yPe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.rootFsPath = ""),
          (this.refs = []),
          (this.remotes = []),
          (this.submodules = []),
          (this.mergeChanges = []),
          (this.indexChanges = []),
          (this.workingTreeChanges = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "root_fs_path", kind: "scalar", T: 9 },
          { no: 3, name: "head", kind: "message", T: gwn, opt: !0 },
          { no: 4, name: "refs", kind: "message", T: mwn, repeated: !0 },
          { no: 5, name: "remotes", kind: "message", T: bwn, repeated: !0 },
          { no: 6, name: "submodules", kind: "message", T: vwn, repeated: !0 },
          { no: 7, name: "rebase_commit", kind: "message", T: ywn, opt: !0 },
          { no: 8, name: "merge_changes", kind: "message", T: A1t, repeated: !0 },
          { no: 9, name: "index_changes", kind: "message", T: A1t, repeated: !0 },
          {
            no: 10,
            name: "working_tree_changes",
            kind: "message",
            T: A1t,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new yPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yPe, e, t)
      }
    },
    gwn = class wPe extends _ {
      constructor(e) {
        super(), (this.type = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Head"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "scalar", T: 9 },
          { no: 2, name: "name", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "remote", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "upstream_ref", kind: "message", T: pwn, opt: !0 },
          { no: 6, name: "ahead", kind: "scalar", T: 5, opt: !0 },
          { no: 7, name: "behind", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new wPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wPe, e, t)
      }
    },
    pwn = class CPe extends _ {
      constructor(e) {
        super(), (this.remote = ""), (this.name = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Head.UpstreamRef"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "remote", kind: "scalar", T: 9 },
          { no: 2, name: "name", kind: "scalar", T: 9 },
          { no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new CPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CPe, e, t)
      }
    },
    mwn = class SPe extends _ {
      constructor(e) {
        super(), (this.type = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Ref"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "scalar", T: 9 },
          { no: 2, name: "name", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "remote", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SPe, e, t)
      }
    },
    bwn = class xPe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.isReadOnly = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Remote"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "fetch_url", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "push_url", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "is_read_only", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new xPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xPe, e, t)
      }
    },
    vwn = class kPe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.path = ""),
          (this.url = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Submodule"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "path", kind: "scalar", T: 9 },
          { no: 3, name: "url", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new kPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kPe, e, t)
      }
    },
    ywn = class EPe extends _ {
      constructor(e) {
        super(),
          (this.hash = ""),
          (this.message = ""),
          (this.parents = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Commit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "hash", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "parents", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "author_date", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "author_name", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "author_email", kind: "scalar", T: 9, opt: !0 },
          { no: 7, name: "commit_date", kind: "scalar", T: 9, opt: !0 },
          { no: 8, name: "short_stat", kind: "message", T: wwn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new EPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EPe, e, t)
      }
    },
    wwn = class IPe extends _ {
      constructor(e) {
        super(),
          (this.files = 0),
          (this.insertions = 0),
          (this.deletions = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Commit.CommitShortStat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "scalar", T: 5 },
          { no: 2, name: "insertions", kind: "scalar", T: 5 },
          { no: 3, name: "deletions", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new IPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IPe, e, t)
      }
    },
    A1t = class DPe extends _ {
      constructor(e) {
        super(),
          (this.uri = ""),
          (this.originalUri = ""),
          (this.status = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppGitContextEvent.Change"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uri", kind: "scalar", T: 9 },
          { no: 2, name: "original_uri", kind: "scalar", T: 9 },
          { no: 3, name: "rename_uri", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "status", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new DPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DPe, e, t)
      }
    },
    Cwn = class TPe extends _ {
      constructor(e) {
        super(), (this.item = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AnythingQuickAccessItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "resource", kind: "message", T: Swn, oneof: "item" },
          { no: 2, name: "separator", kind: "scalar", T: 9, oneof: "item" },
        ])
      }
      static fromBinary(e, t) {
        return new TPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TPe, e, t)
      }
    },
    Swn = class PPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AnythingQuickAccessItem.Resource"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model", kind: "message", T: sm, opt: !0 },
          { no: 2, name: "range", kind: "message", T: uk, opt: !0 },
          { no: 3, name: "uri", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new PPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PPe, e, t)
      }
    },
    xwn = class LPe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.items = []),
          (this.selectedIndices = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AnythingQuickAccessSelectionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "items", kind: "message", T: Cwn, repeated: !0 },
          { no: 3, name: "selected_indices", kind: "scalar", T: 5, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new LPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LPe, e, t)
      }
    },
    kwn = class NPe extends _ {
      constructor(e) {
        super(), (this.suggestions = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LspSuggestionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "suggestions", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "request_id", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "editor_id", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "point_in_time_model", kind: "message", T: sm },
        ])
      }
      static fromBinary(e, t) {
        return new NPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NPe, e, t)
      }
    },
    M1t = class RPe extends _ {
      constructor(e) {
        super(),
          (this.event = { case: void 0 }),
          (this.performanceNowTimestamp = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppSessionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 2,
            name: "accept_event",
            kind: "message",
            T: nyn,
            oneof: "event",
          },
          {
            no: 3,
            name: "reject_event",
            kind: "message",
            T: lyn,
            oneof: "event",
          },
          {
            no: 4,
            name: "manual_trigger_event",
            kind: "message",
            T: gyn,
            oneof: "event",
          },
          {
            no: 6,
            name: "stopped_tracking_model_event",
            kind: "message",
            T: pyn,
            oneof: "event",
          },
          {
            no: 7,
            name: "suggest_event",
            kind: "message",
            T: ryn,
            oneof: "event",
          },
          {
            no: 8,
            name: "linter_error_event",
            kind: "message",
            T: myn,
            oneof: "event",
          },
          {
            no: 9,
            name: "debounced_cursor_movement_event",
            kind: "message",
            T: byn,
            oneof: "event",
          },
          {
            no: 10,
            name: "editor_changed_event",
            kind: "message",
            T: vyn,
            oneof: "event",
          },
          { no: 11, name: "copy_event", kind: "message", T: yyn, oneof: "event" },
          {
            no: 13,
            name: "quick_action_event",
            kind: "message",
            T: Cyn,
            oneof: "event",
          },
          {
            no: 14,
            name: "quick_action_fire_event",
            kind: "message",
            T: Syn,
            oneof: "event",
          },
          {
            no: 15,
            name: "model_opened_event",
            kind: "message",
            T: own,
            oneof: "event",
          },
          {
            no: 17,
            name: "cmd_k_event",
            kind: "message",
            T: Dyn,
            oneof: "event",
          },
          { no: 18, name: "chat_event", kind: "message", T: $yn, oneof: "event" },
          { no: 19, name: "ai_event", kind: "message", T: rwn, oneof: "event" },
          {
            no: 21,
            name: "scroll_event",
            kind: "message",
            T: cwn,
            oneof: "event",
          },
          {
            no: 22,
            name: "editor_close_event",
            kind: "message",
            T: hwn,
            oneof: "event",
          },
          {
            no: 23,
            name: "tab_close_event",
            kind: "message",
            T: uwn,
            oneof: "event",
          },
          {
            no: 33,
            name: "model_added_event",
            kind: "message",
            T: dwn,
            oneof: "event",
          },
          {
            no: 26,
            name: "partial_accept_event",
            kind: "message",
            T: hyn,
            oneof: "event",
          },
          {
            no: 27,
            name: "accept_cursor_prediction_event",
            kind: "message",
            T: dyn,
            oneof: "event",
          },
          {
            no: 28,
            name: "reject_cursor_prediction_event",
            kind: "message",
            T: fyn,
            oneof: "event",
          },
          {
            no: 29,
            name: "suggest_cursor_prediction_event",
            kind: "message",
            T: uyn,
            oneof: "event",
          },
          {
            no: 30,
            name: "cpp_trigger_event",
            kind: "message",
            T: oyn,
            oneof: "event",
          },
          {
            no: 31,
            name: "finished_cpp_generation_event",
            kind: "message",
            T: ayn,
            oneof: "event",
          },
          {
            no: 32,
            name: "bug_bot_event",
            kind: "message",
            T: Gyn,
            oneof: "event",
          },
          {
            no: 34,
            name: "bug_bot_linter_event",
            kind: "message",
            T: _yn,
            oneof: "event",
          },
          {
            no: 35,
            name: "anything_quick_access_selection_event",
            kind: "message",
            T: xwn,
            oneof: "event",
          },
          {
            no: 36,
            name: "lsp_suggestion_event",
            kind: "message",
            T: kwn,
            oneof: "event",
          },
          {
            no: 16,
            name: "background_files_event",
            kind: "message",
            T: awn,
            oneof: "event",
          },
          {
            no: 20,
            name: "terminal_event",
            kind: "message",
            T: xyn,
            oneof: "event",
          },
          {
            no: 24,
            name: "git_context_event",
            kind: "message",
            T: fwn,
            oneof: "event",
          },
          { no: 5, name: "performance_now_timestamp", kind: "scalar", T: 1 },
          {
            no: 25,
            name: "performance_time_origin",
            kind: "scalar",
            T: 1,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new RPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RPe, e, t)
      }
    },
    Ewn = class APe extends _ {
      constructor(e) {
        super(), (this.changes = new Uint8Array(0)), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppAppendRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "changes", kind: "scalar", T: 12 },
        ])
      }
      static fromBinary(e, t) {
        return new APe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new APe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new APe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(APe, e, t)
      }
    },
    Iwn = class MPe extends _ {
      constructor(e) {
        super(), (this.success = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppAppendResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "success", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new MPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MPe, e, t)
      }
    },
    JMi = class $Pe extends _ {
      constructor(e) {
        super(),
          (this.sessionId = ""),
          (this.modelUuid = ""),
          (this.relativePath = ""),
          (this.uri = ""),
          (this.clientVersion = ""),
          (this.changes = []),
          (this.sessionEvents = []),
          (this.modelChangesMayBeOutOfOrder = !1),
          (this.privacyModeStatus = R$.UNSPECIFIED),
          (this.events = []),
          (this.timeOrigin = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditHistoryAppendChangesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "session_id", kind: "scalar", T: 9 },
          { no: 2, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 3, name: "starting_model_value", kind: "scalar", T: 9, opt: !0 },
          {
            no: 10,
            name: "starting_model_version",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 5, name: "relative_path", kind: "scalar", T: 9 },
          { no: 14, name: "uri", kind: "scalar", T: 9 },
          { no: 6, name: "client_version", kind: "scalar", T: 9 },
          { no: 8, name: "client_commit", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "changes", kind: "message", T: uG, repeated: !0 },
          {
            no: 9,
            name: "session_events",
            kind: "message",
            T: M1t,
            repeated: !0,
          },
          {
            no: 11,
            name: "model_changes_may_be_out_of_order",
            kind: "scalar",
            T: 8,
          },
          {
            no: 12,
            name: "privacy_mode_status",
            kind: "enum",
            T: v.getEnumType(R$),
          },
          { no: 7, name: "events", kind: "message", T: Nwn, repeated: !0 },
          { no: 13, name: "time_origin", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new $Pe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Pe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Pe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Pe, e, t)
      }
    },
    R$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.PRIVACY_ENABLED = 1)] = "PRIVACY_ENABLED"),
      (i[(i.IMPLICIT_NO_PRIVACY = 2)] = "IMPLICIT_NO_PRIVACY"),
      (i[(i.EXPLICIT_NO_PRIVACY = 3)] = "EXPLICIT_NO_PRIVACY")
  })(R$ || (R$ = {})),
    v.util.setEnumType(
      R$,
      "aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus",
      [
        { no: 0, name: "PRIVACY_MODE_STATUS_UNSPECIFIED" },
        { no: 1, name: "PRIVACY_MODE_STATUS_PRIVACY_ENABLED" },
        { no: 2, name: "PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY" },
        { no: 3, name: "PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY" },
      ],
    )
  var Dwn = class FPe extends _ {
      constructor(e) {
        super(), (this.success = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EditHistoryAppendChangesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "success", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new FPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FPe, e, t)
      }
    },
    KMi = class OPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppEditHistoryStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new OPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OPe, e, t)
      }
    },
    YMi = class BPe extends _ {
      constructor(e) {
        super(),
          (this.on = !1),
          (this.onlyIfExplicit = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppEditHistoryStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "on", kind: "scalar", T: 8 },
          { no: 2, name: "only_if_explicit", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new BPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BPe, e, t)
      }
    },
    Twn = class _Pe extends _ {
      constructor(e) {
        super(),
          (this.relativePath = ""),
          (this.startingContents = ""),
          (this.beforeStartModelChanges = []),
          (this.clientVersion = ""),
          (this.modelUuid = ""),
          (this.sessionId = ""),
          (this.uri = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StartingModel"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "starting_contents", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "starting_model_version",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 4,
            name: "before_start_model_changes",
            kind: "message",
            T: uG,
            repeated: !0,
          },
          { no: 5, name: "client_version", kind: "scalar", T: 9 },
          { no: 6, name: "client_commit", kind: "scalar", T: 9, opt: !0 },
          { no: 7, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 8, name: "session_id", kind: "scalar", T: 9 },
          { no: 9, name: "uri", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new _Pe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Pe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Pe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Pe, e, t)
      }
    },
    $1t = class UPe extends _ {
      constructor(e) {
        super(),
          (this.changes = []),
          (this.relativePath = ""),
          (this.modelUuid = ""),
          (this.startFromChangeIndex = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BlockDiffPatch"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_model_window", kind: "message", T: Lwn },
          { no: 3, name: "changes", kind: "message", T: Pwn, repeated: !0 },
          { no: 4, name: "relative_path", kind: "scalar", T: 9 },
          { no: 7, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 5, name: "start_from_change_index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new UPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UPe, e, t)
      }
    },
    Pwn = class HPe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BlockDiffPatch.Change"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: uk },
        ])
      }
      static fromBinary(e, t) {
        return new HPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HPe, e, t)
      }
    },
    Lwn = class VPe extends _ {
      constructor(e) {
        super(),
          (this.lines = []),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BlockDiffPatch.ModelWindow"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new VPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VPe, e, t)
      }
    },
    Nwn = class WPe extends _ {
      constructor(e) {
        super(), (this.event = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppHistoryAppendEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_change", kind: "message", T: uG, oneof: "event" },
          {
            no: 2,
            name: "accept_event",
            kind: "message",
            T: Awn,
            oneof: "event",
          },
          {
            no: 3,
            name: "reject_event",
            kind: "message",
            T: Mwn,
            oneof: "event",
          },
          {
            no: 4,
            name: "manual_trigger_event",
            kind: "message",
            T: Rwn,
            oneof: "event",
          },
          { no: 10, name: "final_model_hash", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new WPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WPe, e, t)
      }
    },
    Rwn = class qPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppManualTriggerEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "position", kind: "message", T: Qm },
        ])
      }
      static fromBinary(e, t) {
        return new qPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qPe, e, t)
      }
    },
    Awn = class jPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppAcceptEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: XMi },
        ])
      }
      static fromBinary(e, t) {
        return new jPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jPe, e, t)
      }
    },
    Mwn = class zPe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppRejectEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_suggestion", kind: "message", T: XMi },
        ])
      }
      static fromBinary(e, t) {
        return new zPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zPe, e, t)
      }
    },
    XMi = class GPe extends _ {
      constructor(e) {
        super(),
          (this.suggestionText = ""),
          (this.seen = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppSuggestion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "suggestion_text", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: uk },
          { no: 5, name: "seen", kind: "scalar", T: 8 },
          {
            no: 6,
            name: "editor_selection_before_peek",
            kind: "message",
            T: Dgn,
          },
        ])
      }
      static fromBinary(e, t) {
        return new GPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GPe, e, t)
      }
    },
    _Co = class JPe extends _ {
      constructor(e) {
        super(),
          (this.changes = []),
          (this.modelUuid = ""),
          (this.numCorrectChanges = 0),
          (this.numUnvalidatedChanges = 0),
          (this.numIncorrectChanges = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelWithHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "changes", kind: "message", T: uG, repeated: !0 },
          { no: 2, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 3, name: "starting_model", kind: "message", T: Twn },
          { no: 4, name: "num_correct_changes", kind: "scalar", T: 5 },
          { no: 5, name: "num_unvalidated_changes", kind: "scalar", T: 5 },
          { no: 6, name: "num_incorrect_changes", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new JPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JPe, e, t)
      }
    },
    UCo = class KPe extends _ {
      constructor(e) {
        super(),
          (this.timestamp = 0),
          (this.v = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTimelineEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "timestamp", kind: "scalar", T: 1 },
          { no: 2, name: "event", kind: "message", T: M1t, oneof: "v" },
          { no: 3, name: "change", kind: "message", T: $wn, oneof: "v" },
        ])
      }
      static fromBinary(e, t) {
        return new KPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KPe, e, t)
      }
    },
    $wn = class YPe extends _ {
      constructor(e) {
        super(),
          (this.modelUuid = ""),
          (this.changeIndex = 0),
          (this.status = Moe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CppTimelineEvent.Change"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "change_index", kind: "scalar", T: 5 },
          { no: 3, name: "change", kind: "message", T: uG },
          { no: 4, name: "status", kind: "enum", T: v.getEnumType(Moe) },
        ])
      }
      static fromBinary(e, t) {
        return new YPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YPe, e, t)
      }
    },
    Moe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.CORRECT = 1)] = "CORRECT"),
      (i[(i.UNVALIDATED = 2)] = "UNVALIDATED"),
      (i[(i.INCORRECT = 3)] = "INCORRECT")
  })(Moe || (Moe = {})),
    v.util.setEnumType(Moe, "aiserver.v1.CppTimelineEvent.Change.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_CORRECT" },
      { no: 2, name: "STATUS_UNVALIDATED" },
      { no: 3, name: "STATUS_INCORRECT" },
    ])
  var t7 = class XPe extends _ {
      constructor(e) {
        super(), (this.item = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentiallyCachedContextItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_item", kind: "message", T: EVe, oneof: "item" },
          {
            no: 2,
            name: "context_item_hash",
            kind: "scalar",
            T: 9,
            oneof: "item",
          },
        ])
      }
      static fromBinary(e, t) {
        return new XPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XPe, e, t)
      }
    },
    xVe = class QPe extends _ {
      constructor(e) {
        super(), (this.contextItemStatuses = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextStatusUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "context_item_statuses",
            kind: "message",
            T: Fwn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new QPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QPe, e, t)
      }
    },
    kVe = class ZPe extends _ {
      constructor(e) {
        super(), (this.missingContextItemHashes = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.MissingContextItems"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 2,
            name: "missing_context_item_hashes",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new ZPe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZPe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZPe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZPe, e, t)
      }
    },
    Fwn = class eLe extends _ {
      constructor(e) {
        super(),
          (this.contextItemHash = ""),
          (this.shownToTheModel = !1),
          (this.score = 0),
          (this.percentageOfAvailableSpace = 0),
          (this.postGenerationEvaluation = $oe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItemStatus"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_item_hash", kind: "scalar", T: 9 },
          { no: 2, name: "shown_to_the_model", kind: "scalar", T: 8 },
          { no: 3, name: "score", kind: "scalar", T: 2 },
          { no: 4, name: "percentage_of_available_space", kind: "scalar", T: 2 },
          {
            no: 5,
            name: "post_generation_evaluation",
            kind: "enum",
            T: v.getEnumType($oe),
          },
        ])
      }
      static fromBinary(e, t) {
        return new eLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eLe, e, t)
      }
    },
    $oe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.USEFUL = 1)] = "USEFUL"),
      (i[(i.USELESS = 2)] = "USELESS")
  })($oe || ($oe = {})),
    v.util.setEnumType(
      $oe,
      "aiserver.v1.ContextItemStatus.PostGenerationEvaluation",
      [
        { no: 0, name: "POST_GENERATION_EVALUATION_UNSPECIFIED" },
        { no: 1, name: "POST_GENERATION_EVALUATION_USEFUL" },
        { no: 2, name: "POST_GENERATION_EVALUATION_USELESS" },
      ],
    )
  var EVe = class tLe extends _ {
      constructor(e) {
        super(), (this.item = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "intent", kind: "message", T: i7 },
          { no: 2, name: "file_chunk", kind: "message", T: F1t, oneof: "item" },
          {
            no: 3,
            name: "outline_chunk",
            kind: "message",
            T: _wn,
            oneof: "item",
          },
          {
            no: 4,
            name: "cmd_k_selection",
            kind: "message",
            T: QMi,
            oneof: "item",
          },
          {
            no: 5,
            name: "cmd_k_immediate_context",
            kind: "message",
            T: ZMi,
            oneof: "item",
          },
          { no: 6, name: "cmd_k_query", kind: "message", T: O1t, oneof: "item" },
          {
            no: 7,
            name: "cmd_k_query_history",
            kind: "message",
            T: Wwn,
            oneof: "item",
          },
          {
            no: 8,
            name: "custom_instructions",
            kind: "message",
            T: Jwn,
            oneof: "item",
          },
          {
            no: 9,
            name: "go_to_definition_result",
            kind: "message",
            T: t$i,
            oneof: "item",
          },
          {
            no: 10,
            name: "documentation_chunk",
            kind: "message",
            T: Kwn,
            oneof: "item",
          },
          { no: 11, name: "lints", kind: "message", T: Ywn, oneof: "item" },
          {
            no: 12,
            name: "chat_history",
            kind: "message",
            T: zwn,
            oneof: "item",
          },
          {
            no: 13,
            name: "notebook_cell_output",
            kind: "message",
            T: Qwn,
            oneof: "item",
          },
          {
            no: 14,
            name: "terminal_history",
            kind: "message",
            T: Gwn,
            oneof: "item",
          },
          {
            no: 15,
            name: "terminal_cmd_k_query",
            kind: "message",
            T: e$i,
            oneof: "item",
          },
          {
            no: 16,
            name: "terminal_cmd_k_query_history",
            kind: "message",
            T: Vwn,
            oneof: "item",
          },
          {
            no: 17,
            name: "sparse_file_chunk",
            kind: "message",
            T: Own,
            oneof: "item",
          },
          {
            no: 18,
            name: "lsp_subgraph_chunk",
            kind: "message",
            T: Zwn,
            oneof: "item",
          },
          {
            no: 19,
            name: "commit_note_chunk",
            kind: "message",
            T: e0n,
            oneof: "item",
          },
          {
            no: 20,
            name: "file_diff_history",
            kind: "message",
            T: Uwn,
            oneof: "item",
          },
          {
            no: 21,
            name: "cmd_k_query_history_in_diff_session",
            kind: "message",
            T: qwn,
            oneof: "item",
          },
        ])
      }
      static fromBinary(e, t) {
        return new tLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tLe, e, t)
      }
    },
    F1t = class iLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.chunkContents = ""),
          (this.startLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.FileChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "chunk_contents", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new iLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iLe, e, t)
      }
    },
    Own = class sLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lines = []),
          (this.totalNumberOfLinesInFile = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.SparseFileChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "lines", kind: "message", T: Bwn, repeated: !0 },
          { no: 3, name: "total_number_of_lines_in_file", kind: "scalar", T: 5 },
          { no: 4, name: "cell_number", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new sLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sLe, e, t)
      }
    },
    Bwn = class nLe extends _ {
      constructor(e) {
        super(),
          (this.line = ""),
          (this.lineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.SparseFileChunk.Line"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new nLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nLe, e, t)
      }
    },
    _wn = class rLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.OutlineChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "full_range", kind: "message", T: Kf },
        ])
      }
      static fromBinary(e, t) {
        return new rLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rLe, e, t)
      }
    },
    QMi = class oLe extends _ {
      constructor(e) {
        super(),
          (this.lines = []),
          (this.startLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKSelection"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new oLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oLe, e, t)
      }
    },
    Uwn = class aLe extends _ {
      constructor(e) {
        super(),
          (this.howManyDiffsAgo = 0),
          (this.isVeryRecent = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.FileDiffHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cpp_file_diff_history", kind: "message", T: $C },
          { no: 2, name: "how_many_diffs_ago", kind: "scalar", T: 5 },
          { no: 3, name: "is_very_recent", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new aLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aLe, e, t)
      }
    },
    ZMi = class lLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lines = []),
          (this.totalNumberOfLinesInFile = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKImmediateContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "lines", kind: "message", T: Hwn, repeated: !0 },
          { no: 3, name: "total_number_of_lines_in_file", kind: "scalar", T: 5 },
          { no: 4, name: "cell_number", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new lLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lLe, e, t)
      }
    },
    Hwn = class cLe extends _ {
      constructor(e) {
        super(),
          (this.line = ""),
          (this.lineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKImmediateContext.Line"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new cLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cLe, e, t)
      }
    },
    O1t = class hLe extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKQuery"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hLe, e, t)
      }
    },
    e$i = class uLe extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.TerminalCmdKQuery"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new uLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uLe, e, t)
      }
    },
    Vwn = class Lte extends _ {
      constructor(e) {
        super(),
          (this.contextItemHashes = []),
          (this.suggestedCommand = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.TerminalCmdKQueryHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "message", T: e$i },
          { no: 2, name: "query_history", kind: "message", T: Lte },
          {
            no: 5,
            name: "context_item_hashes",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 6, name: "suggested_command", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Lte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Lte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Lte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Lte, e, t)
      }
    },
    Wwn = class Nte extends _ {
      constructor(e) {
        super(), (this.contextItemHashes = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKQueryHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "message", T: O1t },
          { no: 2, name: "immediate_context", kind: "message", T: ZMi },
          { no: 3, name: "selection", kind: "message", T: QMi },
          { no: 4, name: "query_history", kind: "message", T: Nte },
          {
            no: 5,
            name: "context_item_hashes",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 6, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
          { no: 7, name: "timestamp_double", kind: "scalar", T: 1, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Nte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Nte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Nte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Nte, e, t)
      }
    },
    qwn = class dLe extends _ {
      constructor(e) {
        super(),
          (this.pastCmdkQueries = []),
          (this.currTimestampDouble = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CmdKQueryHistoryInDiffSession"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "past_cmdk_queries",
            kind: "message",
            T: jwn,
            repeated: !0,
          },
          { no: 3, name: "curr_timestamp_double", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new dLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dLe, e, t)
      }
    },
    jwn = class fLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.timestampDouble = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ContextItem.CmdKQueryHistoryInDiffSession.PastCmdKQueryInDiffSession"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "message", T: O1t },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 5, name: "cmdk_was_accepted", kind: "scalar", T: 8, opt: !0 },
          { no: 6, name: "timestamp_double", kind: "scalar", T: 1 },
          {
            no: 7,
            name: "timestamp_for_diff_interleaving",
            kind: "scalar",
            T: 1,
            opt: !0,
          },
          { no: 8, name: "request_id", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new fLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fLe, e, t)
      }
    },
    zwn = class Rte extends _ {
      constructor(e) {
        super(),
          (this.userMessage = ""),
          (this.assistantResponse = ""),
          (this.activeForCmdK = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.ChatHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "user_message", kind: "scalar", T: 9 },
          { no: 2, name: "assistant_response", kind: "scalar", T: 9 },
          { no: 3, name: "chat_history", kind: "message", T: Rte },
          { no: 4, name: "active_for_cmd_k", kind: "scalar", T: 8 },
          { no: 5, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
          { no: 6, name: "timestamp_double", kind: "scalar", T: 1, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Rte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Rte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Rte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Rte, e, t)
      }
    },
    Gwn = class gLe extends _ {
      constructor(e) {
        super(),
          (this.history = ""),
          (this.cwdFull = ""),
          (this.cwdRelativeWorkspacePath = ""),
          (this.activeForCmdK = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.TerminalHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "history", kind: "scalar", T: 9 },
          { no: 5, name: "cwd_full", kind: "scalar", T: 9 },
          { no: 6, name: "cwd_relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "active_for_cmd_k", kind: "scalar", T: 8 },
          { no: 7, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
          { no: 8, name: "timestamp_double", kind: "scalar", T: 1, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new gLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gLe, e, t)
      }
    },
    Jwn = class pLe extends _ {
      constructor(e) {
        super(), (this.instructions = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CustomInstructions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instructions", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new pLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pLe, e, t)
      }
    },
    t$i = class mLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.line = ""),
          (this.lineNumber = 0),
          (this.columnNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.GoToDefinitionResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line", kind: "scalar", T: 9 },
          { no: 3, name: "line_number", kind: "scalar", T: 5 },
          { no: 4, name: "column_number", kind: "scalar", T: 5 },
          { no: 5, name: "definition_chunk", kind: "message", T: F1t },
        ])
      }
      static fromBinary(e, t) {
        return new mLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mLe, e, t)
      }
    },
    Kwn = class bLe extends _ {
      constructor(e) {
        super(),
          (this.docName = ""),
          (this.pageUrl = ""),
          (this.documentationChunk = ""),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.DocumentationChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_name", kind: "scalar", T: 9 },
          { no: 2, name: "page_url", kind: "scalar", T: 9 },
          { no: 3, name: "documentation_chunk", kind: "scalar", T: 9 },
          { no: 4, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new bLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bLe, e, t)
      }
    },
    Ywn = class vLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lints = []),
          (this.contextLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.Lints"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "lints", kind: "message", T: Mgn, repeated: !0 },
          { no: 3, name: "context_lines", kind: "message", T: Xwn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new vLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vLe, e, t)
      }
    },
    Xwn = class yLe extends _ {
      constructor(e) {
        super(),
          (this.line = ""),
          (this.lineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.Lints.Line"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new yLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yLe, e, t)
      }
    },
    Qwn = class wLe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.cellOutput = ""),
          (this.cellNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.NotebookCellOutput"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "cell_output", kind: "scalar", T: 9 },
          { no: 3, name: "cell_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new wLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wLe, e, t)
      }
    },
    Zwn = class CLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.LspSubgraphChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lsp_subgraph_full_context", kind: "message", T: I1t },
        ])
      }
      static fromBinary(e, t) {
        return new CLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CLe, e, t)
      }
    },
    e0n = class SLe extends _ {
      constructor(e) {
        super(), (this.note = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItem.CommitNoteChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "note", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new SLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SLe, e, t)
      }
    },
    i7 = class xLe extends _ {
      constructor(e) {
        super(),
          (this.type = lc.UNSPECIFIED),
          (this.uuid = ""),
          (this.intent = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "enum", T: v.getEnumType(lc) },
          { no: 15, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "file", kind: "message", T: i0n, oneof: "intent" },
          {
            no: 3,
            name: "code_selection",
            kind: "message",
            T: s0n,
            oneof: "intent",
          },
          { no: 5, name: "lints", kind: "message", T: r0n, oneof: "intent" },
          {
            no: 6,
            name: "recent_locations",
            kind: "message",
            T: l0n,
            oneof: "intent",
          },
          {
            no: 8,
            name: "cmd_k_current_file",
            kind: "message",
            T: u0n,
            oneof: "intent",
          },
          {
            no: 9,
            name: "cmd_k_query_etc",
            kind: "message",
            T: d0n,
            oneof: "intent",
          },
          {
            no: 14,
            name: "terminal_cmd_k_defaults",
            kind: "message",
            T: b0n,
            oneof: "intent",
          },
          {
            no: 10,
            name: "cmd_k_definitions",
            kind: "message",
            T: g0n,
            oneof: "intent",
          },
          {
            no: 11,
            name: "documentation",
            kind: "message",
            T: t0n,
            oneof: "intent",
          },
          {
            no: 12,
            name: "custom_instructions",
            kind: "message",
            T: f0n,
            oneof: "intent",
          },
          {
            no: 13,
            name: "chat_history",
            kind: "message",
            T: p0n,
            oneof: "intent",
          },
          {
            no: 16,
            name: "terminal_history",
            kind: "message",
            T: v0n,
            oneof: "intent",
          },
          {
            no: 17,
            name: "visible_tabs",
            kind: "message",
            T: h0n,
            oneof: "intent",
          },
          {
            no: 18,
            name: "lsp_subgraph",
            kind: "message",
            T: y0n,
            oneof: "intent",
          },
          {
            no: 19,
            name: "commit_notes",
            kind: "message",
            T: n0n,
            oneof: "intent",
          },
          {
            no: 20,
            name: "diff_history",
            kind: "message",
            T: m0n,
            oneof: "intent",
          },
          {
            no: 21,
            name: "past_cmdk_messages_in_diff_sessions",
            kind: "message",
            T: c0n,
            oneof: "intent",
          },
        ])
      }
      static fromBinary(e, t) {
        return new xLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xLe, e, t)
      }
    },
    lc
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.USER_ADDED = 1)] = "USER_ADDED"),
      (i[(i.AUTOMATIC = 2)] = "AUTOMATIC")
  })(lc || (lc = {})),
    v.util.setEnumType(lc, "aiserver.v1.ContextIntent.Type", [
      { no: 0, name: "TYPE_UNSPECIFIED" },
      { no: 1, name: "TYPE_USER_ADDED" },
      { no: 2, name: "TYPE_AUTOMATIC" },
    ])
  var t0n = class kLe extends _ {
      constructor(e) {
        super(), (this.documentationIdentifier = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.Documentation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "documentation_identifier", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new kLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kLe, e, t)
      }
    },
    i0n = class ELe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.mode = kf.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "mode", kind: "enum", T: v.getEnumType(kf) },
        ])
      }
      static fromBinary(e, t) {
        return new ELe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ELe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ELe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ELe, e, t)
      }
    },
    kf
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.FULL = 1)] = "FULL"),
      (i[(i.OUTLINE = 2)] = "OUTLINE"),
      (i[(i.CHUNKS = 3)] = "CHUNKS")
  })(kf || (kf = {})),
    v.util.setEnumType(kf, "aiserver.v1.ContextIntent.File.Mode", [
      { no: 0, name: "MODE_UNSPECIFIED" },
      { no: 1, name: "MODE_FULL" },
      { no: 2, name: "MODE_OUTLINE" },
      { no: 3, name: "MODE_CHUNKS" },
    ])
  var s0n = class ILe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CodeSelection"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "potentially_out_of_date_range",
            kind: "message",
            T: Hu,
          },
          { no: 3, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ILe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ILe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ILe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ILe, e, t)
      }
    },
    HCo = class DLe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.Symbol"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbol", kind: "message", T: toe },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new DLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DLe, e, t)
      }
    },
    n0n = class TLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CommitNotes"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new TLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TLe, e, t)
      }
    },
    r0n = class PLe extends _ {
      constructor(e) {
        super(),
          (this.scope = { case: void 0 }),
          (this.filterToSeverities = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.Lints"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cmdk_scope", kind: "message", T: o0n, oneof: "scope" },
          { no: 2, name: "file_scope", kind: "message", T: a0n, oneof: "scope" },
          {
            no: 3,
            name: "filter_to_severities",
            kind: "enum",
            T: v.getEnumType(lk),
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new PLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PLe, e, t)
      }
    },
    o0n = class LLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.Lints.CmdKScope"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new LLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LLe, e, t)
      }
    },
    a0n = class NLe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.Lints.FileScope"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "filter_range", kind: "message", T: Kf, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NLe, e, t)
      }
    },
    l0n = class RLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.RecentLocations"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "timestamp", kind: "scalar", T: 1, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new RLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RLe, e, t)
      }
    },
    c0n = class ALe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ContextIntent.PastCmdkConversationsInDiffSessions"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ALe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ALe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ALe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ALe, e, t)
      }
    },
    h0n = class MLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.VisibleTabs"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new MLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MLe, e, t)
      }
    },
    VCo = class $Le extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CodebaseChunks"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new $Le().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Le().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Le().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Le, e, t)
      }
    },
    u0n = class FLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CmdKCurrentFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new FLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FLe, e, t)
      }
    },
    d0n = class OLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CmdKQueryEtc"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new OLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OLe, e, t)
      }
    },
    f0n = class BLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CustomInstructions"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new BLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BLe, e, t)
      }
    },
    g0n = class _Le extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.CmdKDefinitions"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new _Le().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Le().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Le().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Le, e, t)
      }
    },
    p0n = class ULe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.ChatHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ULe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ULe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ULe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ULe, e, t)
      }
    },
    m0n = class HLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.DiffHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new HLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HLe, e, t)
      }
    },
    b0n = class VLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.TerminalCmdKDefaults"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new VLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VLe, e, t)
      }
    },
    v0n = class WLe extends _ {
      constructor(e) {
        super(),
          (this.instanceId = 0),
          (this.activeForCmdK = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.TerminalHistory"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instance_id", kind: "scalar", T: 5 },
          { no: 2, name: "active_for_cmd_k", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "use_active_instance_as_fallback",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new WLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WLe, e, t)
      }
    },
    y0n = class qLe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextIntent.LspSubgraph"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new qLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qLe, e, t)
      }
    },
    B1t = class jLe extends _ {
      constructor(e) {
        super(), (this.contextItems = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankCmdKContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 3, name: "legacy_context", kind: "message", T: A$ },
          { no: 2, name: "cmd_k_options", kind: "message", T: IVe },
        ])
      }
      static fromBinary(e, t) {
        return new jLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jLe, e, t)
      }
    },
    w0n = class zLe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankCmdKContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "context_status_update",
            kind: "message",
            T: xVe,
            oneof: "response",
          },
          {
            no: 2,
            name: "missing_context_items",
            kind: "message",
            T: kVe,
            oneof: "response",
          },
          { no: 3, name: "did_call", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new zLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zLe, e, t)
      }
    },
    C0n = class GLe extends _ {
      constructor(e) {
        super(), (this.contextItems = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankTerminalCmdKContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 2, name: "cmd_k_options", kind: "message", T: i$i },
        ])
      }
      static fromBinary(e, t) {
        return new GLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GLe, e, t)
      }
    },
    S0n = class JLe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankTerminalCmdKContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "context_status_update",
            kind: "message",
            T: xVe,
            oneof: "response",
          },
          {
            no: 2,
            name: "missing_context_items",
            kind: "message",
            T: kVe,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new JLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JLe, e, t)
      }
    },
    i$i = class KLe extends _ {
      constructor(e) {
        super(),
          (this.chatMode = !1),
          (this.adaCmdKContext = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TerminalCmdKOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 3, name: "model_details", kind: "message", T: zr },
          { no: 1, name: "chat_mode", kind: "scalar", T: 8 },
          { no: 2, name: "ada_cmd_k_context", kind: "scalar", T: 8 },
          { no: 4, name: "use_web", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new KLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KLe, e, t)
      }
    },
    IVe = class YLe extends _ {
      constructor(e) {
        super(),
          (this.chatMode = !1),
          (this.adaCmdKContext = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 3, name: "model_details", kind: "message", T: zr },
          { no: 1, name: "chat_mode", kind: "scalar", T: 8 },
          { no: 2, name: "ada_cmd_k_context", kind: "scalar", T: 8 },
          { no: 4, name: "use_reranker", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "use_web", kind: "scalar", T: 8, opt: !0 },
          {
            no: 6,
            name: "request_is_for_caching",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new YLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YLe, e, t)
      }
    },
    DVe = class XLe extends _ {
      constructor(e) {
        super(),
          (this.originalLines = []),
          (this.relativePath = ""),
          (this.extraContextAbove = []),
          (this.extraContextBelow = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKUpcomingEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "original_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "relative_path", kind: "scalar", T: 9 },
          {
            no: 4,
            name: "extra_context_above",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 5,
            name: "extra_context_below",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new XLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XLe, e, t)
      }
    },
    Foe = class QLe extends _ {
      constructor(e) {
        super(),
          (this.originalLines = []),
          (this.newLines = []),
          (this.relativePath = ""),
          (this.extraContextAbove = []),
          (this.extraContextBelow = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKPreviousEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "original_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "relative_path", kind: "scalar", T: 9 },
          {
            no: 4,
            name: "extra_context_above",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 5,
            name: "extra_context_below",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new QLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QLe, e, t)
      }
    },
    s$i = class ZLe extends _ {
      constructor(e) {
        super(),
          (this.contextItems = []),
          (this.sessionId = ""),
          (this.previousEdits = []),
          (this.upcomingEdits = []),
          (this.images = []),
          (this.links = []),
          (this.diffHistory = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamHypermodeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 2, name: "cmd_k_options", kind: "message", T: IVe },
          { no: 4, name: "cmd_k_debug_info", kind: "message", T: hI },
          { no: 6, name: "session_id", kind: "scalar", T: 9 },
          { no: 5, name: "legacy_context", kind: "message", T: A$ },
          { no: 7, name: "previous_edit", kind: "message", T: Foe, opt: !0 },
          {
            no: 8,
            name: "previous_edits",
            kind: "message",
            T: Foe,
            repeated: !0,
          },
          {
            no: 12,
            name: "upcoming_edits",
            kind: "message",
            T: DVe,
            repeated: !0,
          },
          {
            no: 9,
            name: "use_big_cmdk_for_multi_file_edit",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 10, name: "images", kind: "message", T: OT, repeated: !0 },
          { no: 11, name: "links", kind: "message", T: OSt, repeated: !0 },
          { no: 13, name: "diff_history", kind: "message", T: $C, repeated: !0 },
          { no: 14, name: "hyper_model", kind: "scalar", T: 9, opt: !0 },
          { no: 15, name: "timing_info", kind: "message", T: r$i, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ZLe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZLe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZLe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZLe, e, t)
      }
    },
    n$i = class eNe extends _ {
      constructor(e) {
        super(),
          (this.contextItems = []),
          (this.sessionId = ""),
          (this.previousEdits = []),
          (this.upcomingEdits = []),
          (this.images = []),
          (this.links = []),
          (this.diffHistory = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 2, name: "cmd_k_options", kind: "message", T: IVe },
          { no: 4, name: "cmd_k_debug_info", kind: "message", T: hI },
          { no: 6, name: "session_id", kind: "scalar", T: 9 },
          { no: 5, name: "legacy_context", kind: "message", T: A$ },
          { no: 7, name: "previous_edit", kind: "message", T: Foe, opt: !0 },
          {
            no: 8,
            name: "previous_edits",
            kind: "message",
            T: Foe,
            repeated: !0,
          },
          {
            no: 12,
            name: "upcoming_edits",
            kind: "message",
            T: DVe,
            repeated: !0,
          },
          {
            no: 9,
            name: "use_big_cmdk_for_multi_file_edit",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 10, name: "images", kind: "message", T: OT, repeated: !0 },
          { no: 11, name: "links", kind: "message", T: OSt, repeated: !0 },
          { no: 13, name: "diff_history", kind: "message", T: $C, repeated: !0 },
          {
            no: 14,
            name: "diff_to_base_branch",
            kind: "message",
            T: x0n,
            opt: !0,
          },
          { no: 15, name: "timing_info", kind: "message", T: r$i, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new eNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eNe, e, t)
      }
    },
    x0n = class tNe extends _ {
      constructor(e) {
        super(),
          (this.fileDiffs = []),
          (this.commits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKRequest.BranchDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_diffs", kind: "message", T: k0n, repeated: !0 },
          { no: 2, name: "commits", kind: "message", T: XN, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new tNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tNe, e, t)
      }
    },
    k0n = class iNe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.diff = ""),
          (this.tooBig = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKRequest.BranchDiff.FileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "diff", kind: "scalar", T: 9 },
          { no: 3, name: "too_big", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new iNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iNe, e, t)
      }
    },
    r$i = class sNe extends _ {
      constructor(e) {
        super(),
          (this.userInputTime = 0),
          (this.streamCmdkTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TimingInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "user_input_time", kind: "scalar", T: 1 },
          { no: 2, name: "stream_cmdk_time", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new sNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sNe, e, t)
      }
    },
    o$i = class nNe extends _ {
      constructor(e) {
        super(),
          (this.contextItems = []),
          (this.sessionId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 2, name: "cmd_k_options", kind: "message", T: i$i },
          { no: 6, name: "session_id", kind: "scalar", T: 9 },
          { no: 5, name: "legacy_context", kind: "message", T: A$ },
        ])
      }
      static fromBinary(e, t) {
        return new nNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nNe, e, t)
      }
    },
    A$ = class rNe extends _ {
      constructor(e) {
        super(),
          (this.promptCodeBlocks = []),
          (this.documentationIdentifiers = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CmdKLegacyContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          {
            no: 12,
            name: "prompt_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new rNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rNe, e, t)
      }
    },
    a$i = class oNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponseContextWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: s7,
            oneof: "response",
          },
          {
            no: 2,
            name: "context_status_update",
            kind: "message",
            T: xVe,
            oneof: "response",
          },
          {
            no: 3,
            name: "missing_context_items",
            kind: "message",
            T: kVe,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new oNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oNe, e, t)
      }
    },
    E0n = class aNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKResponseContextWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: I0n,
            oneof: "response",
          },
          {
            no: 2,
            name: "context_status_update",
            kind: "message",
            T: xVe,
            oneof: "response",
          },
          {
            no: 3,
            name: "missing_context_items",
            kind: "message",
            T: kVe,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new aNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aNe, e, t)
      }
    },
    I0n = class lNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "terminal_command",
            kind: "message",
            T: D0n,
            oneof: "response",
          },
          { no: 4, name: "chat", kind: "message", T: T0n, oneof: "response" },
          {
            no: 5,
            name: "status_update",
            kind: "message",
            T: P0n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new lNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lNe, e, t)
      }
    },
    D0n = class cNe extends _ {
      constructor(e) {
        super(), (this.partialCommand = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKResponse.TerminalCommand"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "partial_command", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new cNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cNe, e, t)
      }
    },
    T0n = class hNe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKResponse.Chat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hNe, e, t)
      }
    },
    P0n = class uNe extends _ {
      constructor(e) {
        super(), (this.messages = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalCmdKResponse.StatusUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "messages", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new uNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uNe, e, t)
      }
    },
    s7 = class dNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "edit_start",
            kind: "message",
            T: l$i,
            oneof: "response",
          },
          {
            no: 2,
            name: "edit_stream",
            kind: "message",
            T: c$i,
            oneof: "response",
          },
          { no: 3, name: "edit_end", kind: "message", T: h$i, oneof: "response" },
          { no: 4, name: "chat", kind: "message", T: L0n, oneof: "response" },
          {
            no: 5,
            name: "status_update",
            kind: "message",
            T: N0n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new dNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dNe, e, t)
      }
    },
    l$i = class fNe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumber = 0),
          (this.editId = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse.EditStart"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 2, name: "edit_id", kind: "scalar", T: 5 },
          {
            no: 3,
            name: "max_end_line_number_exclusive",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 4, name: "file_path", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new fNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fNe, e, t)
      }
    },
    c$i = class gNe extends _ {
      constructor(e) {
        super(), (this.text = ""), (this.editId = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse.EditStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "edit_id", kind: "scalar", T: 5 },
          { no: 3, name: "file_path", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new gNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gNe, e, t)
      }
    },
    h$i = class pNe extends _ {
      constructor(e) {
        super(),
          (this.endLineNumberExclusive = 0),
          (this.editId = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse.EditEnd"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "end_line_number_exclusive", kind: "scalar", T: 5 },
          { no: 2, name: "edit_id", kind: "scalar", T: 5 },
          { no: 3, name: "file_path", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pNe, e, t)
      }
    },
    L0n = class mNe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse.Chat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new mNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mNe, e, t)
      }
    },
    N0n = class bNe extends _ {
      constructor(e) {
        super(), (this.messages = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCmdKResponse.StatusUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "messages", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new bNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bNe, e, t)
      }
    },
    R0n = class vNe extends _ {
      constructor(e) {
        super(),
          (this.codeBlocks = []),
          (this.contextItems = []),
          (this.sessionId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelevantChunksRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 2, name: "cmd_k_options", kind: "message", T: IVe },
          { no: 3, name: "context_items", kind: "message", T: t7, repeated: !0 },
          { no: 4, name: "session_id", kind: "scalar", T: 9 },
          { no: 5, name: "legacy_context", kind: "message", T: A$ },
        ])
      }
      static fromBinary(e, t) {
        return new vNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vNe, e, t)
      }
    },
    A0n = class yNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamGetRelevantChunksResponseContextWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: M0n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new yNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yNe, e, t)
      }
    },
    M0n = class wNe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelevantChunksResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "code_blocks",
            kind: "message",
            T: F0n,
            oneof: "response",
          },
          {
            no: 2,
            name: "chain_of_thought_stream",
            kind: "message",
            T: $0n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new wNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wNe, e, t)
      }
    },
    $0n = class CNe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.GetRelevantChunksResponse.ChainOfThoughtStream"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new CNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CNe, e, t)
      }
    },
    F0n = class SNe extends _ {
      constructor(e) {
        super(), (this.codeBlocks = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRelevantChunksResponse.CodeBlocks"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SNe, e, t)
      }
    },
    UT
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.ACCEPTED = 1)] = "ACCEPTED"),
      (i[(i.REJECTED = 2)] = "REJECTED"),
      (i[(i.PARTIALLY_ACCEPTED = 3)] = "PARTIALLY_ACCEPTED")
  })(UT || (UT = {})),
    v.util.setEnumType(UT, "aiserver.v1.EditFate", [
      { no: 0, name: "EDIT_FATE_UNSPECIFIED" },
      { no: 1, name: "EDIT_FATE_ACCEPTED" },
      { no: 2, name: "EDIT_FATE_REJECTED" },
      { no: 3, name: "EDIT_FATE_PARTIALLY_ACCEPTED" },
    ])
  var nm
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.COMPOSER = 1)] = "COMPOSER"),
      (i[(i.CLICKED_APPLY = 2)] = "CLICKED_APPLY"),
      (i[(i.CACHED_APPLY = 3)] = "CACHED_APPLY"),
      (i[(i.COMPOSER_AGENT = 4)] = "COMPOSER_AGENT")
  })(nm || (nm = {})),
    v.util.setEnumType(nm, "aiserver.v1.FastApplySource", [
      { no: 0, name: "FAST_APPLY_SOURCE_UNSPECIFIED" },
      { no: 1, name: "FAST_APPLY_SOURCE_COMPOSER" },
      { no: 2, name: "FAST_APPLY_SOURCE_CLICKED_APPLY" },
      { no: 3, name: "FAST_APPLY_SOURCE_CACHED_APPLY" },
      { no: 4, name: "FAST_APPLY_SOURCE_COMPOSER_AGENT" },
    ])
  var O0n = class xNe extends _ {
      constructor(e) {
        super(), (this.requestId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportEditFateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "fate", kind: "enum", T: v.getEnumType(UT), opt: !0 },
          {
            no: 3,
            name: "num_accepted_partial_diffs",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 4,
            name: "num_rejected_partial_diffs",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new xNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xNe, e, t)
      }
    },
    B0n = class kNe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportEditFateResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new kNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kNe, e, t)
      }
    },
    _0n = class ENe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.source = nm.UNSPECIFIED),
          (this.willingToPayExtraForSpeed = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WarmApplyRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "source", kind: "enum", T: v.getEnumType(nm) },
          { no: 6, name: "willing_to_pay_extra_for_speed", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new ENe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ENe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ENe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ENe, e, t)
      }
    },
    U0n = class INe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WarmApplyResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new INe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new INe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new INe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(INe, e, t)
      }
    },
    n7
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.SPECIFIC_RULES = 1)] = "SPECIFIC_RULES"),
      (i[(i.COMPILE_ERRORS = 2)] = "COMPILE_ERRORS"),
      (i[(i.CHANGE_BEHAVIOR = 3)] = "CHANGE_BEHAVIOR"),
      (i[(i.RELEVANCE = 5)] = "RELEVANCE"),
      (i[(i.USER_AWARENESS = 6)] = "USER_AWARENESS"),
      (i[(i.CORRECTNESS = 7)] = "CORRECTNESS"),
      (i[(i.CHUNKING = 8)] = "CHUNKING"),
      (i[(i.TYPO = 9)] = "TYPO"),
      (i[(i.CONFIDENCE = 10)] = "CONFIDENCE"),
      (i[(i.DISMISSED_BUGS = 11)] = "DISMISSED_BUGS")
  })(n7 || (n7 = {})),
    v.util.setEnumType(n7, "aiserver.v1.LintDiscriminator", [
      { no: 0, name: "LINT_DISCRIMINATOR_UNSPECIFIED" },
      { no: 1, name: "LINT_DISCRIMINATOR_SPECIFIC_RULES" },
      { no: 2, name: "LINT_DISCRIMINATOR_COMPILE_ERRORS" },
      { no: 3, name: "LINT_DISCRIMINATOR_CHANGE_BEHAVIOR" },
      { no: 5, name: "LINT_DISCRIMINATOR_RELEVANCE" },
      { no: 6, name: "LINT_DISCRIMINATOR_USER_AWARENESS" },
      { no: 7, name: "LINT_DISCRIMINATOR_CORRECTNESS" },
      { no: 8, name: "LINT_DISCRIMINATOR_CHUNKING" },
      { no: 9, name: "LINT_DISCRIMINATOR_TYPO" },
      { no: 10, name: "LINT_DISCRIMINATOR_CONFIDENCE" },
      { no: 11, name: "LINT_DISCRIMINATOR_DISMISSED_BUGS" },
    ])
  var r7
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.NAIVE = 1)] = "NAIVE"),
      (i[(i.COMMENT_PIPELINE = 2)] = "COMMENT_PIPELINE"),
      (i[(i.SIMPLE_BUG = 3)] = "SIMPLE_BUG"),
      (i[(i.SIMPLE_LINT_RULES = 4)] = "SIMPLE_LINT_RULES")
  })(r7 || (r7 = {})),
    v.util.setEnumType(r7, "aiserver.v1.LintGenerator", [
      { no: 0, name: "LINT_GENERATOR_UNSPECIFIED" },
      { no: 1, name: "LINT_GENERATOR_NAIVE" },
      { no: 2, name: "LINT_GENERATOR_COMMENT_PIPELINE" },
      { no: 3, name: "LINT_GENERATOR_SIMPLE_BUG" },
      { no: 4, name: "LINT_GENERATOR_SIMPLE_LINT_RULES" },
    ])
  var u$i = class DNe extends _ {
      constructor(e) {
        super(),
          (this.relativeFilePath = ""),
          (this.lineSelection = ""),
          (this.tokenStartIndex = 0),
          (this.tokenEndIndex = 0),
          (this.likelyAlternateToken = ""),
          (this.lineChunkIndexZeroBased = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintExplanationRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
          { no: 2, name: "chunk", kind: "message", T: Ooe },
          { no: 3, name: "line_selection", kind: "scalar", T: 9 },
          { no: 4, name: "token_start_index", kind: "scalar", T: 5 },
          { no: 5, name: "token_end_index", kind: "scalar", T: 5 },
          { no: 6, name: "likely_alternate_token", kind: "scalar", T: 9 },
          { no: 7, name: "line_chunk_index_zero_based", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new DNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DNe, e, t)
      }
    },
    H0n = class TNe extends _ {
      constructor(e) {
        super(), (this.explanation = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintExplanationResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "explanation", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new TNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TNe, e, t)
      }
    },
    V0n = class PNe extends _ {
      constructor(e) {
        super(),
          (this.origLine = ""),
          (this.newLine = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintExplanationResponse2"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "orig_line", kind: "scalar", T: 9 },
          { no: 2, name: "new_line", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new PNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PNe, e, t)
      }
    },
    Ooe = class LNe extends _ {
      constructor(e) {
        super(),
          (this.chunkContents = ""),
          (this.startLineNumber = 0),
          (this.numRemainingLines = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "chunk_contents", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 4, name: "num_remaining_lines", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new LNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LNe, e, t)
      }
    },
    W0n = class NNe extends _ {
      constructor(e) {
        super(), (this.relativeFilePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintChunkRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
          { no: 2, name: "chunk", kind: "message", T: Ooe },
          {
            no: 3,
            name: "use_speculative_linter",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new NNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NNe, e, t)
      }
    },
    q0n = class RNe extends _ {
      constructor(e) {
        super(), (this.chunkTokens = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintChunkResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunk_tokens", kind: "message", T: _1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new RNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RNe, e, t)
      }
    },
    j0n = class ANe extends _ {
      constructor(e) {
        super(), (this.relativeFilePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintFimChunkRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
          { no: 2, name: "prefix", kind: "message", T: Ooe },
          { no: 3, name: "suffix", kind: "message", T: Ooe },
          { no: 4, name: "middle", kind: "message", T: Ooe },
        ])
      }
      static fromBinary(e, t) {
        return new ANe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ANe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ANe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ANe, e, t)
      }
    },
    z0n = class MNe extends _ {
      constructor(e) {
        super(), (this.middleChunkTokens = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintFimChunkResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "middle_chunk_tokens",
            kind: "message",
            T: _1t,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new MNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MNe, e, t)
      }
    },
    G0n = class $Ne extends _ {
      constructor(e) {
        super(),
          (this.relativeFilePath = ""),
          (this.fileContents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintFileRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
          { no: 2, name: "file_contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new $Ne().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Ne().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Ne().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Ne, e, t)
      }
    },
    J0n = class FNe extends _ {
      constructor(e) {
        super(),
          (this.token = ""),
          (this.logProbability = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TokensWithLogprobs"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "token", kind: "scalar", T: 9 },
          { no: 2, name: "log_probability", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new FNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FNe, e, t)
      }
    },
    _1t = class ONe extends _ {
      constructor(e) {
        super(),
          (this.tokensWithLogprobs = []),
          (this.actualToken = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TokenIndex"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "tokens_with_logprobs",
            kind: "message",
            T: J0n,
            repeated: !0,
          },
          { no: 2, name: "actual_token", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ONe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ONe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ONe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ONe, e, t)
      }
    },
    K0n = class BNe extends _ {
      constructor(e) {
        super(), (this.tokens = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintFileResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tokens", kind: "message", T: _1t, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new BNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BNe, e, t)
      }
    },
    Y0n = class _Ne extends _ {
      constructor(e) {
        super(),
          (this.discriminator = n7.UNSPECIFIED),
          (this.allow = !1),
          (this.reasoning = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LintDiscriminatorResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "discriminator", kind: "enum", T: v.getEnumType(n7) },
          { no: 2, name: "allow", kind: "scalar", T: 8 },
          { no: 3, name: "reasoning", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new _Ne().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Ne().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Ne().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Ne, e, t)
      }
    },
    Boe = class UNe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.uuid = ""),
          (this.message = ""),
          (this.replaceText = ""),
          (this.replaceInitialText = ""),
          (this.reevaluateInitialText = ""),
          (this.generator = r7.UNSPECIFIED),
          (this.discriminatorResults = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiLintBug"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 8, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "replace_range", kind: "message", T: Hu },
          { no: 4, name: "replace_text", kind: "scalar", T: 9 },
          { no: 5, name: "replace_initial_text", kind: "scalar", T: 9 },
          { no: 6, name: "reevaluate_range", kind: "message", T: Hu },
          { no: 7, name: "reevaluate_initial_text", kind: "scalar", T: 9 },
          { no: 9, name: "generator", kind: "enum", T: v.getEnumType(r7) },
          {
            no: 10,
            name: "discriminator_results",
            kind: "message",
            T: Y0n,
            repeated: !0,
          },
          { no: 11, name: "logprobs_payload", kind: "message", T: X0n },
        ])
      }
      static fromBinary(e, t) {
        return new UNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UNe, e, t)
      }
    },
    X0n = class HNe extends _ {
      constructor(e) {
        super(),
          (this.chunk = ""),
          (this.problematicLine = ""),
          (this.startCol = 0),
          (this.endCol = 0),
          (this.mostLikelyReplace = ""),
          (this.lineChunkIndexZeroBased = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogprobsLintPayload"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunk", kind: "scalar", T: 9 },
          { no: 2, name: "problematic_line", kind: "scalar", T: 9 },
          { no: 3, name: "start_col", kind: "scalar", T: 5 },
          { no: 4, name: "end_col", kind: "scalar", T: 5 },
          { no: 5, name: "most_likely_replace", kind: "scalar", T: 9 },
          { no: 6, name: "line_chunk_index_zero_based", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new HNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HNe, e, t)
      }
    },
    WCo = class VNe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.uuid = ""),
          (this.message = ""),
          (this.lineNumber = 0),
          (this.reevaluateInitialText = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiLintInlineSuggestion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 8, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "line_number", kind: "scalar", T: 5 },
          { no: 4, name: "reevaluate_range", kind: "message", T: Hu },
          { no: 5, name: "reevaluate_initial_text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new VNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VNe, e, t)
      }
    },
    qCo = class WNe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.uuid = ""),
          (this.message = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiLintOutOfFlowSuggestion"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 8, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new WNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WNe, e, t)
      }
    },
    d$i = class qNe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiLintRule"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new qNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qNe, e, t)
      }
    },
    f$i = class jNe extends _ {
      constructor(e) {
        super(), (this.files = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextAST"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "files", kind: "message", T: Q0n, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new jNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jNe, e, t)
      }
    },
    Q0n = class zNe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.nodes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTree"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "nodes", kind: "message", T: g$i, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new zNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zNe, e, t)
      }
    },
    g$i = class GNe extends _ {
      constructor(e) {
        super(), (this.node = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTreeNode"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "container", kind: "message", T: eCn, oneof: "node" },
          { no: 2, name: "blob", kind: "message", T: tCn, oneof: "node" },
          { no: 3, name: "symbol", kind: "message", T: Z0n, oneof: "node" },
        ])
      }
      static fromBinary(e, t) {
        return new GNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GNe, e, t)
      }
    },
    Z0n = class JNe extends _ {
      constructor(e) {
        super(),
          (this.docString = ""),
          (this.value = ""),
          (this.references = []),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTreeNode.Symbol"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_string", kind: "scalar", T: 9 },
          { no: 2, name: "value", kind: "scalar", T: 9 },
          { no: 6, name: "references", kind: "message", T: p$i, repeated: !0 },
          { no: 7, name: "score", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new JNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JNe, e, t)
      }
    },
    eCn = class KNe extends _ {
      constructor(e) {
        super(),
          (this.docString = ""),
          (this.header = ""),
          (this.trailer = ""),
          (this.children = []),
          (this.references = []),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTreeNode.Container"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_string", kind: "scalar", T: 9 },
          { no: 2, name: "header", kind: "scalar", T: 9 },
          { no: 3, name: "trailer", kind: "scalar", T: 9 },
          { no: 5, name: "children", kind: "message", T: g$i, repeated: !0 },
          { no: 6, name: "references", kind: "message", T: p$i, repeated: !0 },
          { no: 7, name: "score", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new KNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KNe, e, t)
      }
    },
    tCn = class YNe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTreeNode.Blob"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "value", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YNe, e, t)
      }
    },
    p$i = class XNe extends _ {
      constructor(e) {
        super(),
          (this.value = ""),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContainerTreeNode.Reference"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "value", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new XNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XNe, e, t)
      }
    },
    U1t = class QNe extends _ {
      constructor(e) {
        super(), (this.feature = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chat", kind: "message", T: sCn, oneof: "feature" },
          {
            no: 2,
            name: "context_chat",
            kind: "message",
            T: lCn,
            oneof: "feature",
          },
          { no: 3, name: "cmd_k", kind: "message", T: cCn, oneof: "feature" },
          {
            no: 4,
            name: "terminal_cmd_k",
            kind: "message",
            T: hCn,
            oneof: "feature",
          },
          {
            no: 5,
            name: "ai_review_accepted_comment",
            kind: "message",
            T: uCn,
            oneof: "feature",
          },
          {
            no: 6,
            name: "interpreter_chat",
            kind: "message",
            T: dCn,
            oneof: "feature",
          },
          {
            no: 7,
            name: "slash_edit",
            kind: "message",
            T: fCn,
            oneof: "feature",
          },
          { no: 8, name: "composer", kind: "message", T: rCn, oneof: "feature" },
          {
            no: 9,
            name: "fast_apply",
            kind: "message",
            T: nCn,
            oneof: "feature",
          },
          {
            no: 10,
            name: "warm_composer",
            kind: "message",
            T: aCn,
            oneof: "feature",
          },
          {
            no: 11,
            name: "bug_finder_trigger_v1",
            kind: "message",
            T: iCn,
            oneof: "feature",
          },
          {
            no: 12,
            name: "tool_call_composer",
            kind: "message",
            T: oCn,
            oneof: "feature",
          },
          {
            no: 13,
            name: "override_num_requests_counted",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new QNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QNe, e, t)
      }
    },
    iCn = class ZNe extends _ {
      constructor(e) {
        super(),
          (this.inBackgroundSubsidized = !1),
          (this.costCents = 0),
          (this.isFast = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.BugFinderTriggerV1"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "in_background_subsidized", kind: "scalar", T: 8 },
          { no: 2, name: "cost_cents", kind: "scalar", T: 5 },
          { no: 3, name: "is_fast", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new ZNe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZNe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZNe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZNe, e, t)
      }
    },
    sCn = class eRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.Chat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new eRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eRe, e, t)
      }
    },
    nCn = class tRe extends _ {
      constructor(e) {
        super(),
          (this.isOptimistic = !1),
          (this.willingToPayExtraForSpeed = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.FastApply"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_optimistic", kind: "scalar", T: 8 },
          { no: 2, name: "willing_to_pay_extra_for_speed", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new tRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tRe, e, t)
      }
    },
    rCn = class iRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.Composer"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iRe, e, t)
      }
    },
    oCn = class sRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.ToolCallComposer"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sRe, e, t)
      }
    },
    aCn = class nRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.WarmComposer"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nRe, e, t)
      }
    },
    lCn = class rRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.ContextChat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new rRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rRe, e, t)
      }
    },
    cCn = class oRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.CmdK"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oRe, e, t)
      }
    },
    hCn = class aRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.TerminalCmdK"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new aRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aRe, e, t)
      }
    },
    uCn = class lRe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.AiReviewAcceptedComment"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new lRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lRe, e, t)
      }
    },
    dCn = class cRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.InterpreterChat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new cRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cRe, e, t)
      }
    },
    fCn = class hRe extends _ {
      constructor(e) {
        super(), (this.modelIntent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEventDetails.SlashEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_intent", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hRe, e, t)
      }
    },
    gCn = class uRe extends _ {
      constructor(e) {
        super(),
          (this.timestamp = Jf.zero),
          (this.isSlow = !1),
          (this.status = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "timestamp", kind: "scalar", T: 3 },
          { no: 2, name: "details", kind: "message", T: U1t },
          {
            no: 3,
            name: "subscription_product_id",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          { no: 4, name: "usage_price_id", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "is_slow", kind: "scalar", T: 8 },
          { no: 6, name: "status", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new uRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uRe, e, t)
      }
    },
    m$i = class dRe extends _ {
      constructor(e) {
        super(),
          (this.interfaceRelativeWorkspacePath = ""),
          (this.interfaceLines = []),
          (this.testLines = []),
          (this.implementationLines = []),
          (this.language = ""),
          (this.testingFramework = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.InterfaceAgentClientState"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 3,
            name: "interface_relative_workspace_path",
            kind: "scalar",
            T: 9,
          },
          { no: 4, name: "interface_lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 5,
            name: "test_relative_workspace_path",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          { no: 10, name: "test_lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 6,
            name: "implementation_relative_workspace_path",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          {
            no: 7,
            name: "implementation_lines",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 8, name: "language", kind: "scalar", T: 9 },
          { no: 9, name: "testing_framework", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new dRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dRe, e, t)
      }
    },
    H1t = class fRe extends _ {
      constructor(e) {
        super(),
          (this.validateConfiguration = rm.UNSPECIFIED),
          (this.stubNewFunction = rm.UNSPECIFIED),
          (this.verifySpec = rm.UNSPECIFIED),
          (this.writeTestPlan = rm.UNSPECIFIED),
          (this.writeTests = rm.UNSPECIFIED),
          (this.writeImplementation = rm.UNSPECIFIED),
          (this.implementNewFunction = rm.UNSPECIFIED),
          (this.runTests = rm.UNSPECIFIED),
          (this.validateConfigurationMessage = ""),
          (this.stubNewFunctionMessage = ""),
          (this.verifySpecMessage = ""),
          (this.writeTestPlanMessage = ""),
          (this.writeTestsMessage = ""),
          (this.writeImplementationMessage = ""),
          (this.implementNewFunctionMessage = ""),
          (this.runTestsMessage = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.InterfaceAgentStatus"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "validate_configuration",
            kind: "enum",
            T: v.getEnumType(rm),
          },
          {
            no: 2,
            name: "stub_new_function",
            kind: "enum",
            T: v.getEnumType(rm),
          },
          { no: 3, name: "verify_spec", kind: "enum", T: v.getEnumType(rm) },
          { no: 15, name: "write_test_plan", kind: "enum", T: v.getEnumType(rm) },
          { no: 4, name: "write_tests", kind: "enum", T: v.getEnumType(rm) },
          {
            no: 5,
            name: "write_implementation",
            kind: "enum",
            T: v.getEnumType(rm),
          },
          {
            no: 6,
            name: "implement_new_function",
            kind: "enum",
            T: v.getEnumType(rm),
          },
          { no: 7, name: "run_tests", kind: "enum", T: v.getEnumType(rm) },
          { no: 8, name: "validate_configuration_message", kind: "scalar", T: 9 },
          { no: 9, name: "stub_new_function_message", kind: "scalar", T: 9 },
          { no: 10, name: "verify_spec_message", kind: "scalar", T: 9 },
          { no: 16, name: "write_test_plan_message", kind: "scalar", T: 9 },
          { no: 11, name: "write_tests_message", kind: "scalar", T: 9 },
          { no: 12, name: "write_implementation_message", kind: "scalar", T: 9 },
          {
            no: 13,
            name: "implement_new_function_message",
            kind: "scalar",
            T: 9,
          },
          { no: 14, name: "run_tests_message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new fRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fRe, e, t)
      }
    },
    rm
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.WAITING = 1)] = "WAITING"),
      (i[(i.RUNNING = 2)] = "RUNNING"),
      (i[(i.SUCCESS = 3)] = "SUCCESS"),
      (i[(i.FAILURE = 4)] = "FAILURE")
  })(rm || (rm = {})),
    v.util.setEnumType(rm, "aiserver.v1.InterfaceAgentStatus.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_WAITING" },
      { no: 2, name: "STATUS_RUNNING" },
      { no: 3, name: "STATUS_SUCCESS" },
      { no: 4, name: "STATUS_FAILURE" },
    ])
  var Yv
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.RUNNING = 1)] = "RUNNING"),
      (i[(i.PAUSED = 2)] = "PAUSED"),
      (i[(i.DONE = 3)] = "DONE"),
      (i[(i.NOT_STARTED = 4)] = "NOT_STARTED")
  })(Yv || (Yv = {})),
    v.util.setEnumType(Yv, "aiserver.v1.TaskStatus", [
      { no: 0, name: "TASK_STATUS_UNSPECIFIED" },
      { no: 1, name: "TASK_STATUS_RUNNING" },
      { no: 2, name: "TASK_STATUS_PAUSED" },
      { no: 3, name: "TASK_STATUS_DONE" },
      { no: 4, name: "TASK_STATUS_NOT_STARTED" },
    ])
  var b$i = class gRe extends _ {
      constructor(e) {
        super(), (this.terminalContent = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsTerminalFinishedRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "terminal_content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gRe, e, t)
      }
    },
    pCn = class pRe extends _ {
      constructor(e) {
        super(), (this.isFinished = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsTerminalFinishedResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_finished", kind: "scalar", T: 8 },
          { no: 2, name: "reason", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pRe, e, t)
      }
    },
    mCn = class mRe extends _ {
      constructor(e) {
        super(), (this.isFinished = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsTerminalFinishedResponseV2"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_finished", kind: "scalar", T: 8 },
          {
            no: 2,
            name: "ended_reason",
            kind: "enum",
            T: v.getEnumType(BT),
            opt: !0,
          },
          { no: 3, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new mRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mRe, e, t)
      }
    },
    bCn = class bRe extends _ {
      constructor(e) {
        super(), (this.message = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TestBidiRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new bRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bRe, e, t)
      }
    },
    vCn = class vRe extends _ {
      constructor(e) {
        super(), (this.message = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TestBidiResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new vRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vRe, e, t)
      }
    },
    yCn = class yRe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.fileContent = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoContextFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "file_content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new yRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yRe, e, t)
      }
    },
    wCn = class wRe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.candidateFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "candidate_files",
            kind: "message",
            T: yCn,
            repeated: !0,
          },
          { no: 3, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new wRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wRe, e, t)
      }
    },
    CCn = class CRe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.rerankingScore = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoContextRankedFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "reranking_score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new CRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CRe, e, t)
      }
    },
    SCn = class SRe extends _ {
      constructor(e) {
        super(), (this.rankedFiles = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ranked_files", kind: "message", T: CCn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SRe, e, t)
      }
    },
    xCn = class xRe extends _ {
      constructor(e) {
        super(),
          (this.diffCharLen = 0),
          (this.iterations = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckBugBotPriceRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff_char_len", kind: "scalar", T: 5 },
          { no: 2, name: "iterations", kind: "scalar", T: 5 },
          { no: 3, name: "model_details", kind: "message", T: zr },
          { no: 4, name: "session_id", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new xRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xRe, e, t)
      }
    },
    kCn = class kRe extends _ {
      constructor(e) {
        super(), (this.cost = 0), (this.priceId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckBugBotPriceResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cost", kind: "scalar", T: 1 },
          { no: 2, name: "price_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new kRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kRe, e, t)
      }
    },
    ECn = class ERe extends _ {
      constructor(e) {
        super(), (this.sessionId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckBugBotTelemetryHealthyRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "session_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ERe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ERe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ERe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ERe, e, t)
      }
    },
    ICn = class IRe extends _ {
      constructor(e) {
        super(), (this.isHealthy = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckBugBotTelemetryHealthyResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_healthy", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new IRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IRe, e, t)
      }
    },
    DCn = class DRe extends _ {
      constructor(e) {
        super(), (this.diffCharLen = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSuggestedBugBotIterationsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff_char_len", kind: "scalar", T: 5 },
          { no: 2, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new DRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DRe, e, t)
      }
    },
    TCn = class TRe extends _ {
      constructor(e) {
        super(), (this.iterations = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSuggestedBugBotIterationsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "iterations", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new TRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TRe, e, t)
      }
    },
    PCn = class PRe extends _ {
      constructor(e) {
        super(),
          (this.status = dG.UNSPECIFIED),
          (this.message = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugBotStatus"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(dG) },
          { no: 2, name: "message", kind: "scalar", T: 9 },
          { no: 3, name: "iterations_completed", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "total_iterations", kind: "scalar", T: 5, opt: !0 },
          { no: 5, name: "total_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 6, name: "processed_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 7, name: "processed_cost", kind: "scalar", T: 2, opt: !0 },
          { no: 8, name: "thinking_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 9, name: "thinking_cost", kind: "scalar", T: 2, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new PRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PRe, e, t)
      }
    },
    dG
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.IN_PROGRESS = 1)] = "IN_PROGRESS"),
      (i[(i.IN_PROGRESS_ITERATIONS = 2)] = "IN_PROGRESS_ITERATIONS"),
      (i[(i.DONE = 3)] = "DONE")
  })(dG || (dG = {})),
    v.util.setEnumType(dG, "aiserver.v1.BugBotStatus.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_IN_PROGRESS" },
      { no: 2, name: "STATUS_IN_PROGRESS_ITERATIONS" },
      { no: 3, name: "STATUS_DONE" },
    ])
  var LCn = class LRe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBugBotResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug_reports", kind: "message", T: wMi, opt: !0 },
          { no: 2, name: "status", kind: "message", T: PCn },
        ])
      }
      static fromBinary(e, t) {
        return new LRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LRe, e, t)
      }
    },
    NCn = class NRe extends _ {
      constructor(e) {
        super(),
          (this.chatConversationHistory = []),
          (this.cppDiffTrajectories = []),
          (this.candidateFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextRerankingRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho, opt: !0 },
          {
            no: 2,
            name: "chat_conversation_history",
            kind: "message",
            T: Ha,
            repeated: !0,
          },
          {
            no: 3,
            name: "cpp_diff_trajectories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 4,
            name: "candidate_files",
            kind: "message",
            T: Dvn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new NRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NRe, e, t)
      }
    },
    RCn = class RRe extends _ {
      constructor(e) {
        super(), (this.rerankingScores = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextRerankingResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "reranking_scores", kind: "scalar", T: 2, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new RRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RRe, e, t)
      }
    },
    ACn = class ARe extends _ {
      constructor(e) {
        super(), (this.messages = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NameTabRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "messages", kind: "message", T: Ha, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ARe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ARe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ARe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ARe, e, t)
      }
    },
    MCn = class MRe extends _ {
      constructor(e) {
        super(), (this.name = ""), (this.reason = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.NameTabResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "reason", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new MRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MRe, e, t)
      }
    },
    $Cn = class $Re extends _ {
      constructor(e) {
        super(), (this.modelName = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TestModelStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new $Re().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Re().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Re().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Re, e, t)
      }
    },
    FCn = class FRe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.latency = 0),
          (this.ttft = 0),
          (this.maxTimeBetweenChunks = 0),
          (this.serverTiming = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TestModelStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "latency", kind: "scalar", T: 2 },
          { no: 3, name: "ttft", kind: "scalar", T: 2 },
          { no: 4, name: "max_time_between_chunks", kind: "scalar", T: 2 },
          { no: 5, name: "server_timing", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new FRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FRe, e, t)
      }
    },
    OCn = class ORe extends _ {
      constructor(e) {
        super(),
          (this.workspaceRelativePath = ""),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TryParseTypeScriptTreeSitterRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new ORe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ORe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ORe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ORe, e, t)
      }
    },
    BCn = class BRe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TryParseTypeScriptTreeSitterResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new BRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BRe, e, t)
      }
    },
    _Cn = class _Re extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DevOnlyGetPastRequestIdsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "count", kind: "scalar", T: 5, opt: !0 },
          { no: 2, name: "page", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _Re().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Re().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Re().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Re, e, t)
      }
    },
    UCn = class URe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.dateTime = ""),
          (this.modelName = ""),
          (this.featureName = ""),
          (this.s3Uri = ""),
          (this.status = ""),
          (this.numPromptTokens = 0),
          (this.numCompletionTokens = 0),
          (this.apiCallMethod = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DevOnlyPastRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "date_time", kind: "scalar", T: 9 },
          { no: 3, name: "model_name", kind: "scalar", T: 9 },
          { no: 4, name: "feature_name", kind: "scalar", T: 9 },
          { no: 5, name: "s3_uri", kind: "scalar", T: 9 },
          { no: 6, name: "status", kind: "scalar", T: 9 },
          { no: 7, name: "num_prompt_tokens", kind: "scalar", T: 5 },
          { no: 8, name: "num_completion_tokens", kind: "scalar", T: 5 },
          { no: 9, name: "api_call_method", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new URe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new URe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new URe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(URe, e, t)
      }
    },
    HCn = class HRe extends _ {
      constructor(e) {
        super(),
          (this.pastRequests = []),
          (this.totalCount = 0),
          (this.hasMore = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DevOnlyGetPastRequestIdsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "past_requests", kind: "message", T: UCn, repeated: !0 },
          { no: 10, name: "total_count", kind: "scalar", T: 5 },
          { no: 11, name: "has_more", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new HRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HRe, e, t)
      }
    },
    v$i = class VRe extends _ {
      constructor(e) {
        super(), (this.contextToRank = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRankedContextFromContextBankRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "composer_request", kind: "message", T: jB },
          {
            no: 2,
            name: "context_to_rank",
            kind: "message",
            T: mVe,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new VRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VRe, e, t)
      }
    },
    VCn = class WRe extends _ {
      constructor(e) {
        super(), (this.rankedContext = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetRankedContextFromContextBankResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "ranked_context",
            kind: "message",
            T: m1t,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new WRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WRe, e, t)
      }
    },
    WCn = class qRe extends _ {
      constructor(e) {
        super(), (this.questions = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCodebaseQuestionsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "questions", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new qRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qRe, e, t)
      }
    },
    qCn = class jRe extends _ {
      constructor(e) {
        super(),
          (this.index = 0),
          (this.text = ""),
          (this.type = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AtSymbolOption"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "index", kind: "scalar", T: 5 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "type", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new jRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jRe, e, t)
      }
    },
    V1t = class zRe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.fromFile = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AtSymbolDependencyInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "from_file", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new zRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zRe, e, t)
      }
    },
    y$i = class GRe extends _ {
      constructor(e) {
        super(),
          (this.atSymbolDependencies = []),
          (this.atSymbolOptions = []),
          (this.userQuery = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetAtSymbolSuggestionsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file_info", kind: "message", T: Ho },
          {
            no: 2,
            name: "at_symbol_dependencies",
            kind: "message",
            T: V1t,
            repeated: !0,
          },
          {
            no: 3,
            name: "at_symbol_options",
            kind: "message",
            T: qCn,
            repeated: !0,
          },
          { no: 4, name: "user_query", kind: "scalar", T: 9 },
          { no: 5, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new GRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GRe, e, t)
      }
    },
    jCn = class JRe extends _ {
      constructor(e) {
        super(),
          (this.indices = []),
          (this.explanation = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetAtSymbolSuggestionsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "indices", kind: "scalar", T: 5, repeated: !0 },
          { no: 2, name: "explanation", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new JRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JRe, e, t)
      }
    },
    zCn = class KRe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.isFolder = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CurrentFolderFileOrFolder"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "is_folder", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new KRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KRe, e, t)
      }
    },
    GCn = class YRe extends _ {
      constructor(e) {
        super(),
          (this.currentCommand = ""),
          (this.commandHistory = []),
          (this.fileDiffHistories = []),
          (this.commitHistory = []),
          (this.pastResults = []),
          (this.userPlatform = ""),
          (this.currentFolder = ""),
          (this.currentFolderStructure = []),
          (this.relevantFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetTerminalCompletionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_command", kind: "scalar", T: 9 },
          { no: 2, name: "command_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
          {
            no: 4,
            name: "file_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          { no: 5, name: "git_diff", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "commit_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 7, name: "past_results", kind: "scalar", T: 9, repeated: !0 },
          { no: 8, name: "model_details", kind: "message", T: zr },
          { no: 9, name: "user_platform", kind: "scalar", T: 9 },
          { no: 10, name: "current_folder", kind: "scalar", T: 9 },
          {
            no: 11,
            name: "current_folder_structure",
            kind: "message",
            T: zCn,
            repeated: !0,
          },
          {
            no: 12,
            name: "relevant_files",
            kind: "message",
            T: AC,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new YRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YRe, e, t)
      }
    },
    JCn = class XRe extends _ {
      constructor(e) {
        super(), (this.command = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetTerminalCompletionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new XRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XRe, e, t)
      }
    },
    w$i = class QRe extends _ {
      constructor(e) {
        super(),
          (this.type = qB.UNSPECIFIED),
          (this.startLine = 0),
          (this.endLine = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.HeuristicsSelection"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "type", kind: "enum", T: v.getEnumType(qB) },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new QRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QRe, e, t)
      }
    },
    qB
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.GROUP = 1)] = "GROUP"),
      (i[(i.LINE = 2)] = "LINE"),
      (i[(i.FOLDING = 3)] = "FOLDING")
  })(qB || (qB = {})),
    v.util.setEnumType(
      qB,
      "aiserver.v1.HeuristicsSelection.HeuristicsSelectionType",
      [
        { no: 0, name: "HEURISTICS_SELECTION_TYPE_UNSPECIFIED" },
        { no: 1, name: "HEURISTICS_SELECTION_TYPE_GROUP" },
        { no: 2, name: "HEURISTICS_SELECTION_TYPE_LINE" },
        { no: 3, name: "HEURISTICS_SELECTION_TYPE_FOLDING" },
      ],
    )
  var C$i = class ZRe extends _ {
      constructor(e) {
        super(), (this.heuristicsSelections = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CalculateAutoSelectionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file_info", kind: "message", T: Ho },
          { no: 2, name: "cursor_position", kind: "message", T: Qm },
          { no: 3, name: "selection_range", kind: "message", T: Hu },
          { no: 4, name: "model_details", kind: "message", T: zr },
          {
            no: 5,
            name: "heuristics_selections",
            kind: "message",
            T: w$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new ZRe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZRe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZRe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZRe, e, t)
      }
    },
    KCn = class eAe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoSelectionInstructions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new eAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eAe, e, t)
      }
    },
    YCn = class tAe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.instructions = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AutoSelectionResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line", kind: "scalar", T: 5 },
          { no: 3, name: "instructions", kind: "message", T: KCn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new tAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tAe, e, t)
      }
    },
    XCn = class iAe extends _ {
      constructor(e) {
        super(), (this.results = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CalculateAutoSelectionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: YCn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new iAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iAe, e, t)
      }
    },
    S$i = class sAe extends _ {
      constructor(e) {
        super(), (this.instruction = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCursorMotionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file_info", kind: "message", T: Ho },
          { no: 2, name: "selection_range", kind: "message", T: Hu },
          { no: 3, name: "instruction", kind: "scalar", T: 9 },
          { no: 4, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new sAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sAe, e, t)
      }
    },
    QCn = class nAe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCursorMotionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nAe, e, t)
      }
    },
    HT = class rAe extends _ {
      constructor(e) {
        super(),
          (this.instruction = ""),
          (this.type = Jh.UNSPECIFIED),
          (this.proposedChangeHistory = []),
          (this.relatedCodeBlocks = []),
          (this.diffHistory = []),
          (this.linterErrors = []),
          (this.usefulTypes = []),
          (this.recentlyViewedFiles = []),
          (this.recentDiffs = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instruction", kind: "scalar", T: 9 },
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "selection_range", kind: "message", T: Hu },
          { no: 4, name: "type", kind: "enum", T: v.getEnumType(Jh) },
          {
            no: 5,
            name: "proposed_change_history",
            kind: "message",
            T: k$i,
            repeated: !0,
          },
          {
            no: 6,
            name: "related_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          { no: 7, name: "diff_history", kind: "message", T: $C, repeated: !0 },
          { no: 8, name: "linter_errors", kind: "message", T: x$i, repeated: !0 },
          { no: 9, name: "useful_types", kind: "message", T: tSn, repeated: !0 },
          {
            no: 10,
            name: "recently_viewed_files",
            kind: "message",
            T: E$i,
            repeated: !0,
          },
          { no: 11, name: "recent_diffs", kind: "message", T: D$i, repeated: !0 },
          { no: 12, name: "multiple_completions", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new rAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rAe, e, t)
      }
    },
    Jh
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.REFLECT = 1)] = "REFLECT"),
      (i[(i.LOOP_ON_LINTS = 2)] = "LOOP_ON_LINTS"),
      (i[(i.CHAT_AND_APPLY = 3)] = "CHAT_AND_APPLY"),
      (i[(i.COALESCE_GENERATIONS = 4)] = "COALESCE_GENERATIONS"),
      (i[(i.CODEBASE_CHUNKS = 5)] = "CODEBASE_CHUNKS"),
      (i[(i.SPEC_AND_APPLY = 6)] = "SPEC_AND_APPLY"),
      (i[(i.ASK_CODEBASE = 7)] = "ASK_CODEBASE"),
      (i[(i.FINETUNED_INSTRUCTIONS = 8)] = "FINETUNED_INSTRUCTIONS"),
      (i[(i.USEFUL_TYPES = 9)] = "USEFUL_TYPES"),
      (i[(i.CHAT_AND_APPLY_UNDERSPECIFIED = 10)] =
        "CHAT_AND_APPLY_UNDERSPECIFIED")
  })(Jh || (Jh = {})),
    v.util.setEnumType(Jh, "aiserver.v1.BackgroundCmdKRequest.Type", [
      { no: 0, name: "TYPE_UNSPECIFIED" },
      { no: 1, name: "TYPE_REFLECT" },
      { no: 2, name: "TYPE_LOOP_ON_LINTS" },
      { no: 3, name: "TYPE_CHAT_AND_APPLY" },
      { no: 4, name: "TYPE_COALESCE_GENERATIONS" },
      { no: 5, name: "TYPE_CODEBASE_CHUNKS" },
      { no: 6, name: "TYPE_SPEC_AND_APPLY" },
      { no: 7, name: "TYPE_ASK_CODEBASE" },
      { no: 8, name: "TYPE_FINETUNED_INSTRUCTIONS" },
      { no: 9, name: "TYPE_USEFUL_TYPES" },
      { no: 10, name: "TYPE_CHAT_AND_APPLY_UNDERSPECIFIED" },
    ])
  var x$i = class oAe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = ""),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          (this.quickFixes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.Lint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "severity", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 6,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
          { no: 9, name: "quick_fixes", kind: "message", T: ZCn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new oAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oAe, e, t)
      }
    },
    ZCn = class aAe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.kind = ""),
          (this.isPreferred = !1),
          (this.edits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "kind", kind: "scalar", T: 9 },
          { no: 3, name: "is_preferred", kind: "scalar", T: 8 },
          { no: 4, name: "edits", kind: "message", T: eSn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new aAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aAe, e, t)
      }
    },
    eSn = class lAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new lAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lAe, e, t)
      }
    },
    k$i = class cAe extends _ {
      constructor(e) {
        super(),
          (this.change = ""),
          (this.linterErrors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.ProposedChange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "change", kind: "scalar", T: 9 },
          { no: 2, name: "linter_errors", kind: "message", T: x$i, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new cAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cAe, e, t)
      }
    },
    tSn = class hAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLine = 0),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.UsefulType"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "text", kind: "scalar", T: 9 },
          { no: 4, name: "score", kind: "scalar", T: 1, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new hAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hAe, e, t)
      }
    },
    E$i = class uAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.visibleRanges = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          {
            no: 3,
            name: "visible_ranges",
            kind: "message",
            T: I$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new uAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uAe, e, t)
      }
    },
    I$i = class dAe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumberInclusive = 0),
          (this.endLineNumberExclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile.VisibleRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number_inclusive", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 },
          { no: 3, name: "viewed_at", kind: "scalar", T: 5, opt: !0 },
          {
            no: 4,
            name: "global_order_descending",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new dAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dAe, e, t)
      }
    },
    D$i = class fAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.diff = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKRequest.Diff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "diff", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new fAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fAe, e, t)
      }
    },
    iSn = class gAe extends _ {
      constructor(e) {
        super(), (this.proposedChange = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "proposed_change", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gAe, e, t)
      }
    },
    sSn = class pAe extends _ {
      constructor(e) {
        super(),
          (this.instruction = ""),
          (this.groundTruth = ""),
          (this.experiment = _oe.UNSPECIFIED),
          (this.runAutomatedEval = !1),
          (this.proposedChangeHistory = []),
          (this.commitNotes = []),
          (this.relatedCodeBlocks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instruction", kind: "scalar", T: 9 },
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "selection_range", kind: "message", T: Hu },
          { no: 4, name: "ground_truth", kind: "scalar", T: 9 },
          { no: 5, name: "experiment", kind: "enum", T: v.getEnumType(_oe) },
          { no: 6, name: "run_automated_eval", kind: "scalar", T: 8 },
          {
            no: 7,
            name: "proposed_change_history",
            kind: "message",
            T: aSn,
            repeated: !0,
          },
          { no: 8, name: "commit_notes", kind: "message", T: BSt, repeated: !0 },
          {
            no: 9,
            name: "related_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new pAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pAe, e, t)
      }
    },
    _oe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.REFLECT = 1)] = "REFLECT"),
      (i[(i.CMD_K_ORIGINAL_RADIUS = 2)] = "CMD_K_ORIGINAL_RADIUS"),
      (i[(i.LOOP_ON_LINTS = 3)] = "LOOP_ON_LINTS"),
      (i[(i.CHAT_AND_APPLY = 4)] = "CHAT_AND_APPLY"),
      (i[(i.COMMIT_NOTES = 5)] = "COMMIT_NOTES"),
      (i[(i.COALESCE_GENERATIONS = 6)] = "COALESCE_GENERATIONS"),
      (i[(i.REWORD_INSTRUCTIONS = 7)] = "REWORD_INSTRUCTIONS"),
      (i[(i.CODEBASE_CHUNKS = 8)] = "CODEBASE_CHUNKS"),
      (i[(i.SPEC_AND_APPLY = 9)] = "SPEC_AND_APPLY"),
      (i[(i.ASK_CODEBASE = 10)] = "ASK_CODEBASE")
  })(_oe || (_oe = {})),
    v.util.setEnumType(_oe, "aiserver.v1.BackgroundCmdKEvalRequest.Experiment", [
      { no: 0, name: "EXPERIMENT_UNSPECIFIED" },
      { no: 1, name: "EXPERIMENT_REFLECT" },
      { no: 2, name: "EXPERIMENT_CMD_K_ORIGINAL_RADIUS" },
      { no: 3, name: "EXPERIMENT_LOOP_ON_LINTS" },
      { no: 4, name: "EXPERIMENT_CHAT_AND_APPLY" },
      { no: 5, name: "EXPERIMENT_COMMIT_NOTES" },
      { no: 6, name: "EXPERIMENT_COALESCE_GENERATIONS" },
      { no: 7, name: "EXPERIMENT_REWORD_INSTRUCTIONS" },
      { no: 8, name: "EXPERIMENT_CODEBASE_CHUNKS" },
      { no: 9, name: "EXPERIMENT_SPEC_AND_APPLY" },
      { no: 10, name: "EXPERIMENT_ASK_CODEBASE" },
    ])
  var nSn = class mAe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.severity = ""),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          (this.quickFixes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest.Lint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "severity", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 6,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
          { no: 9, name: "quick_fixes", kind: "message", T: rSn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new mAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mAe, e, t)
      }
    },
    rSn = class bAe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.kind = ""),
          (this.isPreferred = !1),
          (this.edits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest.Lint.QuickFix"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "kind", kind: "scalar", T: 9 },
          { no: 3, name: "is_preferred", kind: "scalar", T: 8 },
          { no: 4, name: "edits", kind: "message", T: oSn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new bAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bAe, e, t)
      }
    },
    oSn = class vAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          (this.startLineNumberOneIndexed = 0),
          (this.startColumnOneIndexed = 0),
          (this.endLineNumberInclusiveOneIndexed = 0),
          (this.endColumnOneIndexed = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest.Lint.QuickFix.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "start_line_number_one_indexed", kind: "scalar", T: 5 },
          { no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
          {
            no: 5,
            name: "end_line_number_inclusive_one_indexed",
            kind: "scalar",
            T: 5,
          },
          { no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new vAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vAe, e, t)
      }
    },
    aSn = class yAe extends _ {
      constructor(e) {
        super(),
          (this.change = ""),
          (this.linterErrors = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "change", kind: "scalar", T: 9 },
          { no: 2, name: "linter_errors", kind: "message", T: nSn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new yAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yAe, e, t)
      }
    },
    lSn = class wAe extends _ {
      constructor(e) {
        super(), (this.proposedChange = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BackgroundCmdKEvalResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "proposed_change", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new wAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wAe, e, t)
      }
    },
    cSn = class CAe extends _ {
      constructor(e) {
        super(), (this.requestId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetThoughtAnnotationRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new CAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CAe, e, t)
      }
    },
    hSn = class SAe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetThoughtAnnotationResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "thought_annotation", kind: "message", T: uSn },
        ])
      }
      static fromBinary(e, t) {
        return new SAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SAe, e, t)
      }
    },
    uSn = class xAe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.authId = ""),
          (this.thought = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiThoughtAnnotation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "auth_id", kind: "scalar", T: 9 },
          { no: 3, name: "debug_info", kind: "message", T: hI },
          { no: 4, name: "thought", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new xAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xAe, e, t)
      }
    },
    dSn = class kAe extends _ {
      constructor(e) {
        super(), (this.texts = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BulkEmbedRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "texts", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new kAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kAe, e, t)
      }
    },
    fSn = class EAe extends _ {
      constructor(e) {
        super(), (this.embeddings = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BulkEmbedResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "embeddings", kind: "message", T: gSn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new EAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EAe, e, t)
      }
    },
    gSn = class IAe extends _ {
      constructor(e) {
        super(), (this.embedding = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.EmbeddingResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "embedding", kind: "scalar", T: 1, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new IAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IAe, e, t)
      }
    },
    pSn = class DAe extends _ {
      constructor(e) {
        super(), (this.commitHash = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TakeNotesOnCommitDiffRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diff", kind: "message", T: Vgn },
          { no: 2, name: "commit_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new DAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DAe, e, t)
      }
    },
    mSn = class TAe extends _ {
      constructor(e) {
        super(), (this.notes = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TakeNotesOnCommitDiffResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "notes", kind: "message", T: Hgn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new TAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TAe, e, t)
      }
    },
    bSn = class PAe extends _ {
      constructor(e) {
        super(),
          (this.sessionId = ""),
          (this.commits = []),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContinueChatRequestWithCommitsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "session_id", kind: "scalar", T: 9 },
          { no: 2, name: "commits", kind: "message", T: T$i, repeated: !0 },
          { no: 3, name: "request_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new PAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PAe, e, t)
      }
    },
    T$i = class LAe extends _ {
      constructor(e) {
        super(),
          (this.commitHash = ""),
          (this.diff = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SimpleCommitWithDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "commit_hash", kind: "scalar", T: 9 },
          { no: 2, name: "diff", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new LAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LAe, e, t)
      }
    },
    vSn = class NAe extends _ {
      constructor(e) {
        super(), (this.aiResponse = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchFileSelectionsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ai_response", kind: "scalar", T: 9 },
          { no: 2, name: "override_model", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "override_token_limit", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NAe, e, t)
      }
    },
    ySn = class RAe extends _ {
      constructor(e) {
        super(), (this.fileInstructions = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchFileSelectionsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "file_instructions",
            kind: "message",
            T: wSn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new RAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RAe, e, t)
      }
    },
    wSn = class AAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.instruction = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamBranchFileSelectionsResponse.FileInstruction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "instruction", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new AAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AAe, e, t)
      }
    },
    CSn = class MAe extends _ {
      constructor(e) {
        super(),
          (this.branchName = ""),
          (this.branchNotes = ""),
          (this.globalNotes = ""),
          (this.pastThoughts = []),
          (this.potentiallyRelevantCommits = []),
          (this.files = []),
          (this.contextGraphFiles = []),
          (this.crucialFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "branch_name", kind: "scalar", T: 9 },
          { no: 2, name: "branch_notes", kind: "scalar", T: 9 },
          { no: 3, name: "global_notes", kind: "scalar", T: 9 },
          { no: 4, name: "past_thoughts", kind: "message", T: kSn, repeated: !0 },
          { no: 5, name: "diff_to_base_branch", kind: "message", T: SSn },
          {
            no: 6,
            name: "potentially_relevant_commits",
            kind: "message",
            T: XN,
            repeated: !0,
          },
          { no: 7, name: "files", kind: "message", T: P$i, repeated: !0 },
          {
            no: 8,
            name: "context_graph_files",
            kind: "message",
            T: ESn,
            repeated: !0,
          },
          {
            no: 12,
            name: "crucial_files",
            kind: "message",
            T: P$i,
            repeated: !0,
          },
          { no: 9, name: "override_model", kind: "scalar", T: 9, opt: !0 },
          { no: 10, name: "override_token_limit", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new MAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MAe, e, t)
      }
    },
    SSn = class $Ae extends _ {
      constructor(e) {
        super(),
          (this.fileDiffs = []),
          (this.commits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiRequest.BranchDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_diffs", kind: "message", T: xSn, repeated: !0 },
          { no: 2, name: "commits", kind: "message", T: XN, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new $Ae().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Ae().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Ae().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Ae, e, t)
      }
    },
    xSn = class FAe extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.diff = ""),
          (this.tooBig = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamBranchGeminiRequest.BranchDiff.FileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "diff", kind: "scalar", T: 9 },
          { no: 3, name: "too_big", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new FAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FAe, e, t)
      }
    },
    kSn = class OAe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.timeInUnixSeconds = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiRequest.PastThought"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "time_in_unix_seconds", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new OAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OAe, e, t)
      }
    },
    P$i = class BAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiRequest.File"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new BAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BAe, e, t)
      }
    },
    ESn = class _Ae extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.text = ""),
          (this.priority = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiRequest.FileWithPriority"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "text", kind: "scalar", T: 9 },
          { no: 3, name: "priority", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new _Ae().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Ae().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Ae().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Ae, e, t)
      }
    },
    ISn = class UAe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBranchGeminiResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "cached_prompt", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new UAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UAe, e, t)
      }
    },
    DSn = class HAe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsCursorPredictionEnabledRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new HAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HAe, e, t)
      }
    },
    TSn = class VAe extends _ {
      constructor(e) {
        super(), (this.enabled = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsCursorPredictionEnabledResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "enabled", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new VAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VAe, e, t)
      }
    },
    PSn = class WAe extends _ {
      constructor(e) {
        super(),
          (this.diffHistory = []),
          (this.contextItems = []),
          (this.diffHistoryKeys = []),
          (this.fileDiffHistories = []),
          (this.mergedDiffHistories = []),
          (this.blockDiffPatches = []),
          (this.parameterHints = []),
          (this.lspContexts = []),
          (this.fileSyncUpdates = []),
          (this.fileVisibleRanges = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamNextCursorPredictionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "linter_errors", kind: "message", T: Cf, opt: !0 },
          {
            no: 13,
            name: "context_items",
            kind: "message",
            T: N1t,
            repeated: !0,
          },
          {
            no: 5,
            name: "diff_history_keys",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 6, name: "give_debug_output", kind: "scalar", T: 8, opt: !0 },
          {
            no: 7,
            name: "file_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 8,
            name: "merged_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          {
            no: 9,
            name: "block_diff_patches",
            kind: "message",
            T: $1t,
            repeated: !0,
          },
          { no: 10, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
          { no: 11, name: "is_debug", kind: "scalar", T: 8, opt: !0 },
          { no: 12, name: "immediately_ack", kind: "scalar", T: 8, opt: !0 },
          { no: 17, name: "enable_more_context", kind: "scalar", T: 8, opt: !0 },
          {
            no: 14,
            name: "parameter_hints",
            kind: "message",
            T: WMi,
            repeated: !0,
          },
          { no: 15, name: "lsp_contexts", kind: "message", T: I1t, repeated: !0 },
          { no: 16, name: "cpp_intent_info", kind: "message", T: UMi, opt: !0 },
          { no: 18, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 19,
            name: "file_sync_updates",
            kind: "message",
            T: cG,
            repeated: !0,
          },
          {
            no: 20,
            name: "file_visible_ranges",
            kind: "message",
            T: N$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new WAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WAe, e, t)
      }
    },
    L$i = class qAe extends _ {
      constructor(e) {
        super(),
          (this.startLineNumberInclusive = 0),
          (this.endLineNumberExclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line_number_inclusive", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new qAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qAe, e, t)
      }
    },
    N$i = class jAe extends _ {
      constructor(e) {
        super(),
          (this.filename = ""),
          (this.visibleRanges = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "filename", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "visible_ranges",
            kind: "message",
            T: L$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new jAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jAe, e, t)
      }
    },
    LSn = class zAe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamNextCursorPredictionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9, oneof: "response" },
          { no: 2, name: "line_number", kind: "scalar", T: 5, oneof: "response" },
          {
            no: 3,
            name: "is_not_in_range",
            kind: "scalar",
            T: 8,
            oneof: "response",
          },
          { no: 4, name: "file_name", kind: "scalar", T: 9, oneof: "response" },
        ])
      }
      static fromBinary(e, t) {
        return new zAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zAe, e, t)
      }
    },
    NSn = class GAe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.fileContents = ""),
          (this.prompt = ""),
          (this.images = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamWebCmdKV1Request"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "file_contents", kind: "scalar", T: 9 },
          { no: 3, name: "prompt", kind: "scalar", T: 9 },
          { no: 4, name: "selection_range", kind: "message", T: Kf },
          { no: 5, name: "model_details", kind: "message", T: zr },
          { no: 10, name: "images", kind: "message", T: OT, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new GAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GAe, e, t)
      }
    },
    RSn = class JAe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamWebCmdKV1Response"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cmd_k_response", kind: "message", T: s7 },
        ])
      }
      static fromBinary(e, t) {
        return new JAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JAe, e, t)
      }
    },
    ASn = class KAe extends _ {
      constructor(e) {
        super(),
          (this.sourceRange = ""),
          (this.methodSignatures = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextScoresRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "source_range", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "method_signatures",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new KAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KAe, e, t)
      }
    },
    MSn = class YAe extends _ {
      constructor(e) {
        super(), (this.scores = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextScoresResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "scores", kind: "scalar", T: 2, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YAe, e, t)
      }
    },
    $Sn = class XAe extends _ {
      constructor(e) {
        super(),
          (this.feedbackType = r0.UNSPECIFIED),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportGenerationFeedbackRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feedback_type", kind: "enum", T: v.getEnumType(r0) },
          { no: 2, name: "request_id", kind: "scalar", T: 9 },
          { no: 3, name: "comment", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new XAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XAe, e, t)
      }
    },
    r0
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.THUMBS_UP = 1)] = "THUMBS_UP"),
      (i[(i.THUMBS_DOWN = 2)] = "THUMBS_DOWN"),
      (i[(i.NEUTRAL = 3)] = "NEUTRAL")
  })(r0 || (r0 = {})),
    v.util.setEnumType(
      r0,
      "aiserver.v1.ReportGenerationFeedbackRequest.FeedbackType",
      [
        { no: 0, name: "FEEDBACK_TYPE_UNSPECIFIED" },
        { no: 1, name: "FEEDBACK_TYPE_THUMBS_UP" },
        { no: 2, name: "FEEDBACK_TYPE_THUMBS_DOWN" },
        { no: 3, name: "FEEDBACK_TYPE_NEUTRAL" },
      ],
    )
  var FSn = class QAe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportGenerationFeedbackResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new QAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QAe, e, t)
      }
    },
    OSn = class ZAe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShowWelcomeScreenRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ZAe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZAe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZAe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZAe, e, t)
      }
    },
    BSn = class eMe extends _ {
      constructor(e) {
        super(), (this.enableCards = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ShowWelcomeScreenResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "enable_cards", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new eMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eMe, e, t)
      }
    },
    R$i = class tMe extends _ {
      constructor(e) {
        super(), (this.description = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiProjectRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "description", kind: "scalar", T: 9 },
          { no: 2, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new tMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tMe, e, t)
      }
    },
    _Sn = class iMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AiProjectResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new iMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iMe, e, t)
      }
    },
    USn = class sMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToCamelCaseRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new sMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sMe, e, t)
      }
    },
    HSn = class nMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ToCamelCaseResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nMe, e, t)
      }
    },
    A$i = class rMe extends _ {
      constructor(e) {
        super(),
          (this.promptProps = ""),
          (this.promptPropsTypeName = ""),
          (this.skipLoginCheck = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPriomptPromptRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "prompt_props", kind: "scalar", T: 9 },
          { no: 3, name: "prompt_props_type_name", kind: "scalar", T: 9 },
          { no: 5, name: "skip_login_check", kind: "scalar", T: 8 },
          { no: 4, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new rMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rMe, e, t)
      }
    },
    VSn = class oMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPriomptPromptResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oMe, e, t)
      }
    },
    WSn = class aMe extends _ {
      constructor(e) {
        super(), (this.featureName = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckFeatureStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feature_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new aMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aMe, e, t)
      }
    },
    M$i = class lMe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEffectiveTokenLimitRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new lMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lMe, e, t)
      }
    },
    qSn = class cMe extends _ {
      constructor(e) {
        super(), (this.tokenLimit = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEffectiveTokenLimitResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "token_limit", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new cMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cMe, e, t)
      }
    },
    jSn = class hMe extends _ {
      constructor(e) {
        super(), (this.enabled = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckFeatureStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "enabled", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new hMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hMe, e, t)
      }
    },
    zSn = class uMe extends _ {
      constructor(e) {
        super(), (this.key = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckNumberConfigRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "key", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new uMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uMe, e, t)
      }
    },
    GSn = class dMe extends _ {
      constructor(e) {
        super(), (this.value = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckNumberConfigResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "value", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new dMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dMe, e, t)
      }
    },
    JSn = class fMe extends _ {
      constructor(e) {
        super(), (this.messages = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IntentPredictionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "messages", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "context_options", kind: "message", T: ZSn },
          { no: 3, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new fMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fMe, e, t)
      }
    },
    KSn = class gMe extends _ {
      constructor(e) {
        super(),
          (this.useGlobalContext = !1),
          (this.useWithFolderContext = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IntentPredictionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chosen_documentation", kind: "message", T: YSn },
          { no: 2, name: "chosen_file_contents", kind: "message", T: XSn },
          { no: 3, name: "chosen_linter_diagnostics", kind: "message", T: QSn },
          { no: 4, name: "use_global_context", kind: "scalar", T: 8 },
          { no: 5, name: "use_with_folder_context", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new gMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gMe, e, t)
      }
    },
    YSn = class pMe extends _ {
      constructor(e) {
        super(),
          (this.docIndices = []),
          (this.docIdentifiers = []),
          (this.docNames = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IntentPredictionResponse.ChosenDocumentation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_indices", kind: "scalar", T: 5, repeated: !0 },
          { no: 2, name: "doc_identifiers", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "doc_names", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new pMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pMe, e, t)
      }
    },
    XSn = class mMe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IntentPredictionResponse.ChosenFileContents"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new mMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mMe, e, t)
      }
    },
    QSn = class bMe extends _ {
      constructor(e) {
        super(), (this.diagnosticIndices = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "diagnostic_indices",
            kind: "scalar",
            T: 5,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new bMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bMe, e, t)
      }
    },
    ZSn = class vMe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "all_documentation", kind: "message", T: e1n },
          { no: 2, name: "current_file_contents", kind: "message", T: i1n },
          { no: 3, name: "linter_diagnostics", kind: "message", T: s1n },
          { no: 4, name: "global_context", kind: "message", T: n1n },
        ])
      }
      static fromBinary(e, t) {
        return new vMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vMe, e, t)
      }
    },
    e1n = class yMe extends _ {
      constructor(e) {
        super(), (this.availableDocs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions.AllDocumentation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "available_docs",
            kind: "message",
            T: t1n,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new yMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yMe, e, t)
      }
    },
    t1n = class wMe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.url = ""),
          (this.identifier = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.ContextOptions.AllDocumentation.Documentation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "url", kind: "scalar", T: 9 },
          { no: 3, name: "identifier", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new wMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wMe, e, t)
      }
    },
    i1n = class CMe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.dataframes = []),
          (this.languageId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions.CurrentFileContents"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "cursor_position", kind: "message", T: Qm },
          { no: 4, name: "dataframes", kind: "message", T: $St, repeated: !0 },
          { no: 5, name: "language_id", kind: "scalar", T: 9 },
          { no: 6, name: "selection", kind: "message", T: RC },
        ])
      }
      static fromBinary(e, t) {
        return new CMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CMe, e, t)
      }
    },
    s1n = class SMe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.diagnostics = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions.LinterDiagnostics"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
          { no: 3, name: "diagnostics", kind: "message", T: TVe, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SMe, e, t)
      }
    },
    TVe = class xMe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.source = ""),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "source", kind: "scalar", T: 9 },
          { no: 3, name: "range", kind: "message", T: RC },
          { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new xMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xMe, e, t)
      }
    },
    n1n = class kMe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextOptions.GlobalContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new kMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kMe, e, t)
      }
    },
    $$i = class EMe extends _ {
      constructor(e) {
        super(), (this.conversation = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCursorTutorRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new EMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EMe, e, t)
      }
    },
    r1n = class IMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamCursorTutorResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new IMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IMe, e, t)
      }
    },
    PVe = class DMe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.codeBlocks = []),
          (this.queryType = M$.UNSPECIFIED),
          (this.fasterAndStupider = !1),
          (this.useGlobs = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelQueryRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 7, name: "model_details", kind: "message", T: zr },
          { no: 8, name: "query_type", kind: "enum", T: v.getEnumType(M$) },
          { no: 9, name: "repository_info", kind: "message", T: rl },
          { no: 10, name: "faster_and_stupider", kind: "scalar", T: 8 },
          { no: 11, name: "use_globs", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new DMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DMe, e, t)
      }
    },
    M$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.KEYWORDS = 1)] = "KEYWORDS"),
      (i[(i.EMBEDDINGS = 2)] = "EMBEDDINGS")
  })(M$ || (M$ = {})),
    v.util.setEnumType(M$, "aiserver.v1.ModelQueryRequest.QueryType", [
      { no: 0, name: "QUERY_TYPE_UNSPECIFIED" },
      { no: 1, name: "QUERY_TYPE_KEYWORDS" },
      { no: 2, name: "QUERY_TYPE_EMBEDDINGS" },
    ])
  var o1n = class TMe extends _ {
      constructor(e) {
        super(), (this.queries = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelQueryResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "queries", kind: "message", T: a1n, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new TMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TMe, e, t)
      }
    },
    a1n = class PMe extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.successfulParse = !1),
          (this.goodFileExtensions = []),
          (this.badFileExtensions = []),
          (this.goodPaths = []),
          (this.badPaths = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelQueryResponse.Query"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "successful_parse", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "good_file_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 4,
            name: "bad_file_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 5, name: "good_paths", kind: "scalar", T: 9, repeated: !0 },
          { no: 6, name: "bad_paths", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new PMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PMe, e, t)
      }
    },
    l1n = class LMe extends _ {
      constructor(e) {
        super(),
          (this.queryOrReasoning = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelQueryResponseV2"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "query",
            kind: "message",
            T: c1n,
            oneof: "query_or_reasoning",
          },
          {
            no: 2,
            name: "reasoning",
            kind: "scalar",
            T: 9,
            oneof: "query_or_reasoning",
          },
        ])
      }
      static fromBinary(e, t) {
        return new LMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LMe, e, t)
      }
    },
    c1n = class NMe extends _ {
      constructor(e) {
        super(),
          (this.partialQuery = { case: void 0 }),
          (this.index = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ModelQueryResponseV2.QueryItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9, oneof: "partial_query" },
          { no: 2, name: "glob", kind: "scalar", T: 9, oneof: "partial_query" },
          { no: 3, name: "index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new NMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NMe, e, t)
      }
    },
    h1n = class RMe extends _ {
      constructor(e) {
        super(), (this.apiKey = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ApiDetails"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "api_key", kind: "scalar", T: 9 },
          { no: 2, name: "enable_ghost_mode", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new RMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RMe, e, t)
      }
    },
    LVe = class AMe extends _ {
      constructor(e) {
        super(), (this.results = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FullFileSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: WSt, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new AMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AMe, e, t)
      }
    },
    NVe = class MMe extends _ {
      constructor(e) {
        super(),
          (this.results = []),
          (this.allFiles = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CodeSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: im, repeated: !0 },
          { no: 2, name: "all_files", kind: "message", T: AC, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new MMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MMe, e, t)
      }
    },
    u1n = class $Me extends _ {
      constructor(e) {
        super(),
          (this.codeResults = []),
          (this.query = ""),
          (this.numBlocks = 0),
          (this.conversation = []),
          (this.contextResults = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankerRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_results", kind: "message", T: im, repeated: !0 },
          { no: 2, name: "query", kind: "scalar", T: 9 },
          { no: 3, name: "num_blocks", kind: "scalar", T: 5 },
          { no: 4, name: "current_file", kind: "message", T: Ho },
          { no: 5, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 6, name: "api_details", kind: "message", T: h1n },
          {
            no: 7,
            name: "file_search_results",
            kind: "message",
            T: LVe,
            oneof: "context_results",
          },
          {
            no: 8,
            name: "code_search_results",
            kind: "message",
            T: NVe,
            oneof: "context_results",
          },
        ])
      }
      static fromBinary(e, t) {
        return new $Me().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Me().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Me().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Me, e, t)
      }
    },
    d1n = class FMe extends _ {
      constructor(e) {
        super(), (this.results = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.RerankerResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new FMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FMe, e, t)
      }
    },
    f1n = class OMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GenerateTldrRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new OMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OMe, e, t)
      }
    },
    g1n = class BMe extends _ {
      constructor(e) {
        super(), (this.summary = ""), (this.all = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GenerateTldrResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "summary", kind: "scalar", T: 9 },
          { no: 2, name: "all", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new BMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BMe, e, t)
      }
    },
    F$i = class _Me extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 7, name: "model_details", kind: "message", T: zr },
          {
            no: 8,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 14, name: "linter_errors", kind: "message", T: Cf },
          { no: 15, name: "advanced_codebase_context", kind: "message", T: p1n },
          { no: 16, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
          { no: 17, name: "request_id", kind: "scalar", T: 9 },
          { no: 18, name: "desired_token_limit", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _Me().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Me().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Me().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Me, e, t)
      }
    },
    p1n = class UMe extends _ {
      constructor(e) {
        super(),
          (this.numResultsPerSearch = 0),
          (this.reranker = ro.UNSPECIFIED),
          (this.reasoningStep = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AdvancedCodebaseContextOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "num_results_per_search", kind: "scalar", T: 5 },
          { no: 2, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "reranker", kind: "enum", T: v.getEnumType(ro) },
          { no: 5, name: "index_id", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "reasoning_step", kind: "scalar", T: 8 },
          {
            no: 7,
            name: "rechunker",
            kind: "enum",
            T: v.getEnumType(I$),
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new UMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UMe, e, t)
      }
    },
    m1n = class HMe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "output", kind: "message", T: b1n, oneof: "response" },
          {
            no: 2,
            name: "gathering_step",
            kind: "message",
            T: y1n,
            oneof: "response",
          },
          {
            no: 3,
            name: "gathering_file",
            kind: "message",
            T: v1n,
            oneof: "response",
          },
          {
            no: 4,
            name: "reranking_step",
            kind: "message",
            T: w1n,
            oneof: "response",
          },
          {
            no: 5,
            name: "reranking_file",
            kind: "message",
            T: C1n,
            oneof: "response",
          },
          {
            no: 6,
            name: "reasoning_step",
            kind: "message",
            T: S1n,
            oneof: "response",
          },
          {
            no: 7,
            name: "reasoning_substep",
            kind: "message",
            T: x1n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new HMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HMe, e, t)
      }
    },
    b1n = class VMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.Output"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new VMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VMe, e, t)
      }
    },
    v1n = class WMe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.stepIndex = 0),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.GatheringFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: Hu },
          { no: 3, name: "step_index", kind: "scalar", T: 5 },
          { no: 4, name: "score", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new WMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WMe, e, t)
      }
    },
    y1n = class qMe extends _ {
      constructor(e) {
        super(),
          (this.title = ""),
          (this.index = 0),
          (this.query = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.GatheringStep"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "index", kind: "scalar", T: 5 },
          { no: 3, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new qMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qMe, e, t)
      }
    },
    w1n = class jMe extends _ {
      constructor(e) {
        super(), (this.title = ""), (this.index = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.RerankingStep"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new jMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jMe, e, t)
      }
    },
    C1n = class zMe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.reason = ""),
          (this.failed = !1),
          (this.score = 0),
          (this.stepIndex = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.RerankingFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "range", kind: "message", T: Hu },
          { no: 3, name: "reason", kind: "scalar", T: 9 },
          { no: 4, name: "failed", kind: "scalar", T: 8 },
          { no: 5, name: "score", kind: "scalar", T: 2 },
          { no: 6, name: "step_index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new zMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zMe, e, t)
      }
    },
    S1n = class GMe extends _ {
      constructor(e) {
        super(), (this.title = ""), (this.index = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponse.ReasoningStep"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
          { no: 2, name: "index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new GMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GMe, e, t)
      }
    },
    x1n = class JMe extends _ {
      constructor(e) {
        super(),
          (this.markdownExplanation = ""),
          (this.stepIndex = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.TaskStreamChatContextResponse.ReasoningSubstep"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "markdown_explanation", kind: "scalar", T: 9 },
          { no: 2, name: "step_index", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new JMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JMe, e, t)
      }
    },
    k1n = class KMe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamChatContextResponseWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: m1n,
            oneof: "response",
          },
          {
            no: 2,
            name: "background_task_uuid",
            kind: "scalar",
            T: 9,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new KMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KMe, e, t)
      }
    },
    RVe = class YMe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.query = ""),
          (this.rerankResults = !1),
          (this.contextResults = { case: void 0 }),
          (this.rerankResultsV2 = !1),
          (this.conversationId = ""),
          (this.canHandleFilenamesAfterLanguageIds = !1),
          (this.longContextMode = !1),
          (this.isEval = !1),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 7, name: "model_details", kind: "message", T: zr },
          {
            no: 8,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 9, name: "query", kind: "scalar", T: 9 },
          { no: 10, name: "code_context", kind: "message", T: E1n },
          { no: 11, name: "rerank_results", kind: "scalar", T: 8 },
          {
            no: 12,
            name: "file_search_results",
            kind: "message",
            T: LVe,
            oneof: "context_results",
          },
          {
            no: 13,
            name: "code_search_results",
            kind: "message",
            T: NVe,
            oneof: "context_results",
          },
          { no: 14, name: "linter_errors", kind: "message", T: Cf },
          { no: 15, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
          { no: 16, name: "rerank_results_v2", kind: "scalar", T: 8 },
          { no: 17, name: "conversation_id", kind: "scalar", T: 9 },
          {
            no: 18,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
          },
          { no: 19, name: "long_context_mode", kind: "scalar", T: 8 },
          { no: 20, name: "is_eval", kind: "scalar", T: 8 },
          { no: 21, name: "request_id", kind: "scalar", T: 9 },
          { no: 22, name: "desired_max_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 23, name: "runnable_code_blocks", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new YMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YMe, e, t)
      }
    },
    E1n = class XMe extends _ {
      constructor(e) {
        super(),
          (this.chunks = []),
          (this.scoredChunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextRequest.CodeContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunks", kind: "message", T: ed, repeated: !0 },
          { no: 2, name: "scored_chunks", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new XMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XMe, e, t)
      }
    },
    O$i = class QMe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "debugging_only_chat_prompt",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          {
            no: 3,
            name: "debugging_only_token_count",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 4, name: "document_citation", kind: "message", T: b1t },
          { no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "used_code", kind: "message", T: I1n },
          { no: 7, name: "code_link", kind: "message", T: D1n },
          { no: 8, name: "chunk_identity", kind: "message", T: T1n, opt: !0 },
          { no: 9, name: "docs_reference", kind: "message", T: bVe, opt: !0 },
          { no: 10, name: "symbol_link", kind: "message", T: yVe, opt: !0 },
          { no: 11, name: "file_link", kind: "message", T: y1t, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new QMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QMe, e, t)
      }
    },
    I1n = class ZMe extends _ {
      constructor(e) {
        super(), (this.codeResults = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextResponse.UsedCode"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "code_results", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new ZMe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZMe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZMe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZMe, e, t)
      }
    },
    D1n = class e$e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.endLineNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextResponse.CodeLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new e$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new e$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new e$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(e$e, e, t)
      }
    },
    T1n = class t$e extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.text = ""),
          (this.chunkType = hk.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatContextResponse.ChunkIdentity"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
          { no: 4, name: "text", kind: "scalar", T: 9 },
          { no: 5, name: "chunk_type", kind: "enum", T: v.getEnumType(hk) },
        ])
      }
      static fromBinary(e, t) {
        return new t$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new t$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new t$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(t$e, e, t)
      }
    },
    P1n = class i$e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.rerankResults = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatDeepContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "explicit_context", kind: "message", T: Sf },
          { no: 3, name: "model_details", kind: "message", T: zr },
          { no: 4, name: "context_results", kind: "message", T: omn },
          { no: 5, name: "rerank_results", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new i$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new i$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new i$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(i$e, e, t)
      }
    },
    L1n = class s$e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatDeepContextResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new s$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new s$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new s$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(s$e, e, t)
      }
    },
    N1n = class n$e extends _ {
      constructor(e) {
        super(), (this.docIdentifier = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DocumentationInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
          { no: 2, name: "metadata", kind: "message", T: CMi },
        ])
      }
      static fromBinary(e, t) {
        return new n$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new n$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new n$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(n$e, e, t)
      }
    },
    R1n = class r$e extends _ {
      constructor(e) {
        super(),
          (this.partialDoc = { case: void 0 }),
          (this.additionalDocIdentifiers = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableDocsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "partial_url",
            kind: "scalar",
            T: 9,
            oneof: "partial_doc",
          },
          {
            no: 2,
            name: "partial_doc_name",
            kind: "scalar",
            T: 9,
            oneof: "partial_doc",
          },
          { no: 3, name: "get_all", kind: "scalar", T: 8, oneof: "partial_doc" },
          {
            no: 4,
            name: "additional_doc_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new r$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new r$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new r$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(r$e, e, t)
      }
    },
    A1n = class o$e extends _ {
      constructor(e) {
        super(), (this.docs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableDocsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "docs", kind: "message", T: N1n, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new o$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new o$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new o$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(o$e, e, t)
      }
    },
    M1n = class a$e extends _ {
      constructor(e) {
        super(), (this.error = Er.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ThrowErrorCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "error", kind: "enum", T: v.getEnumType(Er) },
        ])
      }
      static fromBinary(e, t) {
        return new a$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new a$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new a$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(a$e, e, t)
      }
    },
    $1n = class l$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ThrowErrorCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new l$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new l$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new l$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(l$e, e, t)
      }
    },
    B$i = class c$e extends _ {
      constructor(e) {
        super(),
          (this.isNightly = !1),
          (this.includeLongContextModels = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableModelsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_nightly", kind: "scalar", T: 8 },
          { no: 2, name: "include_long_context_models", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new c$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new c$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new c$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(c$e, e, t)
      }
    },
    F1n = class h$e extends _ {
      constructor(e) {
        super(),
          (this.models = []),
          (this.modelNames = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableModelsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "models", kind: "message", T: O1n, repeated: !0 },
          { no: 1, name: "model_names", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new h$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new h$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new h$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(h$e, e, t)
      }
    },
    O1n = class u$e extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.defaultOn = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.AvailableModelsResponse.AvailableModel"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "default_on", kind: "scalar", T: 8 },
          { no: 3, name: "is_long_context_only", kind: "scalar", T: 8, opt: !0 },
          { no: 4, name: "is_chat_only", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new u$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new u$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new u$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(u$e, e, t)
      }
    },
    _$i = class d$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.HealthCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new d$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new d$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new d$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(d$e, e, t)
      }
    },
    B1n = class f$e extends _ {
      constructor(e) {
        super(), (this.status = Uoe.UNSPECIFIED), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.HealthCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "enum", T: v.getEnumType(Uoe) },
        ])
      }
      static fromBinary(e, t) {
        return new f$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new f$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new f$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(f$e, e, t)
      }
    },
    Uoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"), (i[(i.HEALTHY = 1)] = "HEALTHY")
  })(Uoe || (Uoe = {})),
    v.util.setEnumType(Uoe, "aiserver.v1.HealthCheckResponse.Status", [
      { no: 0, name: "STATUS_UNSPECIFIED" },
      { no: 1, name: "STATUS_HEALTHY" },
    ])
  var _1n = class g$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PrivacyCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new g$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new g$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new g$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(g$e, e, t)
      }
    },
    U1n = class p$e extends _ {
      constructor(e) {
        super(),
          (this.isOnPrivacyPod = !1),
          (this.isGhostModeOn = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PrivacyCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "is_on_privacy_pod", kind: "scalar", T: 8 },
          { no: 2, name: "is_ghost_mode_on", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new p$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new p$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new p$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(p$e, e, t)
      }
    },
    H1n = class m$e extends _ {
      constructor(e) {
        super(), (this.timeLeft = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TimeLeftHealthCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "time_left", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new m$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new m$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new m$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(m$e, e, t)
      }
    },
    V1n = class Ate extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.query = ""),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.promptCodeBlocks = []),
          (this.sessionId = ""),
          (this.fastMode = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamGenerateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "query", kind: "scalar", T: 9 },
          { no: 7, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 11, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 12,
            name: "prompt_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          { no: 14, name: "session_id", kind: "scalar", T: 9 },
          { no: 13, name: "cmd_k_debug_info", kind: "message", T: hI },
          { no: 15, name: "fast_mode", kind: "scalar", T: 8 },
          { no: 16, name: "original_request", kind: "message", T: Ate },
        ])
      }
      static fromBinary(e, t) {
        return new Ate().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Ate().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Ate().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Ate, e, t)
      }
    },
    W1n = class b$e extends _ {
      constructor(e) {
        super(),
          (this.chunk = ""),
          (this.fileContext = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunk", kind: "scalar", T: 9 },
          { no: 2, name: "file_context", kind: "scalar", T: 9 },
          { no: 3, name: "chunk_range", kind: "message", T: Kf },
          { no: 4, name: "diff_string", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new b$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new b$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new b$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(b$e, e, t)
      }
    },
    U$i = class v$e extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.type = $$.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewChatMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "type", kind: "enum", T: v.getEnumType($$) },
        ])
      }
      static fromBinary(e, t) {
        return new v$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new v$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new v$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(v$e, e, t)
      }
    },
    $$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.HUMAN = 1)] = "HUMAN"),
      (i[(i.AI = 2)] = "AI")
  })($$ || ($$ = {})),
    v.util.setEnumType(
      $$,
      "aiserver.v1.ReviewChatMessage.ReviewChatMessageType",
      [
        { no: 0, name: "REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED" },
        { no: 1, name: "REVIEW_CHAT_MESSAGE_TYPE_HUMAN" },
        { no: 2, name: "REVIEW_CHAT_MESSAGE_TYPE_AI" },
      ],
    )
  var q1n = class y$e extends _ {
      constructor(e) {
        super(),
          (this.chunk = ""),
          (this.fileContext = ""),
          (this.messages = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewChatRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunk", kind: "scalar", T: 9 },
          { no: 2, name: "file_context", kind: "scalar", T: 9 },
          { no: 3, name: "chunk_range", kind: "message", T: Kf },
          { no: 4, name: "messages", kind: "message", T: U$i, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new y$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new y$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new y$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(y$e, e, t)
      }
    },
    j1n = class w$e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewChatResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "should_resolve", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new w$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new w$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new w$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(w$e, e, t)
      }
    },
    z1n = class C$e extends _ {
      constructor(e) {
        super(), (this.id = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewBug"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "id", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "end_line", kind: "scalar", T: 5, opt: !0 },
          { no: 4, name: "description", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "severity", kind: "scalar", T: 5, opt: !0 },
          { no: 6, name: "tldr", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new C$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new C$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new C$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(C$e, e, t)
      }
    },
    G1n = class S$e extends _ {
      constructor(e) {
        super(), (this.text = ""), (this.bugs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReviewResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "prompt", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "tldr", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "is_bug", kind: "scalar", T: 8, opt: !0 },
          { no: 5, name: "bugs", kind: "message", T: z1n, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new S$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new S$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new S$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(S$e, e, t)
      }
    },
    J1n = class x$e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.isCmdI = !1),
          (this.files = []),
          (this.useFastApply = !1),
          (this.fastApplyModelType = F$.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SlashEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 7, name: "model_details", kind: "message", T: zr },
          { no: 8, name: "is_cmd_i", kind: "scalar", T: 8 },
          { no: 11, name: "summary", kind: "scalar", T: 9, opt: !0 },
          {
            no: 12,
            name: "summary_up_until_index",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          {
            no: 13,
            name: "should_use_turbo_debug_prompt",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 14, name: "edit_selection", kind: "message", T: Kf, opt: !0 },
          { no: 15, name: "files", kind: "message", T: Ho, repeated: !0 },
          {
            no: 16,
            name: "clicked_code_block_contents",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          {
            no: 17,
            name: "is_an_optimistic_request_for_caching_and_linting",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 18,
            name: "specific_instructions",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          { no: 19, name: "use_fast_apply", kind: "scalar", T: 8 },
          {
            no: 20,
            name: "fast_apply_model_type",
            kind: "enum",
            T: v.getEnumType(F$),
          },
          {
            no: 25,
            name: "use_chunk_speculation_for_long_files",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 26, name: "parent_request_id", kind: "scalar", T: 9, opt: !0 },
          { no: 27, name: "source", kind: "enum", T: v.getEnumType(nm), opt: !0 },
          { no: 28, name: "is_reapply", kind: "scalar", T: 8, opt: !0 },
          {
            no: 29,
            name: "willing_to_pay_extra_for_speed",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new x$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new x$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new x$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(x$e, e, t)
      }
    },
    F$
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.DEFAULT = 1)] = "DEFAULT"),
      (i[(i.DEEPSEEK = 2)] = "DEEPSEEK"),
      (i[(i.SONNET = 3)] = "SONNET"),
      (i[(i.OPUS_DIFF = 4)] = "OPUS_DIFF"),
      (i[(i.SMART_REWRITE = 5)] = "SMART_REWRITE"),
      (i[(i.GPT4 = 6)] = "GPT4"),
      (i[(i.GPT4_NOSPEC = 7)] = "GPT4_NOSPEC"),
      (i[(i.SMART_REWRITE_NOSPEC = 8)] = "SMART_REWRITE_NOSPEC"),
      (i[(i.OPUS = 9)] = "OPUS"),
      (i[(i.HAIKU = 10)] = "HAIKU"),
      (i[(i.GPT4O_NOSPEC = 11)] = "GPT4O_NOSPEC"),
      (i[(i.GPT4O_DIFF = 12)] = "GPT4O_DIFF"),
      (i[(i.CODESTRAL_REWRITE = 13)] = "CODESTRAL_REWRITE"),
      (i[(i.DEEPSEEK_33B = 14)] = "DEEPSEEK_33B"),
      (i[(i.SONNET_35_DIFF = 15)] = "SONNET_35_DIFF"),
      (i[(i.SONNET_35_REWRITE = 16)] = "SONNET_35_REWRITE"),
      (i[(i.PROMPTED_DEEPSEEK_V2 = 17)] = "PROMPTED_DEEPSEEK_V2"),
      (i[(i.CODESTRAL_REWRITE_OLD = 18)] = "CODESTRAL_REWRITE_OLD"),
      (i[(i.CODESTRAL_REWRITE_FP16 = 19)] = "CODESTRAL_REWRITE_FP16"),
      (i[(i.DEEPSEEK_33B_V2 = 20)] = "DEEPSEEK_33B_V2"),
      (i[(i.CODESTRAL_V4 = 21)] = "CODESTRAL_V4"),
      (i[(i.CODESTRAL_V5 = 22)] = "CODESTRAL_V5"),
      (i[(i.CODESTRAL_V6 = 23)] = "CODESTRAL_V6"),
      (i[(i.CODESTRAL_V7 = 24)] = "CODESTRAL_V7")
  })(F$ || (F$ = {})),
    v.util.setEnumType(F$, "aiserver.v1.SlashEditRequest.FastApplyModelType", [
      { no: 0, name: "FAST_APPLY_MODEL_TYPE_UNSPECIFIED" },
      { no: 1, name: "FAST_APPLY_MODEL_TYPE_DEFAULT" },
      { no: 2, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK" },
      { no: 3, name: "FAST_APPLY_MODEL_TYPE_SONNET" },
      { no: 4, name: "FAST_APPLY_MODEL_TYPE_OPUS_DIFF" },
      { no: 5, name: "FAST_APPLY_MODEL_TYPE_SMART_REWRITE" },
      { no: 6, name: "FAST_APPLY_MODEL_TYPE_GPT4" },
      { no: 7, name: "FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC" },
      { no: 8, name: "FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC" },
      { no: 9, name: "FAST_APPLY_MODEL_TYPE_OPUS" },
      { no: 10, name: "FAST_APPLY_MODEL_TYPE_HAIKU" },
      { no: 11, name: "FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC" },
      { no: 12, name: "FAST_APPLY_MODEL_TYPE_GPT4O_DIFF" },
      { no: 13, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE" },
      { no: 14, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B" },
      { no: 15, name: "FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF" },
      { no: 16, name: "FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE" },
      { no: 17, name: "FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2" },
      { no: 18, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD" },
      { no: 19, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16" },
      { no: 20, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2" },
      { no: 21, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V4" },
      { no: 22, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V5" },
      { no: 23, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V6" },
      { no: 24, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V7" },
    ])
  var AVe = class k$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SlashEditResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "cmd_k_response", kind: "message", T: s7 },
        ])
      }
      static fromBinary(e, t) {
        return new k$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new k$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new k$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(k$e, e, t)
      }
    },
    H$i = class E$e extends _ {
      constructor(e) {
        super(),
          (this.originalLines = []),
          (this.newLines = []),
          (this.relativeWorkspacePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SlashEditPreviousEdit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "original_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "range", kind: "message", T: Kf },
        ])
      }
      static fromBinary(e, t) {
        return new E$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new E$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new E$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(E$e, e, t)
      }
    },
    K1n = class I$e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.previousEdits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "model_details", kind: "message", T: zr },
          {
            no: 3,
            name: "previous_edits",
            kind: "message",
            T: H$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new I$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new I$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new I$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(I$e, e, t)
      }
    },
    Y1n = class D$e extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chat", kind: "message", T: X1n, oneof: "response" },
          {
            no: 2,
            name: "edits_to_update",
            kind: "message",
            T: Q1n,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new D$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new D$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new D$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(D$e, e, t)
      }
    },
    X1n = class T$e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.Chat"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new T$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new T$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new T$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(T$e, e, t)
      }
    },
    Q1n = class P$e extends _ {
      constructor(e) {
        super(), (this.previousEdits = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.EditsToUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "previous_edits",
            kind: "message",
            T: H$i,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new P$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new P$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new P$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(P$e, e, t)
      }
    },
    V$i = class L$e extends _ {
      constructor(e) {
        super(),
          (this.repositories = []),
          (this.query = ""),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamFastEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "query", kind: "scalar", T: 9 },
          { no: 7, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 11, name: "linter_errors", kind: "message", T: Cf },
        ])
      }
      static fromBinary(e, t) {
        return new L$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new L$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new L$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(L$e, e, t)
      }
    },
    Z1n = class N$e extends _ {
      constructor(e) {
        super(),
          (this.lineNumber = 0),
          (this.replaceNumLines = 0),
          (this.editUuid = ""),
          (this.resetNewLines = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamFastEditResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          { no: 3, name: "replace_num_lines", kind: "scalar", T: 5 },
          { no: 5, name: "edit_uuid", kind: "scalar", T: 9 },
          { no: 4, name: "done", kind: "scalar", T: 8, opt: !0 },
          { no: 6, name: "new_line", kind: "scalar", T: 9, opt: !0 },
          { no: 7, name: "reset_new_lines", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new N$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new N$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new N$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(N$e, e, t)
      }
    },
    W$i = class Mte extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.query = ""),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.promptCodeBlocks = []),
          (this.sessionId = ""),
          (this.fastMode = !1),
          (this.images = []),
          (this.links = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "query", kind: "scalar", T: 9 },
          { no: 7, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 11, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 12,
            name: "prompt_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          { no: 14, name: "session_id", kind: "scalar", T: 9 },
          { no: 13, name: "cmd_k_debug_info", kind: "message", T: hI },
          { no: 15, name: "fast_mode", kind: "scalar", T: 8 },
          { no: 16, name: "original_request", kind: "message", T: Mte },
          { no: 17, name: "images", kind: "message", T: OT, repeated: !0 },
          { no: 18, name: "links", kind: "message", T: OSt, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Mte().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Mte().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Mte().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Mte, e, t)
      }
    },
    exn = class R$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PreloadEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "req", kind: "message", T: W$i },
        ])
      }
      static fromBinary(e, t) {
        return new R$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new R$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new R$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(R$e, e, t)
      }
    },
    txn = class A$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PreloadEditResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new A$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new A$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new A$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(A$e, e, t)
      }
    },
    q$i = class M$e extends _ {
      constructor(e) {
        super(),
          (this.chunksToAnalyze = []),
          (this.dismissedBugs = []),
          (this.activeBugs = []),
          (this.lintRules = []),
          (this.clients = []),
          (this.forceEnableDiscriminators = []),
          (this.forceDisableDiscriminators = []),
          (this.forceEnableGenerators = []),
          (this.forceDisableGenerators = []),
          (this.version = 0),
          (this.debugMode = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiLintBugRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "chunks_to_analyze",
            kind: "message",
            T: W1t,
            repeated: !0,
          },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "dismissed_bugs",
            kind: "message",
            T: Boe,
            repeated: !0,
          },
          { no: 11, name: "active_bugs", kind: "message", T: Boe, repeated: !0 },
          { no: 12, name: "lint_rules", kind: "message", T: d$i, repeated: !0 },
          { no: 14, name: "clients", kind: "message", T: j$i, repeated: !0 },
          {
            no: 17,
            name: "force_enable_discriminators",
            kind: "enum",
            T: v.getEnumType(n7),
            repeated: !0,
          },
          {
            no: 18,
            name: "force_disable_discriminators",
            kind: "enum",
            T: v.getEnumType(n7),
            repeated: !0,
          },
          {
            no: 19,
            name: "force_enable_generators",
            kind: "enum",
            T: v.getEnumType(r7),
            repeated: !0,
          },
          {
            no: 20,
            name: "force_disable_generators",
            kind: "enum",
            T: v.getEnumType(r7),
            repeated: !0,
          },
          { no: 21, name: "version", kind: "scalar", T: 5 },
          {
            no: 15,
            name: "discriminator_options",
            kind: "message",
            T: ixn,
            opt: !0,
          },
          { no: 16, name: "debug_mode", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new M$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new M$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new M$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(M$e, e, t)
      }
    },
    W1t = class $$e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          (this.contextLinesBefore = []),
          (this.contextLinesAfter = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiLintBugRequest.CodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 4,
            name: "context_lines_before",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 5,
            name: "context_lines_after",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new $$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($$e, e, t)
      }
    },
    j$i = class F$e extends _ {
      constructor(e) {
        super(),
          (this.chunks = []),
          (this.referredStartLines = []),
          (this.referredEndLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiLintBugRequest.CodeChunkList"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 13, name: "chunks", kind: "message", T: W1t, repeated: !0 },
          {
            no: 14,
            name: "referred_start_lines",
            kind: "scalar",
            T: 5,
            repeated: !0,
          },
          {
            no: 15,
            name: "referred_end_lines",
            kind: "scalar",
            T: 5,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new F$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new F$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new F$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(F$e, e, t)
      }
    },
    ixn = class O$e extends _ {
      constructor(e) {
        super(),
          (this.specificRules = !1),
          (this.compileErrors = !1),
          (this.changeBehavior = !1),
          (this.matchCode = !1),
          (this.relevance = !1),
          (this.userAwareness = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiLintBugRequest.DiscriminatorOptions"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "specific_rules", kind: "scalar", T: 8 },
          { no: 2, name: "compile_errors", kind: "scalar", T: 8 },
          { no: 3, name: "change_behavior", kind: "scalar", T: 8 },
          { no: 4, name: "match_code", kind: "scalar", T: 8 },
          { no: 5, name: "relevance", kind: "scalar", T: 8 },
          { no: 6, name: "user_awareness", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new O$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new O$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new O$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(O$e, e, t)
      }
    },
    sxn = class B$e extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiLintBugResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug", kind: "message", T: Boe, oneof: "response" },
          {
            no: 2,
            name: "background_task_uuid",
            kind: "scalar",
            T: 9,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new B$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new B$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new B$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(B$e, e, t)
      }
    },
    nxn = class _$e extends _ {
      constructor(e) {
        super(),
          (this.uuid = ""),
          (this.userAction = ""),
          (this.debugMode = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogUserLintReplyRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "uuid", kind: "scalar", T: 9 },
          { no: 2, name: "user_action", kind: "scalar", T: 9 },
          { no: 3, name: "debug_mode", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new _$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_$e, e, t)
      }
    },
    rxn = class U$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogUserLintReplyResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new U$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new U$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new U$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(U$e, e, t)
      }
    },
    oxn = class H$e extends _ {
      constructor(e) {
        super(),
          (this.userFeedback = Hoe.UNSPECIFIED),
          (this.userFeedbackDetails = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogLinterExplicitUserFeedbackRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug", kind: "message", T: Boe },
          { no: 3, name: "user_feedback", kind: "enum", T: v.getEnumType(Hoe) },
          { no: 4, name: "user_feedback_details", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new H$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new H$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new H$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(H$e, e, t)
      }
    },
    Hoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.CORRECT = 1)] = "CORRECT"),
      (i[(i.INCORRECT = 2)] = "INCORRECT"),
      (i[(i.OTHER = 3)] = "OTHER")
  })(Hoe || (Hoe = {})),
    v.util.setEnumType(
      Hoe,
      "aiserver.v1.LogLinterExplicitUserFeedbackRequest.LinterUserFeedback",
      [
        { no: 0, name: "LINTER_USER_FEEDBACK_UNSPECIFIED" },
        { no: 1, name: "LINTER_USER_FEEDBACK_CORRECT" },
        { no: 2, name: "LINTER_USER_FEEDBACK_INCORRECT" },
        { no: 3, name: "LINTER_USER_FEEDBACK_OTHER" },
      ],
    )
  var axn = class V$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogLinterExplicitUserFeedbackResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new V$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new V$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new V$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(V$e, e, t)
      }
    },
    z$i = class W$e extends _ {
      constructor(e) {
        super(),
          (this.currentRules = ""),
          (this.dismissedBug = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamNewRuleRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_rules", kind: "scalar", T: 9 },
          { no: 2, name: "dismissed_bug", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new W$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new W$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new W$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(W$e, e, t)
      }
    },
    G$i = class q$e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.query = ""),
          (this.codeBlocks = []),
          (this.sessionId = ""),
          (this.documentationIdentifiers = []),
          (this.promptCodeBlocks = []),
          (this.fastMode = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamGPTFourEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "query", kind: "scalar", T: 9 },
          { no: 7, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 14, name: "session_id", kind: "scalar", T: 9 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 11, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 12,
            name: "prompt_code_blocks",
            kind: "message",
            T: ed,
            repeated: !0,
          },
          { no: 13, name: "fast_mode", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new q$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new q$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new q$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(q$e, e, t)
      }
    },
    lxn = class j$e extends _ {
      constructor(e) {
        super(),
          (this.id = ""),
          (this.role = ""),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CursorHelpConversationMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "id", kind: "scalar", T: 9 },
          { no: 2, name: "role", kind: "scalar", T: 9 },
          { no: 3, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new j$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new j$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new j$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(j$e, e, t)
      }
    },
    cxn = class z$e extends _ {
      constructor(e) {
        super(),
          (this.messages = []),
          (this.userOs = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiCursorHelpRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "messages", kind: "message", T: lxn, repeated: !0 },
          { no: 2, name: "user_os", kind: "scalar", T: 9 },
          { no: 3, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new z$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new z$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new z$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(z$e, e, t)
      }
    },
    hxn = class G$e extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.actions = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamAiCursorHelpResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "actions", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new G$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new G$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new G$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(G$e, e, t)
      }
    },
    uxn = class J$e extends _ {
      constructor(e) {
        super(),
          (this.currentCommand = ""),
          (this.commandHistory = []),
          (this.fileDiffHistories = []),
          (this.commitHistory = []),
          (this.pastResults = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalAutocompleteRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_command", kind: "scalar", T: 9 },
          { no: 2, name: "command_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
          {
            no: 4,
            name: "file_diff_histories",
            kind: "message",
            T: $C,
            repeated: !0,
          },
          { no: 5, name: "git_diff", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "commit_history", kind: "scalar", T: 9, repeated: !0 },
          { no: 7, name: "past_results", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new J$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new J$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new J$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(J$e, e, t)
      }
    },
    J$i = class K$e extends _ {
      constructor(e) {
        super(), (this.content = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PseudocodeTarget"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "range", kind: "message", T: Hu },
          { no: 2, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new K$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new K$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new K$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(K$e, e, t)
      }
    },
    dxn = class Y$e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPseudocodeGeneratorRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "target", kind: "message", T: J$i },
        ])
      }
      static fromBinary(e, t) {
        return new Y$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Y$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Y$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Y$e, e, t)
      }
    },
    fxn = class X$e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPseudocodeGeneratorResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new X$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new X$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new X$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(X$e, e, t)
      }
    },
    gxn = class Q$e extends _ {
      constructor(e) {
        super(), (this.pseudocode = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPseudocodeMapperRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "target", kind: "message", T: J$i },
          { no: 1, name: "pseudocode", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Q$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Q$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Q$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Q$e, e, t)
      }
    },
    pxn = class Z$e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamPseudocodeMapperResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new Z$e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Z$e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Z$e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Z$e, e, t)
      }
    },
    mxn = class e2e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamTerminalAutocompleteResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 2, name: "done_stream", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new e2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new e2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new e2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(e2e, e, t)
      }
    },
    K$i = class t2e extends _ {
      constructor(e) {
        super(),
          (this.repositories = []),
          (this.gitDiff = ""),
          (this.conversation = []),
          (this.query = ""),
          (this.stop = ""),
          (this.importLineInDiff = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamBackgroundEditRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 3, name: "explicit_context", kind: "message", T: Sf },
          { no: 4, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "git_diff", kind: "scalar", T: 9 },
          { no: 6, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 7, name: "query", kind: "scalar", T: 9 },
          { no: 8, name: "model_details", kind: "message", T: zr },
          { no: 9, name: "stop", kind: "scalar", T: 9 },
          { no: 10, name: "import_line_in_diff", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new t2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new t2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new t2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(t2e, e, t)
      }
    },
    bxn = class i2e extends _ {
      constructor(e) {
        super(),
          (this.callStack = []),
          (this.history = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DebugInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "breakpoint", kind: "message", T: Cxn },
          { no: 2, name: "call_stack", kind: "message", T: wxn, repeated: !0 },
          { no: 3, name: "history", kind: "message", T: ed, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new i2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new i2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new i2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(i2e, e, t)
      }
    },
    vxn = class s2e extends _ {
      constructor(e) {
        super(), (this.name = ""), (this.value = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DebugInfo.Variable"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "value", kind: "scalar", T: 9 },
          { no: 3, name: "type", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new s2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new s2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new s2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(s2e, e, t)
      }
    },
    yxn = class n2e extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.variables = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DebugInfo.Scope"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "variables", kind: "message", T: vxn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new n2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new n2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new n2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(n2e, e, t)
      }
    },
    wxn = class r2e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lineNumber = 0),
          (this.functionName = ""),
          (this.scopes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DebugInfo.CallStackFrame"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          { no: 3, name: "function_name", kind: "scalar", T: 9 },
          { no: 4, name: "scopes", kind: "message", T: yxn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new r2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new r2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new r2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(r2e, e, t)
      }
    },
    Cxn = class o2e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.lineNumber = 0),
          (this.linesBeforeBreakpoint = []),
          (this.linesAfterBreakpoint = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DebugInfo.Breakpoint"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          {
            no: 3,
            name: "lines_before_breakpoint",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 4,
            name: "lines_after_breakpoint",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 5, name: "exception_info", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new o2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new o2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new o2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(o2e, e, t)
      }
    },
    ZN = class a2e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.requestId = ""),
          (this.conversationId = ""),
          (this.quotes = []),
          (this.externalLinks = []),
          (this.commitNotes = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetChatRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 7, name: "model_details", kind: "message", T: zr },
          {
            no: 8,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 9, name: "request_id", kind: "scalar", T: 9 },
          { no: 10, name: "linter_errors", kind: "message", T: Cf },
          { no: 11, name: "summary", kind: "scalar", T: 9, opt: !0 },
          {
            no: 12,
            name: "summary_up_until_index",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 13, name: "allow_long_file_scan", kind: "scalar", T: 8, opt: !0 },
          { no: 14, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
          { no: 15, name: "conversation_id", kind: "scalar", T: 9 },
          {
            no: 16,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 17, name: "use_web", kind: "scalar", T: 9, opt: !0 },
          { no: 18, name: "quotes", kind: "message", T: eVe, repeated: !0 },
          { no: 19, name: "debug_info", kind: "message", T: bxn, opt: !0 },
          { no: 20, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 21,
            name: "external_links",
            kind: "message",
            T: Ugn,
            repeated: !0,
          },
          { no: 23, name: "commit_notes", kind: "message", T: BSt, repeated: !0 },
          { no: 22, name: "long_context_mode", kind: "scalar", T: 8, opt: !0 },
          { no: 24, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
          { no: 26, name: "desired_max_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 25, name: "context_ast", kind: "message", T: f$i },
          { no: 27, name: "is_composer", kind: "scalar", T: 8, opt: !0 },
          { no: 28, name: "runnable_code_blocks", kind: "scalar", T: 8, opt: !0 },
          { no: 29, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
          {
            no: 30,
            name: "allow_model_fallbacks",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 31,
            name: "number_of_times_shown_fallback_model_warning",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new a2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new a2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new a2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(a2e, e, t)
      }
    },
    Sxn = class l2e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.documentationIdentifiers = []),
          (this.externalLinks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetNotepadChatRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "allow_long_file_scan", kind: "scalar", T: 8, opt: !0 },
          { no: 3, name: "explicit_context", kind: "message", T: Sf },
          {
            no: 4,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 5, name: "model_details", kind: "message", T: zr },
          { no: 6, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 7,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
          {
            no: 9,
            name: "external_links",
            kind: "message",
            T: FSt,
            repeated: !0,
          },
          { no: 10, name: "project_context", kind: "message", T: Ha, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new l2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new l2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new l2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(l2e, e, t)
      }
    },
    xxn = class c2e extends _ {
      constructor(e) {
        super(), (this.query = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsInitialQueriesRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new c2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new c2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new c2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(c2e, e, t)
      }
    },
    kxn = class h2e extends _ {
      constructor(e) {
        super(), (this.hydeQuery = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsInitialQueriesResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "hyde_query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new h2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new h2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new h2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(h2e, e, t)
      }
    },
    Exn = class u2e extends _ {
      constructor(e) {
        super(),
          (this.file = ""),
          (this.ranges = []),
          (this.query = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsUnderneathRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file", kind: "scalar", T: 9 },
          { no: 2, name: "ranges", kind: "message", T: ck, repeated: !0 },
          { no: 3, name: "query", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new u2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new u2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new u2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(u2e, e, t)
      }
    },
    Ixn = class d2e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsUnderneathResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new d2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new d2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new d2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(d2e, e, t)
      }
    },
    Dxn = class f2e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new f2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new f2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new f2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(f2e, e, t)
      }
    },
    Txn = class g2e extends _ {
      constructor(e) {
        super(), (this.potentialLoc = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PotentialLocsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "potential_loc", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new g2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new g2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new g2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(g2e, e, t)
      }
    },
    jB = class p2e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.documentationIdentifiers = []),
          (this.externalLinks = []),
          (this.diffsForCompressingFiles = []),
          (this.multiFileLinterErrors = []),
          (this.fileDiffHistories = []),
          (this.additionalRankedContext = []),
          (this.quotes = []),
          (this.conversationId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetComposerChatRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "allow_long_file_scan", kind: "scalar", T: 8, opt: !0 },
          { no: 3, name: "explicit_context", kind: "message", T: Sf },
          {
            no: 4,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 5, name: "model_details", kind: "message", T: zr },
          { no: 6, name: "linter_errors", kind: "message", T: Cf },
          {
            no: 7,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
          {
            no: 9,
            name: "external_links",
            kind: "message",
            T: FSt,
            repeated: !0,
          },
          { no: 10, name: "project_context", kind: "message", T: Ha, opt: !0 },
          {
            no: 11,
            name: "diffs_for_compressing_files",
            kind: "message",
            T: Pxn,
            repeated: !0,
          },
          { no: 12, name: "compress_edits", kind: "scalar", T: 8, opt: !0 },
          { no: 13, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
          {
            no: 14,
            name: "multi_file_linter_errors",
            kind: "message",
            T: Cf,
            repeated: !0,
          },
          { no: 15, name: "current_file", kind: "message", T: Ho },
          { no: 16, name: "recent_edits", kind: "message", T: Lxn, opt: !0 },
          {
            no: 17,
            name: "use_reference_composer_diff_prompt",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 18,
            name: "file_diff_histories",
            kind: "message",
            T: v1t,
            repeated: !0,
          },
          {
            no: 19,
            name: "use_new_compression_scheme",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 20,
            name: "additional_ranked_context",
            kind: "message",
            T: m1t,
            repeated: !0,
          },
          { no: 21, name: "quotes", kind: "message", T: eVe, repeated: !0 },
          {
            no: 22,
            name: "willing_to_pay_extra_for_speed",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 23, name: "conversation_id", kind: "scalar", T: 9 },
          {
            no: 24,
            name: "use_unified_chat_prompt",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          {
            no: 25,
            name: "use_full_inputs_context",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 26, name: "is_resume", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new p2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new p2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new p2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(p2e, e, t)
      }
    },
    Pxn = class m2e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.redRanges = []),
          (this.redRangesReversed = []),
          (this.startHash = ""),
          (this.endHash = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetComposerChatRequest.RedDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "red_ranges", kind: "message", T: ck, repeated: !0 },
          {
            no: 3,
            name: "red_ranges_reversed",
            kind: "message",
            T: ck,
            repeated: !0,
          },
          { no: 4, name: "start_hash", kind: "scalar", T: 9 },
          { no: 5, name: "end_hash", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new m2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new m2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new m2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(m2e, e, t)
      }
    },
    Lxn = class b2e extends _ {
      constructor(e) {
        super(),
          (this.codeBlockInfo = []),
          (this.finalFileValues = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetComposerChatRequest.RecentEdits"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "code_block_info",
            kind: "message",
            T: Nxn,
            repeated: !0,
          },
          {
            no: 2,
            name: "final_file_values",
            kind: "message",
            T: Rxn,
            repeated: !0,
          },
          {
            no: 3,
            name: "edits_belong_to_composer_generation_uuid",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new b2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new b2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new b2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(b2e, e, t)
      }
    },
    Nxn = class v2e extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.GetComposerChatRequest.RecentEdits.CodeBlockInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "content_before", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "content_after", kind: "scalar", T: 9, opt: !0 },
          { no: 4, name: "generation_uuid", kind: "scalar", T: 9, opt: !0 },
          { no: 5, name: "version", kind: "scalar", T: 5, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new v2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new v2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new v2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(v2e, e, t)
      }
    },
    Rxn = class y2e extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.content = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetComposerChatRequest.RecentEdits.FileInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "content", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new y2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new y2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new y2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(y2e, e, t)
      }
    },
    jCo = class w2e extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.query = ""),
          (this.rerankResults = !1),
          (this.contextResults = { case: void 0 }),
          (this.rerankResultsV2 = !1),
          (this.conversationId = ""),
          (this.canHandleFilenamesAfterLanguageIds = !1),
          (this.longContextMode = !1),
          (this.isEval = !1),
          (this.requestId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamComposerContextRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 7, name: "model_details", kind: "message", T: zr },
          {
            no: 8,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 9, name: "query", kind: "scalar", T: 9 },
          { no: 10, name: "code_context", kind: "message", T: Axn },
          { no: 11, name: "rerank_results", kind: "scalar", T: 8 },
          {
            no: 12,
            name: "file_search_results",
            kind: "message",
            T: LVe,
            oneof: "context_results",
          },
          {
            no: 13,
            name: "code_search_results",
            kind: "message",
            T: NVe,
            oneof: "context_results",
          },
          { no: 14, name: "linter_errors", kind: "message", T: Cf },
          { no: 15, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
          { no: 16, name: "rerank_results_v2", kind: "scalar", T: 8 },
          { no: 17, name: "conversation_id", kind: "scalar", T: 9 },
          {
            no: 18,
            name: "can_handle_filenames_after_language_ids",
            kind: "scalar",
            T: 8,
          },
          { no: 19, name: "long_context_mode", kind: "scalar", T: 8 },
          { no: 20, name: "is_eval", kind: "scalar", T: 8 },
          { no: 21, name: "request_id", kind: "scalar", T: 9 },
          { no: 22, name: "desired_max_tokens", kind: "scalar", T: 5, opt: !0 },
          { no: 23, name: "runnable_code_blocks", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new w2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new w2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new w2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(w2e, e, t)
      }
    },
    Axn = class C2e extends _ {
      constructor(e) {
        super(),
          (this.chunks = []),
          (this.scoredChunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamComposerContextRequest.CodeContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "chunks", kind: "message", T: ed, repeated: !0 },
          { no: 2, name: "scored_chunks", kind: "message", T: im, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new C2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new C2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new C2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(C2e, e, t)
      }
    },
    Mxn = class S2e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckUsageBasedPriceRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "usage_event_details", kind: "message", T: U1t },
        ])
      }
      static fromBinary(e, t) {
        return new S2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new S2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new S2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(S2e, e, t)
      }
    },
    $xn = class x2e extends _ {
      constructor(e) {
        super(),
          (this.markdownResponse = ""),
          (this.cents = 0),
          (this.priceId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckUsageBasedPriceResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "markdown_response", kind: "scalar", T: 9 },
          { no: 2, name: "cents", kind: "scalar", T: 5 },
          { no: 3, name: "price_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new x2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new x2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new x2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(x2e, e, t)
      }
    },
    Y$i = class k2e extends _ {
      constructor(e) {
        super(),
          (this.origRequestId = ""),
          (this.usageUuid = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckQueuePositionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "orig_request_id", kind: "scalar", T: 9 },
          { no: 2, name: "model_details", kind: "message", T: zr },
          { no: 3, name: "usage_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new k2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new k2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new k2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(k2e, e, t)
      }
    },
    Fxn = class E2e extends _ {
      constructor(e) {
        super(),
          (this.position = 0),
          (this.hitHardLimit = !1),
          (this.couldEnableUsageBasedPricingToSkip = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckQueuePositionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "position", kind: "scalar", T: 5 },
          { no: 2, name: "seconds_left_to_wait", kind: "scalar", T: 5, opt: !0 },
          { no: 7, name: "new_queue_position", kind: "scalar", T: 5, opt: !0 },
          { no: 3, name: "hit_hard_limit", kind: "scalar", T: 8 },
          {
            no: 4,
            name: "could_enable_usage_based_pricing_to_skip",
            kind: "scalar",
            T: 8,
          },
          { no: 5, name: "usage_event_details", kind: "message", T: U1t },
          { no: 6, name: "custom_link", kind: "message", T: Oxn },
        ])
      }
      static fromBinary(e, t) {
        return new E2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new E2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new E2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(E2e, e, t)
      }
    },
    Oxn = class I2e extends _ {
      constructor(e) {
        super(),
          (this.address = ""),
          (this.message = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckQueuePositionResponse.CustomLink"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "address", kind: "scalar", T: 9 },
          { no: 2, name: "message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new I2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new I2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new I2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(I2e, e, t)
      }
    },
    Bxn = class D2e extends _ {
      constructor(e) {
        super(),
          (this.fileContent = ""),
          (this.languageId = ""),
          (this.commandId = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsolatedTreesitterRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_content", kind: "scalar", T: 9 },
          { no: 2, name: "language_id", kind: "scalar", T: 9 },
          { no: 3, name: "command_id", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new D2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new D2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new D2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(D2e, e, t)
      }
    },
    _xn = class T2e extends _ {
      constructor(e) {
        super(), (this.items = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.IsolatedTreesitterResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "items", kind: "message", T: Uxn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new T2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new T2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new T2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(T2e, e, t)
      }
    },
    X$i = class P2e extends _ {
      constructor(e) {
        super(), (this.row = 0), (this.column = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.IsolatedTreesitterResponse.TreeSitterPosition"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "row", kind: "scalar", T: 5 },
          { no: 2, name: "column", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new P2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new P2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new P2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(P2e, e, t)
      }
    },
    Uxn = class L2e extends _ {
      constructor(e) {
        super(), (this.symbolName = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbol_name", kind: "scalar", T: 9 },
          { no: 2, name: "start_position", kind: "message", T: X$i, opt: !0 },
          { no: 3, name: "end_position", kind: "message", T: X$i, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new L2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new L2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new L2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(L2e, e, t)
      }
    },
    Q$i = class N2e extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.answerPlaceholder = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSimplePromptRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "answer_placeholder", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new N2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new N2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new N2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(N2e, e, t)
      }
    },
    Hxn = class R2e extends _ {
      constructor(e) {
        super(), (this.result = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSimplePromptResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "result", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new R2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new R2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new R2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(R2e, e, t)
      }
    },
    Vxn = class A2e extends _ {
      constructor(e) {
        super(), (this.didFit = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckLongFilesFitResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "did_fit", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new A2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new A2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new A2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(A2e, e, t)
      }
    },
    Wxn = class M2e extends _ {
      constructor(e) {
        super(),
          (this.promptType = Voe.UNSPECIFIED),
          (this.query = ""),
          (this.bucketId = ""),
          (this.queryStrategy = ""),
          (this.tokenLimit = 0),
          (this.rerankingStrategy = Woe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEvaluationPromptRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "prompt_type", kind: "enum", T: v.getEnumType(Voe) },
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "query", kind: "scalar", T: 9 },
          { no: 4, name: "bucket_id", kind: "scalar", T: 9 },
          { no: 5, name: "query_strategy", kind: "scalar", T: 9 },
          { no: 6, name: "token_limit", kind: "scalar", T: 5 },
          {
            no: 7,
            name: "reranking_strategy",
            kind: "enum",
            T: v.getEnumType(Woe),
          },
        ])
      }
      static fromBinary(e, t) {
        return new M2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new M2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new M2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(M2e, e, t)
      }
    },
    Voe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.GENERATE = 1)] = "GENERATE"),
      (i[(i.CHAT = 2)] = "CHAT")
  })(Voe || (Voe = {})),
    v.util.setEnumType(
      Voe,
      "aiserver.v1.GetEvaluationPromptRequest.EvaluationPromptType",
      [
        { no: 0, name: "EVALUATION_PROMPT_TYPE_UNSPECIFIED" },
        { no: 1, name: "EVALUATION_PROMPT_TYPE_GENERATE" },
        { no: 2, name: "EVALUATION_PROMPT_TYPE_CHAT" },
      ],
    )
  var Woe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.DISTANCE_ONLY = 1)] = "DISTANCE_ONLY"),
      (i[(i.GPT4_RELEVANCE = 2)] = "GPT4_RELEVANCE")
  })(Woe || (Woe = {})),
    v.util.setEnumType(
      Woe,
      "aiserver.v1.GetEvaluationPromptRequest.RerankingStrategy",
      [
        { no: 0, name: "RERANKING_STRATEGY_UNSPECIFIED" },
        { no: 1, name: "RERANKING_STRATEGY_DISTANCE_ONLY" },
        { no: 2, name: "RERANKING_STRATEGY_GPT4_RELEVANCE" },
      ],
    )
  var qxn = class $2e extends _ {
      constructor(e) {
        super(),
          (this.prompt = ""),
          (this.tokenCount = 0),
          (this.estimatedTokenCount = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetEvaluationPromptResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "prompt", kind: "scalar", T: 9 },
          { no: 2, name: "token_count", kind: "scalar", T: 5 },
          { no: 3, name: "estimated_token_count", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new $2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($2e, e, t)
      }
    },
    jxn = class F2e extends _ {
      constructor(e) {
        super(),
          (this.prompt = ""),
          (this.repositories = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamInlineEditsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "prompt", kind: "scalar", T: 9 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
        ])
      }
      static fromBinary(e, t) {
        return new F2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new F2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new F2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(F2e, e, t)
      }
    },
    zxn = class O2e extends _ {
      constructor(e) {
        super(), (this.line = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamInlineEditsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "line", kind: "scalar", T: 9 },
          { no: 2, name: "debugging_only_prompt", kind: "scalar", T: 9, opt: !0 },
          {
            no: 3,
            name: "debugging_only_token_count",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new O2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new O2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new O2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(O2e, e, t)
      }
    },
    Gxn = class B2e extends _ {
      constructor(e) {
        super(),
          (this.didSummarize = !1),
          (this.upUntilIndex = 0),
          (this.summary = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SummarizeConversationResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "did_summarize", kind: "scalar", T: 8 },
          { no: 2, name: "up_until_index", kind: "scalar", T: 5 },
          { no: 3, name: "summary", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new B2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new B2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new B2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(B2e, e, t)
      }
    },
    Jxn = class _2e extends _ {
      constructor(e) {
        super(), (this.conversation = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetChatTitleRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new _2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_2e, e, t)
      }
    },
    Kxn = class U2e extends _ {
      constructor(e) {
        super(), (this.title = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetChatTitleResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "title", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new U2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new U2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new U2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(U2e, e, t)
      }
    },
    zCo = class H2e extends _ {
      constructor(e) {
        super(),
          (this.prompt = ""),
          (this.tokenCount = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetChatPromptResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "prompt", kind: "scalar", T: 9 },
          { no: 2, name: "token_count", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new H2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new H2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new H2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(H2e, e, t)
      }
    },
    Yxn = class V2e extends _ {
      constructor(e) {
        super(),
          (this.serverStartTime = 0),
          (this.serverFirstTokenTime = 0),
          (this.serverRequestSentTime = 0),
          (this.serverEndTime = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ServerTimingInfo"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "server_start_time", kind: "scalar", T: 1 },
          { no: 2, name: "server_first_token_time", kind: "scalar", T: 1 },
          { no: 3, name: "server_request_sent_time", kind: "scalar", T: 1 },
          { no: 4, name: "server_end_time", kind: "scalar", T: 1 },
        ])
      }
      static fromBinary(e, t) {
        return new V2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new V2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new V2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(V2e, e, t)
      }
    },
    dI = class W2e extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          { no: 22, name: "server_bubble_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "debugging_only_chat_prompt",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
          {
            no: 3,
            name: "debugging_only_token_count",
            kind: "scalar",
            T: 5,
            opt: !0,
          },
          { no: 4, name: "document_citation", kind: "message", T: b1t },
          { no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "is_big_file", kind: "scalar", T: 8, opt: !0 },
          { no: 7, name: "intermediate_text", kind: "scalar", T: 9, opt: !0 },
          {
            no: 10,
            name: "is_using_slow_request",
            kind: "scalar",
            T: 8,
            opt: !0,
          },
          { no: 8, name: "chunk_identity", kind: "message", T: Xxn, opt: !0 },
          { no: 9, name: "docs_reference", kind: "message", T: bVe, opt: !0 },
          { no: 11, name: "web_citation", kind: "message", T: LMi, opt: !0 },
          { no: 12, name: "status_updates", kind: "message", T: RMi, opt: !0 },
          { no: 13, name: "timing_info", kind: "message", T: Yxn, opt: !0 },
          { no: 14, name: "symbol_link", kind: "message", T: yVe, opt: !0 },
          { no: 15, name: "file_link", kind: "message", T: y1t, opt: !0 },
          {
            no: 16,
            name: "conversation_summary",
            kind: "message",
            T: L$,
            opt: !0,
          },
          {
            no: 17,
            name: "service_status_update",
            kind: "message",
            T: MMi,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new W2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new W2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new W2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(W2e, e, t)
      }
    },
    Xxn = class q2e extends _ {
      constructor(e) {
        super(),
          (this.fileName = ""),
          (this.startLine = 0),
          (this.endLine = 0),
          (this.text = ""),
          (this.chunkType = hk.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatResponse.ChunkIdentity"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_name", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line", kind: "scalar", T: 5 },
          { no: 4, name: "text", kind: "scalar", T: 9 },
          { no: 5, name: "chunk_type", kind: "enum", T: v.getEnumType(hk) },
        ])
      }
      static fromBinary(e, t) {
        return new q2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new q2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new q2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(q2e, e, t)
      }
    },
    Qxn = class j2e extends _ {
      constructor(e) {
        super(), (this.didWarmCache = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WarmComposerCacheResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "did_warm_cache", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new j2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new j2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new j2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(j2e, e, t)
      }
    },
    Z$i = class z2e extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WarmChatCacheRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request", kind: "message", T: ZN },
        ])
      }
      static fromBinary(e, t) {
        return new z2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new z2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new z2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(z2e, e, t)
      }
    },
    Zxn = class G2e extends _ {
      constructor(e) {
        super(), (this.didWarmCache = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WarmChatCacheResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "did_warm_cache", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new G2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new G2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new G2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(G2e, e, t)
      }
    },
    ekn = class J2e extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.lines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SurroundingLines"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new J2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new J2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new J2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(J2e, e, t)
      }
    },
    tkn = class K2e extends _ {
      constructor(e) {
        super(), (this.suggestionsFromEditor = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCompletionRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "file_identifier", kind: "message", T: okn },
          { no: 2, name: "cursor_position", kind: "message", T: Qm },
          { no: 3, name: "surrounding_lines", kind: "message", T: ekn },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          {
            no: 5,
            name: "suggestions_from_editor",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new K2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new K2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new K2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(K2e, e, t)
      }
    },
    ikn = class Y2e extends _ {
      constructor(e) {
        super(),
          (this.completion = ""),
          (this.score = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetCompletionResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "completion", kind: "scalar", T: 9 },
          { no: 2, name: "score", kind: "scalar", T: 2 },
          {
            no: 3,
            name: "debugging_only_completion_prompt",
            kind: "scalar",
            T: 9,
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new Y2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Y2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Y2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Y2e, e, t)
      }
    },
    skn = class X2e extends _ {
      constructor(e) {
        super(),
          (this.query = ""),
          (this.repositories = []),
          (this.topK = 0),
          (this.restrictToBuckets = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSearchRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "query", kind: "scalar", T: 9 },
          { no: 2, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 3, name: "top_k", kind: "scalar", T: 5 },
          {
            no: 4,
            name: "restrict_to_buckets",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new X2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new X2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new X2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(X2e, e, t)
      }
    },
    nkn = class Q2e extends _ {
      constructor(e) {
        super(),
          (this.repositoryRelativeWorkspacePath = ""),
          (this.fileRelativeRepositoryPath = ""),
          (this.chunk = ""),
          (this.distance = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FileSearchResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "repository_relative_workspace_path",
            kind: "scalar",
            T: 9,
          },
          { no: 2, name: "file_relative_repository_path", kind: "scalar", T: 9 },
          { no: 3, name: "chunk", kind: "scalar", T: 9 },
          { no: 4, name: "distance", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new Q2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Q2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Q2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Q2e, e, t)
      }
    },
    rkn = class Z2e extends _ {
      constructor(e) {
        super(), (this.results = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetSearchResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "results", kind: "message", T: nkn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new Z2e().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new Z2e().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new Z2e().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(Z2e, e, t)
      }
    },
    okn = class eFe extends _ {
      constructor(e) {
        super(),
          (this.projectUuid = ""),
          (this.relativePath = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UniqueFileIdentifier"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "project_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "relative_path", kind: "scalar", T: 9 },
          { no: 3, name: "language_id", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new eFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eFe, e, t)
      }
    },
    akn = class tFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetUserInfoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new tFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tFe, e, t)
      }
    },
    lkn = class iFe extends _ {
      constructor(e) {
        super(),
          (this.gpt4Requests = 0),
          (this.gpt4MaxRequests = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.UsageData"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 2, name: "gpt4_requests", kind: "scalar", T: 5 },
          { no: 3, name: "gpt4_max_requests", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new iFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iFe, e, t)
      }
    },
    ckn = class sFe extends _ {
      constructor(e) {
        super(),
          (this.userId = ""),
          (this.jupyterToken = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetUserInfoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "user_id", kind: "scalar", T: 9 },
          { no: 2, name: "jupyter_token", kind: "scalar", T: 9 },
          { no: 3, name: "usage", kind: "message", T: lkn },
        ])
      }
      static fromBinary(e, t) {
        return new sFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sFe, e, t)
      }
    },
    hkn = class nFe extends _ {
      constructor(e) {
        super(), (this.bucketId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ClearAndRedoEntireBucketRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bucket_id", kind: "scalar", T: 9 },
          { no: 2, name: "commit", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new nFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nFe, e, t)
      }
    },
    ukn = class rFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ClearAndRedoEntireBucketResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new rFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rFe, e, t)
      }
    },
    dkn = class oFe extends _ {
      constructor(e) {
        super(),
          (this.generationUuid = ""),
          (this.completion = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "completion", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oFe, e, t)
      }
    },
    e2i = class aFe extends _ {
      constructor(e) {
        super(),
          (this.action = { case: void 0 }),
          (this.reasoning = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "skip_action",
            kind: "message",
            T: fkn,
            oneof: "action",
          },
          {
            no: 2,
            name: "edit_action",
            kind: "message",
            T: gkn,
            oneof: "action",
          },
          {
            no: 3,
            name: "create_action",
            kind: "message",
            T: pkn,
            oneof: "action",
          },
          { no: 4, name: "run_action", kind: "message", T: mkn, oneof: "action" },
          { no: 5, name: "reasoning", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new aFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aFe, e, t)
      }
    },
    fkn = class lFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckResponse.SkipAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new lFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lFe, e, t)
      }
    },
    gkn = class cFe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckResponse.EditAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new cFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cFe, e, t)
      }
    },
    pkn = class hFe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePath = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckResponse.CreateAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new hFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hFe, e, t)
      }
    },
    mkn = class uFe extends _ {
      constructor(e) {
        super(), (this.command = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeCheckResponse.RunAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "command", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new uFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uFe, e, t)
      }
    },
    bkn = class dFe extends _ {
      constructor(e) {
        super(),
          (this.generationUuid = ""),
          (this.completion = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "completion", kind: "scalar", T: 9 },
          { no: 3, name: "action", kind: "message", T: e2i },
        ])
      }
      static fromBinary(e, t) {
        return new dFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dFe, e, t)
      }
    },
    vkn = class fFe extends _ {
      constructor(e) {
        super(), (this.event = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "update_status",
            kind: "message",
            T: ykn,
            oneof: "event",
          },
        ])
      }
      static fromBinary(e, t) {
        return new fFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fFe, e, t)
      }
    },
    ykn = class gFe extends _ {
      constructor(e) {
        super(), (this.status = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeResponse.UpdateStatus"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new gFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gFe, e, t)
      }
    },
    wkn = class pFe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.DoThisForMeResponseWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: vkn,
            oneof: "response",
          },
          {
            no: 2,
            name: "background_task_uuid",
            kind: "scalar",
            T: 9,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new pFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pFe, e, t)
      }
    },
    Ckn = class mFe extends _ {
      constructor(e) {
        super(), (this.toolformerSessionId = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatToolformerContinueRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "toolformer_session_id", kind: "scalar", T: 9 },
          { no: 2, name: "tool_result", kind: "message", T: BB },
        ])
      }
      static fromBinary(e, t) {
        return new mFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mFe, e, t)
      }
    },
    t2i = class bFe extends _ {
      constructor(e) {
        super(),
          (this.responseType = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatToolformerResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "toolformer_session_id", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "output",
            kind: "message",
            T: Skn,
            oneof: "response_type",
          },
          {
            no: 3,
            name: "tool_action",
            kind: "message",
            T: kkn,
            oneof: "response_type",
          },
          {
            no: 4,
            name: "thought",
            kind: "message",
            T: xkn,
            oneof: "response_type",
          },
        ])
      }
      static fromBinary(e, t) {
        return new bFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bFe, e, t)
      }
    },
    Skn = class vFe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatToolformerResponse.Output"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new vFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vFe, e, t)
      }
    },
    xkn = class yFe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatToolformerResponse.Thought"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new yFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yFe, e, t)
      }
    },
    kkn = class wFe extends _ {
      constructor(e) {
        super(),
          (this.userFacingText = ""),
          (this.rawModelOutput = ""),
          (this.moreToCome = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamChatToolformerResponse.ToolAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "user_facing_text", kind: "scalar", T: 9 },
          { no: 3, name: "raw_model_output", kind: "scalar", T: 9 },
          { no: 2, name: "tool_call", kind: "message", T: jAi },
          { no: 4, name: "more_to_come", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new wFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wFe, e, t)
      }
    },
    MVe = class CFe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.attachedCodeChunks = []),
          (this.repositories = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInstruction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "attached_code_chunks",
            kind: "message",
            T: Ekn,
            repeated: !0,
          },
          { no: 3, name: "current_file", kind: "message", T: Ho },
          { no: 4, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 5, name: "explicit_context", kind: "message", T: Sf },
        ])
      }
      static fromBinary(e, t) {
        return new CFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new CFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new CFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(CFe, e, t)
      }
    },
    Ekn = class SFe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInstruction.CodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new SFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SFe, e, t)
      }
    },
    i2i = class xFe extends _ {
      constructor(e) {
        super(),
          (this.text = ""),
          (this.attachedCodeChunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskUserMessage"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
          {
            no: 2,
            name: "attached_code_chunks",
            kind: "message",
            T: Ikn,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new xFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xFe, e, t)
      }
    },
    Ikn = class kFe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLineNumber = 0),
          (this.lines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskUserMessage.CodeChunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line_number", kind: "scalar", T: 5 },
          { no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new kFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kFe, e, t)
      }
    },
    Dkn = class EFe extends _ {
      constructor(e) {
        super(),
          (this.thought = ""),
          (this.automated = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PushAiThoughtRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "thought", kind: "scalar", T: 9 },
          { no: 2, name: "cmd_k_debug_info", kind: "message", T: hI },
          { no: 3, name: "automated", kind: "scalar", T: 8 },
          { no: 4, name: "metadata", kind: "message", T: Tkn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new EFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EFe, e, t)
      }
    },
    Tkn = class IFe extends _ {
      constructor(e) {
        super(), (this.event = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PushAiThoughtRequest.Metadata"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "accepted_hallucinated_function_event",
            kind: "message",
            T: Pkn,
            oneof: "event",
          },
        ])
      }
      static fromBinary(e, t) {
        return new IFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IFe, e, t)
      }
    },
    Pkn = class DFe extends _ {
      constructor(e) {
        super(),
          (this.implementationUuid = ""),
          (this.hallucinatedFunctionUuid = ""),
          (this.implementation = ""),
          (this.source = ""),
          (this.implementationReqid = ""),
          (this.planReqid = ""),
          (this.reflectionReqid = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.PushAiThoughtRequest.Metadata.AcceptedHallucinatedFunctionEvent"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "implementation_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "hallucinated_function_uuid", kind: "scalar", T: 9 },
          { no: 3, name: "implementation", kind: "scalar", T: 9 },
          { no: 4, name: "source", kind: "scalar", T: 9 },
          { no: 5, name: "implementation_reqid", kind: "scalar", T: 9 },
          { no: 6, name: "plan_reqid", kind: "scalar", T: 9 },
          { no: 7, name: "reflection_reqid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new DFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DFe, e, t)
      }
    },
    Lkn = class TFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.PushAiThoughtResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new TFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TFe, e, t)
      }
    },
    Nkn = class PFe extends _ {
      constructor(e) {
        super(), (this.modelOutput = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckDoableAsTaskRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_output", kind: "scalar", T: 9 },
          { no: 2, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new PFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new PFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new PFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(PFe, e, t)
      }
    },
    Rkn = class LFe extends _ {
      constructor(e) {
        super(), (this.doableAsTask = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CheckDoableAsTaskResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "doable_as_task", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new LFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LFe, e, t)
      }
    },
    q1t = class NFe extends _ {
      constructor(e) {
        super(), (this.debuggingOnlyLiveMode = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.InterfaceAgentInitRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "model_details", kind: "message", T: zr },
          { no: 2, name: "debugging_only_live_mode", kind: "scalar", T: 8 },
          {
            no: 3,
            name: "interface_agent_client_state",
            kind: "message",
            T: m$i,
          },
        ])
      }
      static fromBinary(e, t) {
        return new NFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NFe, e, t)
      }
    },
    Akn = class RFe extends _ {
      constructor(e) {
        super(),
          (this.taskUuid = ""),
          (this.humanReadableTitle = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.InterfaceAgentInitResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "human_readable_title", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new RFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new RFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new RFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(RFe, e, t)
      }
    },
    s2i = class AFe extends _ {
      constructor(e) {
        super(), (this.taskUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamInterfaceAgentStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new AFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AFe, e, t)
      }
    },
    Mkn = class MFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamInterfaceAgentStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "message", T: H1t },
        ])
      }
      static fromBinary(e, t) {
        return new MFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MFe, e, t)
      }
    },
    $kn = class $Fe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskGetInterfaceAgentStatusRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "interface_agent_client_state",
            kind: "message",
            T: m$i,
          },
        ])
      }
      static fromBinary(e, t) {
        return new $Fe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Fe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Fe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Fe, e, t)
      }
    },
    j1t = class FFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskGetInterfaceAgentStatusResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "status", kind: "message", T: H1t },
        ])
      }
      static fromBinary(e, t) {
        return new FFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FFe, e, t)
      }
    },
    Fkn = class OFe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskGetInterfaceAgentStatusResponseWrapped"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "real_response",
            kind: "message",
            T: j1t,
            oneof: "response",
          },
          {
            no: 2,
            name: "background_task_uuid",
            kind: "scalar",
            T: 9,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new OFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OFe, e, t)
      }
    },
    Okn = class BFe extends _ {
      constructor(e) {
        super(), (this.debuggingOnlyLiveMode = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInitRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "instruction", kind: "message", T: MVe },
          { no: 2, name: "model_details", kind: "message", T: zr },
          { no: 3, name: "debugging_only_live_mode", kind: "scalar", T: 8 },
          { no: 4, name: "engine_id", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new BFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BFe, e, t)
      }
    },
    Bkn = class _Fe extends _ {
      constructor(e) {
        super(),
          (this.taskUuid = ""),
          (this.humanReadableTitle = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInitResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "human_readable_title", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new _Fe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Fe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Fe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Fe, e, t)
      }
    },
    _kn = class UFe extends _ {
      constructor(e) {
        super(),
          (this.taskUuid = ""),
          (this.startSequenceNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamLogRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "start_sequence_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new UFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UFe, e, t)
      }
    },
    Ukn = class HFe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskLogOutput"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new HFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HFe, e, t)
      }
    },
    Hkn = class VFe extends _ {
      constructor(e) {
        super(),
          (this.userFacingText = ""),
          (this.rawModelOutput = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskLogToolAction"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "user_facing_text", kind: "scalar", T: 9 },
          { no: 3, name: "raw_model_output", kind: "scalar", T: 9 },
          { no: 2, name: "tool_call", kind: "message", T: jAi },
        ])
      }
      static fromBinary(e, t) {
        return new VFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VFe, e, t)
      }
    },
    Vkn = class WFe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskLogThought"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new WFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WFe, e, t)
      }
    },
    Wkn = class qFe extends _ {
      constructor(e) {
        super(), (this.actionSequenceNumber = 0), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskLogToolResult"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "tool_result", kind: "message", T: BB },
          { no: 2, name: "action_sequence_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new qFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new qFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new qFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(qFe, e, t)
      }
    },
    qkn = class jFe extends _ {
      constructor(e) {
        super(),
          (this.sequenceNumber = 0),
          (this.isNotDone = !1),
          (this.logItem = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskLogItem"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "sequence_number", kind: "scalar", T: 5 },
          { no: 2, name: "is_not_done", kind: "scalar", T: 8 },
          { no: 3, name: "output", kind: "message", T: Ukn, oneof: "log_item" },
          {
            no: 4,
            name: "tool_action",
            kind: "message",
            T: Hkn,
            oneof: "log_item",
          },
          { no: 5, name: "thought", kind: "message", T: Vkn, oneof: "log_item" },
          {
            no: 6,
            name: "user_message",
            kind: "message",
            T: i2i,
            oneof: "log_item",
          },
          {
            no: 7,
            name: "instruction",
            kind: "message",
            T: MVe,
            oneof: "log_item",
          },
          {
            no: 8,
            name: "tool_result",
            kind: "message",
            T: Wkn,
            oneof: "log_item",
          },
        ])
      }
      static fromBinary(e, t) {
        return new jFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new jFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new jFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(jFe, e, t)
      }
    },
    jkn = class zFe extends _ {
      constructor(e) {
        super(), (this.taskUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInfoRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new zFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new zFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new zFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(zFe, e, t)
      }
    },
    zkn = class GFe extends _ {
      constructor(e) {
        super(), (this.taskUuid = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskPauseRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new GFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new GFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new GFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(GFe, e, t)
      }
    },
    Gkn = class JFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskPauseResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new JFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new JFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new JFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(JFe, e, t)
      }
    },
    n2i = class KFe extends _ {
      constructor(e) {
        super(),
          (this.humanReadableTitle = ""),
          (this.taskStatus = Yv.UNSPECIFIED),
          (this.lastLogSequenceNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskInfoResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "human_readable_title", kind: "scalar", T: 9 },
          { no: 2, name: "task_status", kind: "enum", T: v.getEnumType(Yv) },
          { no: 3, name: "last_log_sequence_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new KFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new KFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new KFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(KFe, e, t)
      }
    },
    Jkn = class YFe extends _ {
      constructor(e) {
        super(), (this.response = { case: void 0 }), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamLogResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "streamed_log_item",
            kind: "message",
            T: qkn,
            oneof: "response",
          },
          {
            no: 2,
            name: "info_update",
            kind: "message",
            T: Kkn,
            oneof: "response",
          },
          {
            no: 3,
            name: "initial_task_info",
            kind: "message",
            T: n2i,
            oneof: "response",
          },
        ])
      }
      static fromBinary(e, t) {
        return new YFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new YFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new YFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(YFe, e, t)
      }
    },
    Kkn = class XFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskStreamLogResponse.InfoUpdate"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "human_readable_title", kind: "scalar", T: 9, opt: !0 },
          {
            no: 2,
            name: "task_status",
            kind: "enum",
            T: v.getEnumType(Yv),
            opt: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new XFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new XFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new XFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(XFe, e, t)
      }
    },
    Ykn = class QFe extends _ {
      constructor(e) {
        super(),
          (this.taskUuid = ""),
          (this.actionSequenceNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskProvideResultRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "action_sequence_number", kind: "scalar", T: 5 },
          { no: 3, name: "tool_result", kind: "message", T: BB },
        ])
      }
      static fromBinary(e, t) {
        return new QFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new QFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new QFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(QFe, e, t)
      }
    },
    Xkn = class ZFe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskProvideResultResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new ZFe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ZFe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ZFe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ZFe, e, t)
      }
    },
    Qkn = class eOe extends _ {
      constructor(e) {
        super(),
          (this.taskUuid = ""),
          (this.wantsAttentionRightNow = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskSendMessageRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "task_uuid", kind: "scalar", T: 9 },
          { no: 2, name: "user_message", kind: "message", T: i2i },
          { no: 3, name: "wants_attention_right_now", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new eOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new eOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new eOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(eOe, e, t)
      }
    },
    Zkn = class tOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.TaskSendMessageResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new tOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new tOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new tOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(tOe, e, t)
      }
    },
    eEn = class iOe extends _ {
      constructor(e) {
        super(),
          (this.feedback = ""),
          (this.feedbackType = qoe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportFeedbackRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "feedback", kind: "scalar", T: 9 },
          { no: 2, name: "feedback_type", kind: "enum", T: v.getEnumType(qoe) },
        ])
      }
      static fromBinary(e, t) {
        return new iOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new iOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new iOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(iOe, e, t)
      }
    },
    qoe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LOW_PRIORITY = 1)] = "LOW_PRIORITY"),
      (i[(i.HIGH_PRIORITY = 2)] = "HIGH_PRIORITY")
  })(qoe || (qoe = {})),
    v.util.setEnumType(qoe, "aiserver.v1.ReportFeedbackRequest.FeedbackType", [
      { no: 0, name: "FEEDBACK_TYPE_UNSPECIFIED" },
      { no: 1, name: "FEEDBACK_TYPE_LOW_PRIORITY" },
      { no: 2, name: "FEEDBACK_TYPE_HIGH_PRIORITY" },
    ])
  var tEn = class sOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportFeedbackResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new sOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new sOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new sOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(sOe, e, t)
      }
    },
    iEn = class nOe extends _ {
      constructor(e) {
        super(),
          (this.relativePathToCursorFolder = ""),
          (this.contents = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.LogFile"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_path_to_cursor_folder", kind: "scalar", T: 9 },
          { no: 2, name: "contents", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new nOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new nOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new nOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(nOe, e, t)
      }
    },
    sEn = class rOe extends _ {
      constructor(e) {
        super(),
          (this.screenshots = []),
          (this.conversation = []),
          (this.logs = []),
          (this.consoleLogs = ""),
          (this.cursorVersion = ""),
          (this.os = ""),
          (this.protoUrl = ""),
          (this.failingRequstId = ""),
          (this.connectionErrorRaw = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.BugContext"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "screenshots", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "current_file", kind: "message", T: Ho },
          { no: 3, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 4, name: "logs", kind: "message", T: iEn, repeated: !0 },
          { no: 5, name: "console_logs", kind: "scalar", T: 9 },
          { no: 6, name: "cursor_version", kind: "scalar", T: 9 },
          { no: 7, name: "os", kind: "scalar", T: 9 },
          { no: 8, name: "proto_url", kind: "scalar", T: 9 },
          { no: 9, name: "failing_requst_id", kind: "scalar", T: 9 },
          { no: 10, name: "connection_error_raw", kind: "scalar", T: 9 },
          { no: 12, name: "debug_info", kind: "message", T: hI },
          { no: 13, name: "connect_error_code", kind: "scalar", T: 5, opt: !0 },
          {
            no: 14,
            name: "error_detail_code",
            kind: "enum",
            T: v.getEnumType(Er),
            opt: !0,
          },
          { no: 15, name: "error_detail_title", kind: "scalar", T: 9, opt: !0 },
          { no: 16, name: "error_detail_detail", kind: "scalar", T: 9, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new rOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new rOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new rOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(rOe, e, t)
      }
    },
    nEn = class oOe extends _ {
      constructor(e) {
        super(),
          (this.bug = ""),
          (this.bugType = Kh.UNSPECIFIED),
          (this.contactEmail = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportBugRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug", kind: "scalar", T: 9 },
          { no: 2, name: "bug_type", kind: "enum", T: v.getEnumType(Kh) },
          { no: 3, name: "context", kind: "message", T: sEn },
          { no: 4, name: "contact_email", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new oOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new oOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new oOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(oOe, e, t)
      }
    },
    Kh
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.LOW = 1)] = "LOW"),
      (i[(i.MEDIUM = 2)] = "MEDIUM"),
      (i[(i.URGENT = 3)] = "URGENT"),
      (i[(i.CRASH = 4)] = "CRASH"),
      (i[(i.CONNECTION_ERROR = 5)] = "CONNECTION_ERROR"),
      (i[(i.IDEA = 6)] = "IDEA"),
      (i[(i.MISC_AUTOMATIC_ERROR = 7)] = "MISC_AUTOMATIC_ERROR")
  })(Kh || (Kh = {})),
    v.util.setEnumType(Kh, "aiserver.v1.ReportBugRequest.BugType", [
      { no: 0, name: "BUG_TYPE_UNSPECIFIED" },
      { no: 1, name: "BUG_TYPE_LOW" },
      { no: 2, name: "BUG_TYPE_MEDIUM" },
      { no: 3, name: "BUG_TYPE_URGENT" },
      { no: 4, name: "BUG_TYPE_CRASH" },
      { no: 5, name: "BUG_TYPE_CONNECTION_ERROR" },
      { no: 6, name: "BUG_TYPE_IDEA" },
      { no: 7, name: "BUG_TYPE_MISC_AUTOMATIC_ERROR" },
    ])
  var rEn = class aOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportBugResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new aOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new aOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new aOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(aOe, e, t)
      }
    },
    oEn = class lOe extends _ {
      constructor(e) {
        super(),
          (this.markers = []),
          (this.iterationNumber = 0),
          (this.sequenceId = ""),
          (this.userInstruction = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "markers", kind: "message", T: aEn, repeated: !0 },
          { no: 2, name: "model_details", kind: "message", T: zr },
          { no: 3, name: "iteration_number", kind: "scalar", T: 5 },
          { no: 4, name: "sequence_id", kind: "scalar", T: 9 },
          { no: 5, name: "user_instruction", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new lOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new lOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new lOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(lOe, e, t)
      }
    },
    aEn = class cOe extends _ {
      constructor(e) {
        super(),
          (this.lines = []),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          (this.message = ""),
          (this.relativeWorkspacePath = ""),
          (this.relatedInformation = []),
          (this.contextRanges = []),
          (this.ancestorTypeDefinitions = []),
          (this.insertedSymbolTypes = []),
          (this.quickFixes = []),
          (this.startColumn = 0),
          (this.endColumnInclusive = 0),
          (this.classInformation = []),
          (this.functionSignatures = []),
          (this.snapshot = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_inclusive", kind: "scalar", T: 5 },
          { no: 4, name: "message", kind: "scalar", T: 9 },
          { no: 5, name: "relative_workspace_path", kind: "scalar", T: 9 },
          {
            no: 6,
            name: "related_information",
            kind: "message",
            T: lEn,
            repeated: !0,
          },
          {
            no: 7,
            name: "context_ranges",
            kind: "message",
            T: cEn,
            repeated: !0,
          },
          {
            no: 8,
            name: "ancestor_type_definitions",
            kind: "message",
            T: hEn,
            repeated: !0,
          },
          {
            no: 9,
            name: "inserted_symbol_types",
            kind: "message",
            T: uEn,
            repeated: !0,
          },
          { no: 10, name: "quick_fixes", kind: "message", T: dEn, repeated: !0 },
          { no: 11, name: "start_column", kind: "scalar", T: 5 },
          { no: 12, name: "end_column_inclusive", kind: "scalar", T: 5 },
          {
            no: 13,
            name: "class_information",
            kind: "message",
            T: gEn,
            repeated: !0,
          },
          {
            no: 14,
            name: "function_signatures",
            kind: "message",
            T: mEn,
            repeated: !0,
          },
          { no: 15, name: "snapshot", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new cOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new cOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new cOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(cOe, e, t)
      }
    },
    lEn = class hOe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.relativeWorkspacePath = ""),
          (this.relevantLines = []),
          (this.startLine = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.RelatedInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "relevant_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "start_line", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new hOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new hOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new hOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(hOe, e, t)
      }
    },
    cEn = class uOe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.ContextRange"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new uOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new uOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new uOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(uOe, e, t)
      }
    },
    hEn = class dOe extends _ {
      constructor(e) {
        super(),
          (this.name = ""),
          (this.relativeWorkspacePath = ""),
          (this.startLine = 0),
          (this.lines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.FixMarkersRequest.Marker.AncestorTypeDefinition"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "name", kind: "scalar", T: 9 },
          { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 3, name: "start_line", kind: "scalar", T: 5 },
          { no: 4, name: "lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new dOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new dOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new dOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(dOe, e, t)
      }
    },
    uEn = class fOe extends _ {
      constructor(e) {
        super(),
          (this.symbolName = ""),
          (this.symbolType = ""),
          (this.relativeWorkspacePath = ""),
          (this.symbolLine = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.InsertedSymbolType"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "symbol_name", kind: "scalar", T: 9 },
          { no: 2, name: "symbol_type", kind: "scalar", T: 9 },
          { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 4, name: "symbol_line", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new fOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new fOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new fOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(fOe, e, t)
      }
    },
    dEn = class gOe extends _ {
      constructor(e) {
        super(),
          (this.message = ""),
          (this.kind = ""),
          (this.isPreferred = !1),
          (this.edits = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.QuickFix"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "message", kind: "scalar", T: 9 },
          { no: 2, name: "kind", kind: "scalar", T: 9 },
          { no: 3, name: "is_preferred", kind: "scalar", T: 8 },
          { no: 4, name: "edits", kind: "message", T: fEn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new gOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new gOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new gOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(gOe, e, t)
      }
    },
    fEn = class pOe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          (this.deletedLines = []),
          (this.addLines = []),
          (this.snapshot = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.QuickFix.Edit"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "end_line_inclusive", kind: "scalar", T: 5 },
          { no: 4, name: "deleted_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "add_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 6, name: "snapshot", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new pOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new pOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new pOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(pOe, e, t)
      }
    },
    gEn = class mOe extends _ {
      constructor(e) {
        super(),
          (this.className = ""),
          (this.startLine = 0),
          (this.topLevelLines = []),
          (this.lines = []),
          (this.constructors = []),
          (this.detail = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.ClassInformation"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "class_name", kind: "scalar", T: 9 },
          { no: 2, name: "start_line", kind: "scalar", T: 5 },
          { no: 3, name: "top_level_lines", kind: "scalar", T: 5, repeated: !0 },
          { no: 4, name: "lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 5, name: "constructors", kind: "message", T: pEn, repeated: !0 },
          { no: 6, name: "detail", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new mOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new mOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new mOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(mOe, e, t)
      }
    },
    pEn = class bOe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLineInclusive = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.FixMarkersRequest.Marker.ClassInformation.Constructor"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new bOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new bOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new bOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(bOe, e, t)
      }
    },
    mEn = class vOe extends _ {
      constructor(e) {
        super(),
          (this.label = ""),
          (this.documentation = ""),
          (this.parameters = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersRequest.Marker.FunctionSignature"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "label", kind: "scalar", T: 9 },
          { no: 2, name: "documentation", kind: "scalar", T: 9 },
          { no: 3, name: "parameters", kind: "message", T: bEn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new vOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new vOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new vOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(vOe, e, t)
      }
    },
    bEn = class yOe extends _ {
      constructor(e) {
        super(),
          (this.label = ""),
          (this.documentation = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName =
          "aiserver.v1.FixMarkersRequest.Marker.FunctionSignature.FunctionParameter"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "label", kind: "scalar", T: 9 },
          { no: 2, name: "documentation", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new yOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new yOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new yOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(yOe, e, t)
      }
    },
    vEn = class wOe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.changes = []),
          (this.success = !1),
          (this.iterationNumber = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "changes", kind: "message", T: yEn, repeated: !0 },
          { no: 3, name: "success", kind: "scalar", T: 8 },
          { no: 4, name: "iteration_number", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new wOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new wOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new wOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(wOe, e, t)
      }
    },
    yEn = class COe extends _ {
      constructor(e) {
        super(),
          (this.startLine = 0),
          (this.endLineExclusive = 0),
          (this.deletedLines = []),
          (this.addLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FixMarkersResponse.Change"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "start_line", kind: "scalar", T: 5 },
          { no: 2, name: "end_line_exclusive", kind: "scalar", T: 5 },
          { no: 3, name: "deleted_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 4, name: "add_lines", kind: "scalar", T: 9, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new COe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new COe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new COe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(COe, e, t)
      }
    },
    r2i = class SOe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.repositories = []),
          (this.query = ""),
          (this.codeBlocks = []),
          (this.documentationIdentifiers = []),
          (this.badNotifications = []),
          (this.lintRules = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamLintRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 3, name: "repositories", kind: "message", T: rl, repeated: !0 },
          { no: 4, name: "explicit_context", kind: "message", T: Sf },
          { no: 5, name: "workspace_root_path", kind: "scalar", T: 9, opt: !0 },
          { no: 6, name: "query", kind: "scalar", T: 9 },
          { no: 7, name: "code_blocks", kind: "message", T: ed, repeated: !0 },
          { no: 9, name: "model_details", kind: "message", T: zr },
          {
            no: 10,
            name: "documentation_identifiers",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          {
            no: 11,
            name: "bad_notifications",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
          { no: 12, name: "lint_rules", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new SOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new SOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new SOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(SOe, e, t)
      }
    },
    wEn = class xOe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.timeSinceCompletedActionMs = 0),
          (this.featureType = Zre.UNSPECIFIED),
          (this.relativeWorkspacePath = ""),
          (this.contents = ""),
          (this.linesAboveAndBelow = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportGroundTruthCandidateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "time_since_completed_action_ms", kind: "scalar", T: 5 },
          { no: 3, name: "feature_type", kind: "enum", T: v.getEnumType(Zre) },
          { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 5, name: "contents", kind: "scalar", T: 9 },
          { no: 6, name: "selection_in_question", kind: "message", T: Kf },
          { no: 7, name: "lines_above_and_below", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new xOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new xOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new xOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(xOe, e, t)
      }
    },
    CEn = class kOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportGroundTruthCandidateResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new kOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new kOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new kOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(kOe, e, t)
      }
    },
    SEn = class EOe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.fate = joe.UNSPECIFIED),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportCmdKFateRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request_id", kind: "scalar", T: 9 },
          { no: 2, name: "fate", kind: "enum", T: v.getEnumType(joe) },
        ])
      }
      static fromBinary(e, t) {
        return new EOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new EOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new EOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(EOe, e, t)
      }
    },
    joe
  ;(function (i) {
    ;(i[(i.UNSPECIFIED = 0)] = "UNSPECIFIED"),
      (i[(i.CANCELLED = 1)] = "CANCELLED"),
      (i[(i.ACCEPTED = 2)] = "ACCEPTED"),
      (i[(i.REJECTED = 3)] = "REJECTED"),
      (i[(i.FOLLOWED_UP = 4)] = "FOLLOWED_UP"),
      (i[(i.REPROMPTED = 5)] = "REPROMPTED")
  })(joe || (joe = {})),
    v.util.setEnumType(joe, "aiserver.v1.ReportCmdKFateRequest.Fate", [
      { no: 0, name: "FATE_UNSPECIFIED" },
      { no: 1, name: "FATE_CANCELLED" },
      { no: 2, name: "FATE_ACCEPTED" },
      { no: 3, name: "FATE_REJECTED" },
      { no: 4, name: "FATE_FOLLOWED_UP" },
      { no: 5, name: "FATE_REPROMPTED" },
    ])
  var xEn = class IOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ReportCmdKFateResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [])
      }
      static fromBinary(e, t) {
        return new IOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new IOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new IOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(IOe, e, t)
      }
    },
    GCo = class DOe extends _ {
      constructor(e) {
        super(), (this.sshString = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.SshConfigPromptProps"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "ssh_string", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new DOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new DOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new DOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(DOe, e, t)
      }
    },
    kEn = class TOe extends _ {
      constructor(e) {
        super(),
          (this.conversation = []),
          (this.files = []),
          (this.contextResults = { case: void 0 }),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetFilesForComposerRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "conversation", kind: "message", T: Ha, repeated: !0 },
          { no: 2, name: "files", kind: "message", T: Ho, repeated: !0 },
          { no: 3, name: "rerank_results", kind: "scalar", T: 8, opt: !0 },
          {
            no: 4,
            name: "file_search_results",
            kind: "message",
            T: LVe,
            oneof: "context_results",
          },
          {
            no: 5,
            name: "code_search_results",
            kind: "message",
            T: NVe,
            oneof: "context_results",
          },
          { no: 6, name: "rerank_results_v2", kind: "scalar", T: 8, opt: !0 },
          { no: 7, name: "long_context_mode", kind: "scalar", T: 8, opt: !0 },
          { no: 8, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
          { no: 9, name: "request_id", kind: "scalar", T: 9, opt: !0 },
          { no: 10, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new TOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new TOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new TOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(TOe, e, t)
      }
    },
    EEn = class POe extends _ {
      constructor(e) {
        super(), (this.relativeWorkspacePaths = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetFilesForComposerResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          {
            no: 1,
            name: "relative_workspace_paths",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new POe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new POe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new POe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(POe, e, t)
      }
    },
    o2i = class LOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FindBugsRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "current_file", kind: "message", T: Ho },
          { no: 2, name: "model_details", kind: "message", T: zr },
        ])
      }
      static fromBinary(e, t) {
        return new LOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new LOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new LOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(LOe, e, t)
      }
    },
    IEn = class NOe extends _ {
      constructor(e) {
        super(), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FindBugsResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "bug", kind: "message", T: DEn, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new NOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new NOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new NOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(NOe, e, t)
      }
    },
    DEn = class ROe extends _ {
      constructor(e) {
        super(),
          (this.description = ""),
          (this.lineNumber = 0),
          (this.confidence = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.FindBugsResponse.Bug"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "description", kind: "scalar", T: 9 },
          { no: 2, name: "line_number", kind: "scalar", T: 5 },
          { no: 3, name: "confidence", kind: "scalar", T: 2 },
        ])
      }
      static fromBinary(e, t) {
        return new ROe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new ROe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new ROe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(ROe, e, t)
      }
    },
    TEn = class AOe extends _ {
      constructor(e) {
        super(),
          (this.diffs = []),
          (this.previousCommitMessages = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WriteGitCommitMessageRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diffs", kind: "scalar", T: 9, repeated: !0 },
          {
            no: 2,
            name: "previous_commit_messages",
            kind: "scalar",
            T: 9,
            repeated: !0,
          },
        ])
      }
      static fromBinary(e, t) {
        return new AOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new AOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new AOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(AOe, e, t)
      }
    },
    PEn = class MOe extends _ {
      constructor(e) {
        super(), (this.commitMessage = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.WriteGitCommitMessageResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "commit_message", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new MOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new MOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new MOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(MOe, e, t)
      }
    },
    LEn = class $Oe extends _ {
      constructor(e) {
        super(),
          (this.requestId = ""),
          (this.isComposerVisible = !1),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.KeepComposerCacheWarmRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "request", kind: "message", T: jB },
          { no: 2, name: "request_id", kind: "scalar", T: 9 },
          { no: 3, name: "is_composer_visible", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new $Oe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new $Oe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new $Oe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals($Oe, e, t)
      }
    },
    NEn = class FOe extends _ {
      constructor(e) {
        super(), (this.didKeepWarm = !1), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.KeepComposerCacheWarmResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "did_keep_warm", kind: "scalar", T: 8 },
        ])
      }
      static fromBinary(e, t) {
        return new FOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new FOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new FOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(FOe, e, t)
      }
    },
    REn = class OOe extends _ {
      constructor(e) {
        super(), (this.diffs = []), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetDiffReviewRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "diffs", kind: "message", T: AEn, repeated: !0 },
          { no: 2, name: "custom_instructions", kind: "scalar", T: 9, opt: !0 },
          { no: 3, name: "use_premium_model", kind: "scalar", T: 8, opt: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new OOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new OOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new OOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(OOe, e, t)
      }
    },
    AEn = class BOe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.chunks = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetDiffReviewRequest.SimpleFileDiff"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "chunks", kind: "message", T: MEn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new BOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new BOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new BOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(BOe, e, t)
      }
    },
    MEn = class _Oe extends _ {
      constructor(e) {
        super(),
          (this.oldLines = []),
          (this.newLines = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.GetDiffReviewRequest.SimpleFileDiff.Chunk"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
          { no: 3, name: "old_range", kind: "message", T: Kf },
          { no: 4, name: "new_range", kind: "message", T: Kf },
        ])
      }
      static fromBinary(e, t) {
        return new _Oe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new _Oe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new _Oe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(_Oe, e, t)
      }
    },
    $En = class UOe extends _ {
      constructor(e) {
        super(), (this.text = ""), v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.StreamDiffReviewResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "text", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new UOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new UOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new UOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(UOe, e, t)
      }
    },
    a2i = class HOe extends _ {
      constructor(e) {
        super(),
          (this.contextItems = []),
          (this.modelName = ""),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CountTokensRequest"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "context_items", kind: "message", T: EVe, repeated: !0 },
          { no: 2, name: "model_name", kind: "scalar", T: 9 },
        ])
      }
      static fromBinary(e, t) {
        return new HOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new HOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new HOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(HOe, e, t)
      }
    },
    FEn = class VOe extends _ {
      constructor(e) {
        super(),
          (this.relativeWorkspacePath = ""),
          (this.count = 0),
          (this.lineCount = 0),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.ContextItemTokenDetail"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
          { no: 2, name: "count", kind: "scalar", T: 5 },
          { no: 3, name: "line_count", kind: "scalar", T: 5 },
        ])
      }
      static fromBinary(e, t) {
        return new VOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new VOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new VOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(VOe, e, t)
      }
    },
    l2i = class WOe extends _ {
      constructor(e) {
        super(),
          (this.count = 0),
          (this.tokenDetails = []),
          v.util.initPartial(e, this)
      }
      static {
        this.runtime = v
      }
      static {
        this.typeName = "aiserver.v1.CountTokensResponse"
      }
      static {
        this.fields = v.util.newFieldList(() => [
          { no: 1, name: "count", kind: "scalar", T: 5 },
          { no: 2, name: "token_details", kind: "message", T: FEn, repeated: !0 },
        ])
      }
      static fromBinary(e, t) {
        return new WOe().fromBinary(e, t)
      }
      static fromJson(e, t) {
        return new WOe().fromJson(e, t)
      }
      static fromJsonString(e, t) {
        return new WOe().fromJsonString(e, t)
      }
      static equals(e, t) {
        return v.util.equals(WOe, e, t)
      }
    };

  return {
    lk,
    x$,
    cI,
    uI,
    Ka,
    Ph,
    Er,
    tVe,
    iVe,
    E$,
    aVe,
    ro,
    I$,
    noe,
    roe,
    coe,
    doe,
    goe,
    Coe,
    jt,
    D$,
    xf,
    BT,
    $B,
    Y9,
    FB,
    T$,
    OB,
    P$,
    ls,
    bl,
    hk,
    fs,
    ev,
    N$,
    Zm,
    UB,
    HB,
    MC,
    hG,
    VB,
    QN,
    Z9,
    WB,
    Zy,
    e7,
    R$,
    Moe,
    lc,
    kf,
    UT,
    nm,
    n7,
    r7,
    rm,
    Yv,
    dG,
    qB,
    Jh,
    r0,
    M$,
    $$,
    F$,
    Kh,
    Qm,
    ck,
    WRi,
    FT,
    J9,
    eoe,
    Hu,
    Tgn,
    hI,
    Kf,
    RC,
    ed,
    Agn,
    AC,
    MSt,
    Ho,
    zr,
    $St,
    jRi,
    k$,
    Cf,
    zRi,
    iG,
    Sf,
    K9,
    toe,
    JRi,
    ZHe,
    sG,
    KRi,
    OT,
    eVe,
    OSt,
    XRi,
    ZRi,
    qgn,
    eAi,
    jgn,
    _St,
    zgn,
    sVe,
    tAi,
    Zgn,
    iAi,
    epn,
    nVe,
    sAi,
    rAi,
    npn,
    rVe,
    rpn,
    USt,
    lAi,
    hAi,
    cpn,
    hpn,
    uAi,
    HSt,
    ioe,
    VSt,
    oVe,
    upn,
    fpn,
    gpn,
    ppn,
    MB,
    mpn,
    bpn,
    vpn,
    wpn,
    Spn,
    xpn,
    kpn,
    Epn,
    dAi,
    Dpn,
    Tpn,
    Lpn,
    Rpn,
    Apn,
    $pn,
    Fpn,
    Opn,
    Bpn,
    _pn,
    Upn,
    Hpn,
    Vpn,
    Wpn,
    fAi,
    jpn,
    eCo,
    tCo,
    gAi,
    im,
    WSt,
    pAi,
    mAi,
    bAi,
    vAi,
    iCo,
    sCo,
    nCo,
    rCo,
    oCo,
    aCo,
    lCo,
    cCo,
    hCo,
    uCo,
    dCo,
    fCo,
    smn,
    rl,
    gCo,
    rmn,
    amn,
    lmn,
    wAi,
    qSt,
    CAi,
    jSt,
    SAi,
    lVe,
    xAi,
    kAi,
    pCo,
    mCo,
    cVe,
    EAi,
    Zc,
    umn,
    IAi,
    koe,
    nG,
    DAi,
    bCo,
    zSt,
    TAi,
    Ioe,
    PAi,
    hVe,
    LAi,
    GSt,
    RAi,
    AAi,
    JSt,
    MAi,
    $Ai,
    KSt,
    FAi,
    OAi,
    YSt,
    BAi,
    _Ai,
    XSt,
    uVe,
    HAi,
    QSt,
    ZSt,
    VAi,
    e1t,
    Doe,
    t1t,
    X9,
    WAi,
    i1t,
    qAi,
    vCo,
    BB,
    zAi,
    GAi,
    s1t,
    JAi,
    n1t,
    KAi,
    r1t,
    YAi,
    XAi,
    QAi,
    ZAi,
    sbn,
    yCo,
    eMi,
    tMi,
    iMi,
    dVe,
    sMi,
    abn,
    o1t,
    nMi,
    rMi,
    oMi,
    aMi,
    lMi,
    cMi,
    hMi,
    a1t,
    uMi,
    dMi,
    fMi,
    l1t,
    fVe,
    gMi,
    vbn,
    rG,
    pMi,
    c1t,
    mMi,
    h1t,
    bMi,
    d1t,
    vMi,
    f1t,
    yMi,
    g1t,
    Toe,
    wMi,
    p1t,
    wCo,
    CMi,
    Lbn,
    Nbn,
    oG,
    xMi,
    kMi,
    EMi,
    IMi,
    DMi,
    gVe,
    _B,
    pVe,
    TMi,
    PMi,
    Kbn,
    Ybn,
    Q9,
    Xbn,
    SCo,
    L$,
    mVe,
    bVe,
    evn,
    tvn,
    svn,
    vVe,
    AMi,
    yVe,
    Ha,
    _T,
    FMi,
    xCo,
    mvn,
    C1t,
    OMi,
    BMi,
    kCo,
    S1t,
    _Mi,
    aG,
    x1t,
    XN,
    k1t,
    lG,
    wVe,
    E1t,
    ICo,
    cG,
    NCo,
    MCo,
    Fvn,
    Ovn,
    D1t,
    Bvn,
    T1t,
    Hvn,
    P1t,
    HMi,
    zvn,
    VMi,
    Kvn,
    Yvn,
    Xvn,
    Qvn,
    Zvn,
    $C,
    eyn,
    iyn,
    uk,
    Aoe,
    syn,
    uG,
    dyn,
    sm,
    pyn,
    Syn,
    Dyn,
    GMi,
    own,
    awn,
    dwn,
    M1t,
    Ewn,
    Iwn,
    JMi,
    Dwn,
    KMi,
    YMi,
    _Co,
    t7,
    xVe,
    kVe,
    EVe,
    F1t,
    Own,
    t$i,
    i7,
    B1t,
    w0n,
    C0n,
    S0n,
    DVe,
    Foe,
    s$i,
    n$i,
    o$i,
    A$,
    a$i,
    E0n,
    s7,
    l$i,
    c$i,
    h$i,
    R0n,
    A0n,
    O0n,
    B0n,
    _0n,
    U0n,
    u$i,
    H0n,
    V0n,
    W0n,
    q0n,
    j0n,
    z0n,
    G0n,
    K0n,
    Boe,
    d$i,
    f$i,
    eCn,
    rCn,
    dCn,
    gCn,
    H1t,
    b$i,
    pCn,
    mCn,
    bCn,
    vCn,
    wCn,
    SCn,
    xCn,
    kCn,
    ECn,
    ICn,
    DCn,
    TCn,
    LCn,
    NCn,
    RCn,
    ACn,
    MCn,
    $Cn,
    FCn,
    OCn,
    BCn,
    _Cn,
    HCn,
    v$i,
    VCn,
    WCn,
    V1t,
    y$i,
    jCn,
    GCn,
    JCn,
    w$i,
    C$i,
    XCn,
    S$i,
    QCn,
    HT,
    eSn,
    k$i,
    tSn,
    E$i,
    I$i,
    D$i,
    iSn,
    sSn,
    nSn,
    rSn,
    oSn,
    lSn,
    cSn,
    hSn,
    dSn,
    fSn,
    gSn,
    pSn,
    mSn,
    bSn,
    T$i,
    vSn,
    ySn,
    wSn,
    CSn,
    xSn,
    ISn,
    DSn,
    TSn,
    PSn,
    L$i,
    N$i,
    LSn,
    NSn,
    RSn,
    ASn,
    MSn,
    $Sn,
    FSn,
    OSn,
    BSn,
    R$i,
    _Sn,
    USn,
    HSn,
    A$i,
    VSn,
    WSn,
    M$i,
    qSn,
    jSn,
    zSn,
    GSn,
    JSn,
    KSn,
    TVe,
    $$i,
    r1n,
    PVe,
    o1n,
    l1n,
    u1n,
    d1n,
    f1n,
    g1n,
    F$i,
    k1n,
    RVe,
    O$i,
    P1n,
    L1n,
    R1n,
    A1n,
    M1n,
    $1n,
    B$i,
    F1n,
    _$i,
    B1n,
    _1n,
    U1n,
    H1n,
    V1n,
    W1n,
    U$i,
    q1n,
    j1n,
    G1n,
    J1n,
    AVe,
    K1n,
    Y1n,
    V$i,
    Z1n,
    W$i,
    exn,
    txn,
    q$i,
    W1t,
    j$i,
    sxn,
    nxn,
    rxn,
    oxn,
    axn,
    z$i,
    G$i,
    cxn,
    hxn,
    uxn,
    dxn,
    fxn,
    gxn,
    pxn,
    mxn,
    K$i,
    ZN,
    Sxn,
    xxn,
    kxn,
    Exn,
    Ixn,
    Dxn,
    Txn,
    jB,
    Mxn,
    $xn,
    Y$i,
    Fxn,
    Bxn,
    _xn,
    Q$i,
    Hxn,
    Vxn,
    Wxn,
    qxn,
    jxn,
    zxn,
    Gxn,
    Jxn,
    Kxn,
    dI,
    Qxn,
    Z$i,
    Zxn,
    tkn,
    ikn,
    skn,
    nkn,
    rkn,
    akn,
    lkn,
    ckn,
    hkn,
    ukn,
    dkn,
    e2i,
    bkn,
    wkn,
    Ckn,
    t2i,
    MVe,
    Dkn,
    Lkn,
    Nkn,
    Rkn,
    q1t,
    Akn,
    s2i,
    Mkn,
    $kn,
    j1t,
    Fkn,
    Okn,
    Bkn,
    _kn,
    jkn,
    zkn,
    Gkn,
    n2i,
    Jkn,
    Ykn,
    Xkn,
    Qkn,
    Zkn,
    eEn,
    tEn,
    iEn,
    sEn,
    nEn,
    rEn,
    oEn,
    aEn,
    lEn,
    cEn,
    hEn,
    dEn,
    fEn,
    gEn,
    pEn,
    mEn,
    bEn,
    vEn,
    yEn,
    r2i,
    wEn,
    CEn,
    SEn,
    xEn,
    kEn,
    EEn,
    o2i,
    IEn,
    TEn,
    PEn,
    LEn,
    NEn,
    REn,
    $En,
    a2i,
    l2i
  };
}